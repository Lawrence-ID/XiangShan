// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module RRArbiter_12(
  input        clock,
  input        io_in_0_valid,
  input        io_in_1_valid,
  input        io_in_2_valid,
  input        io_in_3_valid,
  output [1:0] io_chosen
);

  reg  [1:0] ctrl_validMask_grantMask_lastGrant;
  wire       ctrl_validMask_1 =
    io_in_1_valid & ctrl_validMask_grantMask_lastGrant == 2'h0;
  wire       ctrl_validMask_2 = io_in_2_valid & ~(ctrl_validMask_grantMask_lastGrant[1]);
  wire       ctrl_validMask_3 =
    io_in_3_valid & ctrl_validMask_grantMask_lastGrant != 2'h3;
  wire [1:0] _GEN = io_in_0_valid ? 2'h0 : io_in_1_valid ? 2'h1 : {1'h1, ~io_in_2_valid};
  wire [1:0] io_chosen_choice =
    ctrl_validMask_1 ? 2'h1 : ctrl_validMask_2 ? 2'h2 : ctrl_validMask_3 ? 2'h3 : _GEN;
  wire [3:0] _GEN_0 =
    {{io_in_3_valid}, {io_in_2_valid}, {io_in_1_valid}, {io_in_0_valid}};
  always @(posedge clock) begin
    if (_GEN_0[io_chosen_choice]) begin
      if (ctrl_validMask_1)
        ctrl_validMask_grantMask_lastGrant <= 2'h1;
      else if (ctrl_validMask_2)
        ctrl_validMask_grantMask_lastGrant <= 2'h2;
      else if (ctrl_validMask_3)
        ctrl_validMask_grantMask_lastGrant <= 2'h3;
      else
        ctrl_validMask_grantMask_lastGrant <= _GEN;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        ctrl_validMask_grantMask_lastGrant = _RANDOM[/*Zero width*/ 1'b0][1:0];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_chosen = io_chosen_choice;
endmodule

