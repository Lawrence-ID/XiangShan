// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module RXDAT(
  input          io_out_valid,
  input  [7:0]   io_out_bits_txnID,
  input  [6:0]   io_out_bits_homeNID,
  input  [2:0]   io_out_bits_opcode,
  input  [2:0]   io_out_bits_resp,
  input  [7:0]   io_out_bits_dbID,
  input  [1:0]   io_out_bits_dataID,
  input  [255:0] io_out_bits_data,
  output         io_in_valid,
  output [7:0]   io_in_mshrId,
  output [5:0]   io_in_respInfo_chiOpcode,
  output [6:0]   io_in_respInfo_homeNID,
  output [7:0]   io_in_respInfo_dbID,
  output [2:0]   io_in_respInfo_resp,
  output         io_refillBufWrite_valid,
  output [7:0]   io_refillBufWrite_bits_id,
  output [511:0] io_refillBufWrite_bits_data_data,
  output [1:0]   io_refillBufWrite_bits_beatMask
);

  wire first = io_out_bits_dataID == 2'h0;
  wire last = io_out_bits_dataID == 2'h2;
  assign io_in_valid = (first | last) & io_out_valid;
  assign io_in_mshrId = io_out_bits_txnID;
  assign io_in_respInfo_chiOpcode = {3'h0, io_out_bits_opcode};
  assign io_in_respInfo_homeNID = io_out_bits_homeNID;
  assign io_in_respInfo_dbID = io_out_bits_dbID;
  assign io_in_respInfo_resp = io_out_bits_resp;
  assign io_refillBufWrite_valid = io_out_valid;
  assign io_refillBufWrite_bits_id = io_out_bits_txnID;
  assign io_refillBufWrite_bits_data_data = {2{io_out_bits_data}};
  assign io_refillBufWrite_bits_beatMask = {last, first};
endmodule

