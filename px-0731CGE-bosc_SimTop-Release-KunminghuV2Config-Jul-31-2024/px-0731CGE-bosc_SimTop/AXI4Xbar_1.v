// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module AXI4Xbar_1(
  input         clock,
  input         reset,
  output        auto_in_aw_ready,
  input         auto_in_aw_valid,
  input  [1:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  output        auto_in_w_ready,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
  input         auto_in_b_ready,
  output        auto_in_b_valid,
  output [1:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
  input         auto_in_ar_valid,
  input  [1:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
  output        auto_in_r_valid,
  output [1:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
  input         auto_out_3_aw_ready,
  output        auto_out_3_aw_valid,
  output [1:0]  auto_out_3_aw_bits_id,
  output [30:0] auto_out_3_aw_bits_addr,
  output [7:0]  auto_out_3_aw_bits_len,
  output [2:0]  auto_out_3_aw_bits_size,
  output [1:0]  auto_out_3_aw_bits_burst,
  output        auto_out_3_aw_bits_lock,
  output [3:0]  auto_out_3_aw_bits_cache,
  output [2:0]  auto_out_3_aw_bits_prot,
  output [3:0]  auto_out_3_aw_bits_qos,
  input         auto_out_3_w_ready,
  output        auto_out_3_w_valid,
  output [63:0] auto_out_3_w_bits_data,
  output [7:0]  auto_out_3_w_bits_strb,
  output        auto_out_3_w_bits_last,
  output        auto_out_3_b_ready,
  input         auto_out_3_b_valid,
  input  [1:0]  auto_out_3_b_bits_id,
  input  [1:0]  auto_out_3_b_bits_resp,
  input         auto_out_3_ar_ready,
  output        auto_out_3_ar_valid,
  output [1:0]  auto_out_3_ar_bits_id,
  output [30:0] auto_out_3_ar_bits_addr,
  output [7:0]  auto_out_3_ar_bits_len,
  output [2:0]  auto_out_3_ar_bits_size,
  output [1:0]  auto_out_3_ar_bits_burst,
  output        auto_out_3_ar_bits_lock,
  output [3:0]  auto_out_3_ar_bits_cache,
  output [2:0]  auto_out_3_ar_bits_prot,
  output [3:0]  auto_out_3_ar_bits_qos,
  output        auto_out_3_r_ready,
  input         auto_out_3_r_valid,
  input  [1:0]  auto_out_3_r_bits_id,
  input  [63:0] auto_out_3_r_bits_data,
  input  [1:0]  auto_out_3_r_bits_resp,
  input         auto_out_3_r_bits_last,
  input         auto_out_2_aw_ready,
  output        auto_out_2_aw_valid,
  output [1:0]  auto_out_2_aw_bits_id,
  output [30:0] auto_out_2_aw_bits_addr,
  output [7:0]  auto_out_2_aw_bits_len,
  output [2:0]  auto_out_2_aw_bits_size,
  output [1:0]  auto_out_2_aw_bits_burst,
  output        auto_out_2_aw_bits_lock,
  output [3:0]  auto_out_2_aw_bits_cache,
  output [2:0]  auto_out_2_aw_bits_prot,
  output [3:0]  auto_out_2_aw_bits_qos,
  input         auto_out_2_w_ready,
  output        auto_out_2_w_valid,
  output [63:0] auto_out_2_w_bits_data,
  output [7:0]  auto_out_2_w_bits_strb,
  output        auto_out_2_w_bits_last,
  output        auto_out_2_b_ready,
  input         auto_out_2_b_valid,
  input  [1:0]  auto_out_2_b_bits_id,
  input  [1:0]  auto_out_2_b_bits_resp,
  input         auto_out_2_ar_ready,
  output        auto_out_2_ar_valid,
  output [1:0]  auto_out_2_ar_bits_id,
  output [30:0] auto_out_2_ar_bits_addr,
  output [7:0]  auto_out_2_ar_bits_len,
  output [2:0]  auto_out_2_ar_bits_size,
  output [1:0]  auto_out_2_ar_bits_burst,
  output        auto_out_2_ar_bits_lock,
  output [3:0]  auto_out_2_ar_bits_cache,
  output [2:0]  auto_out_2_ar_bits_prot,
  output [3:0]  auto_out_2_ar_bits_qos,
  output        auto_out_2_r_ready,
  input         auto_out_2_r_valid,
  input  [1:0]  auto_out_2_r_bits_id,
  input  [63:0] auto_out_2_r_bits_data,
  input  [1:0]  auto_out_2_r_bits_resp,
  input         auto_out_2_r_bits_last,
  input         auto_out_1_aw_ready,
  output        auto_out_1_aw_valid,
  output [1:0]  auto_out_1_aw_bits_id,
  output [28:0] auto_out_1_aw_bits_addr,
  output [7:0]  auto_out_1_aw_bits_len,
  output [2:0]  auto_out_1_aw_bits_size,
  output [1:0]  auto_out_1_aw_bits_burst,
  output        auto_out_1_aw_bits_lock,
  output [3:0]  auto_out_1_aw_bits_cache,
  output [2:0]  auto_out_1_aw_bits_prot,
  output [3:0]  auto_out_1_aw_bits_qos,
  input         auto_out_1_w_ready,
  output        auto_out_1_w_valid,
  output [63:0] auto_out_1_w_bits_data,
  output [7:0]  auto_out_1_w_bits_strb,
  output        auto_out_1_w_bits_last,
  output        auto_out_1_b_ready,
  input         auto_out_1_b_valid,
  input  [1:0]  auto_out_1_b_bits_id,
  input  [1:0]  auto_out_1_b_bits_resp,
  input         auto_out_1_ar_ready,
  output        auto_out_1_ar_valid,
  output [1:0]  auto_out_1_ar_bits_id,
  output [28:0] auto_out_1_ar_bits_addr,
  output [7:0]  auto_out_1_ar_bits_len,
  output [2:0]  auto_out_1_ar_bits_size,
  output [1:0]  auto_out_1_ar_bits_burst,
  output        auto_out_1_ar_bits_lock,
  output [3:0]  auto_out_1_ar_bits_cache,
  output [2:0]  auto_out_1_ar_bits_prot,
  output [3:0]  auto_out_1_ar_bits_qos,
  output        auto_out_1_r_ready,
  input         auto_out_1_r_valid,
  input  [1:0]  auto_out_1_r_bits_id,
  input  [63:0] auto_out_1_r_bits_data,
  input  [1:0]  auto_out_1_r_bits_resp,
  input         auto_out_1_r_bits_last,
  input         auto_out_0_aw_ready,
  output        auto_out_0_aw_valid,
  output [1:0]  auto_out_0_aw_bits_id,
  output [30:0] auto_out_0_aw_bits_addr,
  output [7:0]  auto_out_0_aw_bits_len,
  output [2:0]  auto_out_0_aw_bits_size,
  output [1:0]  auto_out_0_aw_bits_burst,
  output        auto_out_0_aw_bits_lock,
  output [3:0]  auto_out_0_aw_bits_cache,
  output [2:0]  auto_out_0_aw_bits_prot,
  output [3:0]  auto_out_0_aw_bits_qos,
  input         auto_out_0_w_ready,
  output        auto_out_0_w_valid,
  output [63:0] auto_out_0_w_bits_data,
  output [7:0]  auto_out_0_w_bits_strb,
  output        auto_out_0_w_bits_last,
  output        auto_out_0_b_ready,
  input         auto_out_0_b_valid,
  input  [1:0]  auto_out_0_b_bits_id,
  input  [1:0]  auto_out_0_b_bits_resp,
  input         auto_out_0_ar_ready,
  output        auto_out_0_ar_valid,
  output [1:0]  auto_out_0_ar_bits_id,
  output [30:0] auto_out_0_ar_bits_addr,
  output [7:0]  auto_out_0_ar_bits_len,
  output [2:0]  auto_out_0_ar_bits_size,
  output [1:0]  auto_out_0_ar_bits_burst,
  output        auto_out_0_ar_bits_lock,
  output [3:0]  auto_out_0_ar_bits_cache,
  output [2:0]  auto_out_0_ar_bits_prot,
  output [3:0]  auto_out_0_ar_bits_qos,
  output        auto_out_0_r_ready,
  input         auto_out_0_r_valid,
  input  [1:0]  auto_out_0_r_bits_id,
  input  [63:0] auto_out_0_r_bits_data,
  input  [1:0]  auto_out_0_r_bits_resp,
  input         auto_out_0_r_bits_last
);

  wire        _portsWOI_in_0_w_ready_T_6;
  wire        _portsAWOI_in_0_aw_ready_T_6;
  wire        _portsAROI_in_0_ar_ready_T_6;
  wire        _awIn_0_io_enq_ready;
  wire        _awIn_0_io_deq_valid;
  wire [3:0]  _awIn_0_io_deq_bits;
  wire [8:0]  _requestARIO_T = auto_in_ar_bits_addr[30:22] ^ 9'h101;
  wire        requestARIO_0_0 =
    {_requestARIO_T[8], _requestARIO_T[0], auto_in_ar_bits_addr[18]} == 3'h0;
  wire        requestARIO_0_2 =
    {~(auto_in_ar_bits_addr[30]),
     auto_in_ar_bits_addr[22],
     auto_in_ar_bits_addr[18]} == 3'h0;
  wire [12:0] _requestARIO_T_15 = auto_in_ar_bits_addr[30:18] ^ 13'h1001;
  wire        requestARIO_0_3 =
    {_requestARIO_T_15[12], auto_in_ar_bits_addr[22], _requestARIO_T_15[0]} == 3'h0;
  wire [8:0]  _requestAWIO_T = auto_in_aw_bits_addr[30:22] ^ 9'h101;
  wire        requestAWIO_0_0 =
    {_requestAWIO_T[8], _requestAWIO_T[0], auto_in_aw_bits_addr[18]} == 3'h0;
  wire        requestAWIO_0_2 =
    {~(auto_in_aw_bits_addr[30]),
     auto_in_aw_bits_addr[22],
     auto_in_aw_bits_addr[18]} == 3'h0;
  wire [12:0] _requestAWIO_T_15 = auto_in_aw_bits_addr[30:18] ^ 13'h1001;
  wire        requestAWIO_0_3 =
    {_requestAWIO_T_15[12], auto_in_aw_bits_addr[22], _requestAWIO_T_15[0]} == 3'h0;
  wire [1:0]  arTag =
    {|{requestARIO_0_3, requestARIO_0_2}, requestARIO_0_3 | ~(auto_in_ar_bits_addr[30])};
  wire [1:0]  awTag =
    {|{requestAWIO_0_3, requestAWIO_0_2}, requestAWIO_0_3 | ~(auto_in_aw_bits_addr[30])};
  reg  [2:0]  arFIFOMap_0_count;
  reg  [1:0]  arFIFOMap_0_last;
  reg  [2:0]  awFIFOMap_0_count;
  reg  [1:0]  awFIFOMap_0_last;
  reg  [2:0]  arFIFOMap_1_count;
  reg  [1:0]  arFIFOMap_1_last;
  reg  [2:0]  awFIFOMap_1_count;
  reg  [1:0]  awFIFOMap_1_last;
  reg  [2:0]  arFIFOMap_2_count;
  reg  [1:0]  arFIFOMap_2_last;
  reg  [2:0]  awFIFOMap_2_count;
  reg  [1:0]  awFIFOMap_2_last;
  reg  [2:0]  arFIFOMap_3_count;
  reg  [1:0]  arFIFOMap_3_last;
  reg  [2:0]  awFIFOMap_3_count;
  reg  [1:0]  awFIFOMap_3_last;
  wire [3:0]  _GEN =
    {{(arFIFOMap_3_count == 3'h0 | arFIFOMap_3_last == arTag)
        & arFIFOMap_3_count != 3'h7},
     {(arFIFOMap_2_count == 3'h0 | arFIFOMap_2_last == arTag)
        & arFIFOMap_2_count != 3'h7},
     {(arFIFOMap_1_count == 3'h0 | arFIFOMap_1_last == arTag)
        & arFIFOMap_1_count != 3'h7},
     {(arFIFOMap_0_count == 3'h0 | arFIFOMap_0_last == arTag)
        & arFIFOMap_0_count != 3'h7}};
  wire        in_0_ar_valid = auto_in_ar_valid & _GEN[auto_in_ar_bits_id];
  wire        nodeIn_ar_ready = _portsAROI_in_0_ar_ready_T_6 & _GEN[auto_in_ar_bits_id];
  reg         latched;
  wire        _nodeIn_aw_ready_T = latched | _awIn_0_io_enq_ready;
  wire [3:0]  _GEN_0 =
    {{(awFIFOMap_3_count == 3'h0 | awFIFOMap_3_last == awTag)
        & awFIFOMap_3_count != 3'h7},
     {(awFIFOMap_2_count == 3'h0 | awFIFOMap_2_last == awTag)
        & awFIFOMap_2_count != 3'h7},
     {(awFIFOMap_1_count == 3'h0 | awFIFOMap_1_last == awTag)
        & awFIFOMap_1_count != 3'h7},
     {(awFIFOMap_0_count == 3'h0 | awFIFOMap_0_last == awTag)
        & awFIFOMap_0_count != 3'h7}};
  wire        in_0_aw_valid =
    auto_in_aw_valid & _nodeIn_aw_ready_T & _GEN_0[auto_in_aw_bits_id];
  wire        nodeIn_aw_ready =
    _portsAWOI_in_0_aw_ready_T_6 & _nodeIn_aw_ready_T & _GEN_0[auto_in_aw_bits_id];
  wire        _awIn_0_io_enq_valid_T_1 = auto_in_aw_valid & ~latched;
  wire        in_0_w_valid = auto_in_w_valid & _awIn_0_io_deq_valid;
  assign _portsAROI_in_0_ar_ready_T_6 =
    requestARIO_0_0 & auto_out_0_ar_ready | ~(auto_in_ar_bits_addr[30])
    & auto_out_1_ar_ready | requestARIO_0_2 & auto_out_2_ar_ready | requestARIO_0_3
    & auto_out_3_ar_ready;
  assign _portsAWOI_in_0_aw_ready_T_6 =
    requestAWIO_0_0 & auto_out_0_aw_ready | ~(auto_in_aw_bits_addr[30])
    & auto_out_1_aw_ready | requestAWIO_0_2 & auto_out_2_aw_ready | requestAWIO_0_3
    & auto_out_3_aw_ready;
  assign _portsWOI_in_0_w_ready_T_6 =
    _awIn_0_io_deq_bits[0] & auto_out_0_w_ready | _awIn_0_io_deq_bits[1]
    & auto_out_1_w_ready | _awIn_0_io_deq_bits[2] & auto_out_2_w_ready
    | _awIn_0_io_deq_bits[3] & auto_out_3_w_ready;
  reg         idle_4;
  wire        anyValid =
    auto_out_0_r_valid | auto_out_1_r_valid | auto_out_2_r_valid | auto_out_3_r_valid;
  wire [3:0]  readys_valid =
    {auto_out_3_r_valid, auto_out_2_r_valid, auto_out_1_r_valid, auto_out_0_r_valid};
  reg  [3:0]  readys_mask;
  wire [3:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [5:0]  _GEN_1 =
    {_readys_filter_T_1[2:0], auto_out_3_r_valid, auto_out_2_r_valid, auto_out_1_r_valid}
    | {_readys_filter_T_1, auto_out_3_r_valid, auto_out_2_r_valid};
  wire [4:0]  _GEN_2 = _GEN_1[4:0] | {_readys_filter_T_1[3], _GEN_1[5:2]};
  wire [3:0]  readys_readys =
    ~({readys_mask[3],
       _readys_filter_T_1[3] | readys_mask[2],
       _GEN_1[5] | readys_mask[1],
       _GEN_2[4] | readys_mask[0]} & _GEN_2[3:0]);
  wire        prefixOR_1 = readys_readys[0] & auto_out_0_r_valid;
  wire        winner_4_1 = readys_readys[1] & auto_out_1_r_valid;
  wire        winner_4_2 = readys_readys[2] & auto_out_2_r_valid;
  wire        winner_4_3 = readys_readys[3] & auto_out_3_r_valid;
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  reg         state_4_3;
  wire        muxState_4_0 = idle_4 ? prefixOR_1 : state_4_0;
  wire        muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire        muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  wire        muxState_4_3 = idle_4 ? winner_4_3 : state_4_3;
  wire        in_0_r_valid =
    idle_4
      ? anyValid
      : state_4_0 & auto_out_0_r_valid | state_4_1 & auto_out_1_r_valid | state_4_2
        & auto_out_2_r_valid | state_4_3 & auto_out_3_r_valid;
  wire        _in_0_r_bits_T_6 =
    muxState_4_0 & auto_out_0_r_bits_last | muxState_4_1 & auto_out_1_r_bits_last
    | muxState_4_2 & auto_out_2_r_bits_last | muxState_4_3 & auto_out_3_r_bits_last;
  wire [1:0]  _in_0_r_bits_T_27 =
    (muxState_4_0 ? auto_out_0_r_bits_id : 2'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_id : 2'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_id : 2'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_id : 2'h0);
  reg         idle_5;
  wire        anyValid_1 =
    auto_out_0_b_valid | auto_out_1_b_valid | auto_out_2_b_valid | auto_out_3_b_valid;
  wire [3:0]  readys_valid_1 =
    {auto_out_3_b_valid, auto_out_2_b_valid, auto_out_1_b_valid, auto_out_0_b_valid};
  reg  [3:0]  readys_mask_1;
  wire [3:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [5:0]  _GEN_3 =
    {_readys_filter_T_3[2:0], auto_out_3_b_valid, auto_out_2_b_valid, auto_out_1_b_valid}
    | {_readys_filter_T_3, auto_out_3_b_valid, auto_out_2_b_valid};
  wire [4:0]  _GEN_4 = _GEN_3[4:0] | {_readys_filter_T_3[3], _GEN_3[5:2]};
  wire [3:0]  readys_readys_1 =
    ~({readys_mask_1[3],
       _readys_filter_T_3[3] | readys_mask_1[2],
       _GEN_3[5] | readys_mask_1[1],
       _GEN_4[4] | readys_mask_1[0]} & _GEN_4[3:0]);
  wire        winner_5_0 = readys_readys_1[0] & auto_out_0_b_valid;
  wire        winner_5_1 = readys_readys_1[1] & auto_out_1_b_valid;
  wire        winner_5_2 = readys_readys_1[2] & auto_out_2_b_valid;
  wire        winner_5_3 = readys_readys_1[3] & auto_out_3_b_valid;
  reg         state_5_0;
  reg         state_5_1;
  reg         state_5_2;
  reg         state_5_3;
  wire        muxState_5_0 = idle_5 ? winner_5_0 : state_5_0;
  wire        muxState_5_1 = idle_5 ? winner_5_1 : state_5_1;
  wire        muxState_5_2 = idle_5 ? winner_5_2 : state_5_2;
  wire        muxState_5_3 = idle_5 ? winner_5_3 : state_5_3;
  wire        in_0_b_valid =
    idle_5
      ? anyValid_1
      : state_5_0 & auto_out_0_b_valid | state_5_1 & auto_out_1_b_valid | state_5_2
        & auto_out_2_b_valid | state_5_3 & auto_out_3_b_valid;
  wire [1:0]  _in_0_b_bits_T_13 =
    (muxState_5_0 ? auto_out_0_b_bits_id : 2'h0)
    | (muxState_5_1 ? auto_out_1_b_bits_id : 2'h0)
    | (muxState_5_2 ? auto_out_2_b_bits_id : 2'h0)
    | (muxState_5_3 ? auto_out_3_b_bits_id : 2'h0);
  wire [3:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [3:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_8 = readys_readys_1 & readys_valid_1;
  wire [3:0]  _readys_mask_T_11 = _readys_mask_T_8 | {_readys_mask_T_8[2:0], 1'h0};
  wire        _arFIFOMap_3_T_4 = auto_in_r_ready & in_0_r_valid;
  wire        _awFIFOMap_3_T_4 = auto_in_b_ready & in_0_b_valid;
  wire        _arFIFOMap_3_T_1 = nodeIn_ar_ready & auto_in_ar_valid;
  wire        _arFIFOMap_0_T_2 = auto_in_ar_bits_id == 2'h0 & _arFIFOMap_3_T_1;
  wire        _awFIFOMap_3_T_1 = nodeIn_aw_ready & auto_in_aw_valid;
  wire        _awFIFOMap_0_T_2 = auto_in_aw_bits_id == 2'h0 & _awFIFOMap_3_T_1;
  wire        _arFIFOMap_1_T_2 = auto_in_ar_bits_id == 2'h1 & _arFIFOMap_3_T_1;
  wire        _awFIFOMap_1_T_2 = auto_in_aw_bits_id == 2'h1 & _awFIFOMap_3_T_1;
  wire        _arFIFOMap_2_T_2 = auto_in_ar_bits_id == 2'h2 & _arFIFOMap_3_T_1;
  wire        _awFIFOMap_2_T_2 = auto_in_aw_bits_id == 2'h2 & _awFIFOMap_3_T_1;
  wire        _arFIFOMap_3_T_2 = (&auto_in_ar_bits_id) & _arFIFOMap_3_T_1;
  wire        _awFIFOMap_3_T_2 = (&auto_in_aw_bits_id) & _awFIFOMap_3_T_1;
  always @(posedge clock) begin
    if (reset) begin
      arFIFOMap_0_count <= 3'h0;
      awFIFOMap_0_count <= 3'h0;
      arFIFOMap_1_count <= 3'h0;
      awFIFOMap_1_count <= 3'h0;
      arFIFOMap_2_count <= 3'h0;
      awFIFOMap_2_count <= 3'h0;
      arFIFOMap_3_count <= 3'h0;
      awFIFOMap_3_count <= 3'h0;
      latched <= 1'h0;
      idle_4 <= 1'h1;
      readys_mask <= 4'hF;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
      state_4_3 <= 1'h0;
      idle_5 <= 1'h1;
      readys_mask_1 <= 4'hF;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      state_5_3 <= 1'h0;
    end
    else begin
      arFIFOMap_0_count <=
        3'(3'(arFIFOMap_0_count + {2'h0, _arFIFOMap_0_T_2})
           - {2'h0, _in_0_r_bits_T_27 == 2'h0 & _arFIFOMap_3_T_4 & _in_0_r_bits_T_6});
      awFIFOMap_0_count <=
        3'(3'(awFIFOMap_0_count + {2'h0, _awFIFOMap_0_T_2})
           - {2'h0, _in_0_b_bits_T_13 == 2'h0 & _awFIFOMap_3_T_4});
      arFIFOMap_1_count <=
        3'(3'(arFIFOMap_1_count + {2'h0, _arFIFOMap_1_T_2})
           - {2'h0, _in_0_r_bits_T_27 == 2'h1 & _arFIFOMap_3_T_4 & _in_0_r_bits_T_6});
      awFIFOMap_1_count <=
        3'(3'(awFIFOMap_1_count + {2'h0, _awFIFOMap_1_T_2})
           - {2'h0, _in_0_b_bits_T_13 == 2'h1 & _awFIFOMap_3_T_4});
      arFIFOMap_2_count <=
        3'(3'(arFIFOMap_2_count + {2'h0, _arFIFOMap_2_T_2})
           - {2'h0, _in_0_r_bits_T_27 == 2'h2 & _arFIFOMap_3_T_4 & _in_0_r_bits_T_6});
      awFIFOMap_2_count <=
        3'(3'(awFIFOMap_2_count + {2'h0, _awFIFOMap_2_T_2})
           - {2'h0, _in_0_b_bits_T_13 == 2'h2 & _awFIFOMap_3_T_4});
      arFIFOMap_3_count <=
        3'(3'(arFIFOMap_3_count + {2'h0, _arFIFOMap_3_T_2})
           - {2'h0, (&_in_0_r_bits_T_27) & _arFIFOMap_3_T_4 & _in_0_r_bits_T_6});
      awFIFOMap_3_count <=
        3'(3'(awFIFOMap_3_count + {2'h0, _awFIFOMap_3_T_2})
           - {2'h0, (&_in_0_b_bits_T_13) & _awFIFOMap_3_T_4});
      latched <=
        ~(_portsAWOI_in_0_aw_ready_T_6 & in_0_aw_valid)
        & (_awIn_0_io_enq_ready & _awIn_0_io_enq_valid_T_1 | latched);
      idle_4 <= auto_in_r_ready & in_0_r_valid | ~anyValid & idle_4;
      if (idle_4 & (|readys_valid))
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[1:0], 2'h0};
      if (idle_4) begin
        state_4_0 <= prefixOR_1;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
        state_4_3 <= winner_4_3;
      end
      idle_5 <= auto_in_b_ready & in_0_b_valid | ~anyValid_1 & idle_5;
      if (idle_5 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_11 | {_readys_mask_T_11[1:0], 2'h0};
      if (idle_5) begin
        state_5_0 <= winner_5_0;
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
        state_5_3 <= winner_5_3;
      end
    end
    if (_arFIFOMap_0_T_2)
      arFIFOMap_0_last <= arTag;
    if (_awFIFOMap_0_T_2)
      awFIFOMap_0_last <= awTag;
    if (_arFIFOMap_1_T_2)
      arFIFOMap_1_last <= arTag;
    if (_awFIFOMap_1_T_2)
      awFIFOMap_1_last <= awTag;
    if (_arFIFOMap_2_T_2)
      arFIFOMap_2_last <= arTag;
    if (_awFIFOMap_2_T_2)
      awFIFOMap_2_last <= awTag;
    if (_arFIFOMap_3_T_2)
      arFIFOMap_3_last <= arTag;
    if (_awFIFOMap_3_T_2)
      awFIFOMap_3_last <= awTag;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        arFIFOMap_0_count = _RANDOM[2'h0][2:0];
        arFIFOMap_0_last = _RANDOM[2'h0][4:3];
        awFIFOMap_0_count = _RANDOM[2'h0][7:5];
        awFIFOMap_0_last = _RANDOM[2'h0][9:8];
        arFIFOMap_1_count = _RANDOM[2'h0][12:10];
        arFIFOMap_1_last = _RANDOM[2'h0][14:13];
        awFIFOMap_1_count = _RANDOM[2'h0][17:15];
        awFIFOMap_1_last = _RANDOM[2'h0][19:18];
        arFIFOMap_2_count = _RANDOM[2'h0][22:20];
        arFIFOMap_2_last = _RANDOM[2'h0][24:23];
        awFIFOMap_2_count = _RANDOM[2'h0][27:25];
        awFIFOMap_2_last = _RANDOM[2'h0][29:28];
        arFIFOMap_3_count = {_RANDOM[2'h0][31:30], _RANDOM[2'h1][0]};
        arFIFOMap_3_last = _RANDOM[2'h1][2:1];
        awFIFOMap_3_count = _RANDOM[2'h1][5:3];
        awFIFOMap_3_last = _RANDOM[2'h1][7:6];
        latched = _RANDOM[2'h1][8];
        idle_4 = _RANDOM[2'h1][25];
        readys_mask = _RANDOM[2'h1][29:26];
        state_4_0 = _RANDOM[2'h1][30];
        state_4_1 = _RANDOM[2'h1][31];
        state_4_2 = _RANDOM[2'h2][0];
        state_4_3 = _RANDOM[2'h2][1];
        idle_5 = _RANDOM[2'h2][2];
        readys_mask_1 = _RANDOM[2'h2][6:3];
        state_5_0 = _RANDOM[2'h2][7];
        state_5_1 = _RANDOM[2'h2][8];
        state_5_2 = _RANDOM[2'h2][9];
        state_5_3 = _RANDOM[2'h2][10];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue2_UInt4 awIn_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_enq_valid (_awIn_0_io_enq_valid_T_1),
    .io_enq_bits
      ({requestAWIO_0_3, requestAWIO_0_2, ~(auto_in_aw_bits_addr[30]), requestAWIO_0_0}),
    .io_deq_ready (auto_in_w_valid & auto_in_w_bits_last & _portsWOI_in_0_w_ready_T_6),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = _portsWOI_in_0_w_ready_T_6 & _awIn_0_io_deq_valid;
  assign auto_in_b_valid = in_0_b_valid;
  assign auto_in_b_bits_id = _in_0_b_bits_T_13;
  assign auto_in_b_bits_resp =
    (muxState_5_0 ? auto_out_0_b_bits_resp : 2'h0)
    | (muxState_5_1 ? auto_out_1_b_bits_resp : 2'h0)
    | (muxState_5_2 ? auto_out_2_b_bits_resp : 2'h0)
    | (muxState_5_3 ? auto_out_3_b_bits_resp : 2'h0);
  assign auto_in_ar_ready = nodeIn_ar_ready;
  assign auto_in_r_valid = in_0_r_valid;
  assign auto_in_r_bits_id = _in_0_r_bits_T_27;
  assign auto_in_r_bits_data =
    (muxState_4_0 ? auto_out_0_r_bits_data : 64'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_data : 64'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_data : 64'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_data : 64'h0);
  assign auto_in_r_bits_resp =
    (muxState_4_0 ? auto_out_0_r_bits_resp : 2'h0)
    | (muxState_4_1 ? auto_out_1_r_bits_resp : 2'h0)
    | (muxState_4_2 ? auto_out_2_r_bits_resp : 2'h0)
    | (muxState_4_3 ? auto_out_3_r_bits_resp : 2'h0);
  assign auto_in_r_bits_last = _in_0_r_bits_T_6;
  assign auto_out_3_aw_valid = in_0_aw_valid & requestAWIO_0_3;
  assign auto_out_3_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_3_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_3_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_3_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_3_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_3_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_3_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_3_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_3_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_3_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[3];
  assign auto_out_3_w_bits_data = auto_in_w_bits_data;
  assign auto_out_3_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_3_w_bits_last = auto_in_w_bits_last;
  assign auto_out_3_b_ready = auto_in_b_ready & (idle_5 ? readys_readys_1[3] : state_5_3);
  assign auto_out_3_ar_valid = in_0_ar_valid & requestARIO_0_3;
  assign auto_out_3_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_3_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_3_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_3_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_3_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_3_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_3_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_3_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_3_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_3_r_ready = auto_in_r_ready & (idle_4 ? readys_readys[3] : state_4_3);
  assign auto_out_2_aw_valid = in_0_aw_valid & requestAWIO_0_2;
  assign auto_out_2_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_2_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_2_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_2_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_2_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_2_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_2_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_2_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_2_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_2_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[2];
  assign auto_out_2_w_bits_data = auto_in_w_bits_data;
  assign auto_out_2_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_2_w_bits_last = auto_in_w_bits_last;
  assign auto_out_2_b_ready = auto_in_b_ready & (idle_5 ? readys_readys_1[2] : state_5_2);
  assign auto_out_2_ar_valid = in_0_ar_valid & requestARIO_0_2;
  assign auto_out_2_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_2_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_2_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_2_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_2_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_2_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_2_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_2_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_2_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_2_r_ready = auto_in_r_ready & (idle_4 ? readys_readys[2] : state_4_2);
  assign auto_out_1_aw_valid = in_0_aw_valid & ~(auto_in_aw_bits_addr[30]);
  assign auto_out_1_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_1_aw_bits_addr = auto_in_aw_bits_addr[28:0];
  assign auto_out_1_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_1_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_1_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_1_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_1_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_1_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_1_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_1_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[1];
  assign auto_out_1_w_bits_data = auto_in_w_bits_data;
  assign auto_out_1_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_1_w_bits_last = auto_in_w_bits_last;
  assign auto_out_1_b_ready = auto_in_b_ready & (idle_5 ? readys_readys_1[1] : state_5_1);
  assign auto_out_1_ar_valid = in_0_ar_valid & ~(auto_in_ar_bits_addr[30]);
  assign auto_out_1_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_1_ar_bits_addr = auto_in_ar_bits_addr[28:0];
  assign auto_out_1_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_1_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_1_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_1_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_1_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_1_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_1_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_1_r_ready = auto_in_r_ready & (idle_4 ? readys_readys[1] : state_4_1);
  assign auto_out_0_aw_valid = in_0_aw_valid & requestAWIO_0_0;
  assign auto_out_0_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_0_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_0_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_0_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_0_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_0_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_0_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_0_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_0_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_0_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[0];
  assign auto_out_0_w_bits_data = auto_in_w_bits_data;
  assign auto_out_0_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_0_w_bits_last = auto_in_w_bits_last;
  assign auto_out_0_b_ready = auto_in_b_ready & (idle_5 ? readys_readys_1[0] : state_5_0);
  assign auto_out_0_ar_valid = in_0_ar_valid & requestARIO_0_0;
  assign auto_out_0_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_0_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_0_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_0_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_0_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_0_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_0_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_0_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_0_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_0_r_ready = auto_in_r_ready & (idle_4 ? readys_readys[0] : state_4_0);
endmodule

