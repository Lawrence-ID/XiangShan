// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module DifftestMem1P(
  input         clock,
  input         reset,
  input         read_valid,
  input  [63:0] read_index,
  output [63:0] read_data_0,
  output [63:0] read_data_1,
  output [63:0] read_data_2,
  output [63:0] read_data_3,
  input         write_valid,
  input  [63:0] write_index,
  input  [63:0] write_data_0,
  input  [63:0] write_data_1,
  input  [63:0] write_data_2,
  input  [63:0] write_data_3,
  input  [63:0] write_mask_0,
  input  [63:0] write_mask_1,
  input  [63:0] write_mask_2,
  input  [63:0] write_mask_3
);

  wire        _GEN = ~reset & read_valid;
  wire [63:0] _GEN_0 = {read_index[61:0], 2'h0};
  wire        _GEN_1 = ~reset & write_valid;
  wire [63:0] _GEN_2 = {write_index[61:0], 2'h0};
  MemRWHelper helper_0 (
    .r_enable (_GEN),
    .r_index  (_GEN_0),
    .r_data   (read_data_0),
    .w_enable (_GEN_1),
    .w_index  (_GEN_2),
    .w_data   (write_data_0),
    .w_mask   (write_mask_0),
    .clock    (clock)
  );
  MemRWHelper helper_1 (
    .r_enable (_GEN),
    .r_index  (64'(_GEN_0 + 64'h1)),
    .r_data   (read_data_1),
    .w_enable (_GEN_1),
    .w_index  (64'(_GEN_2 + 64'h1)),
    .w_data   (write_data_1),
    .w_mask   (write_mask_1),
    .clock    (clock)
  );
  MemRWHelper helper_2 (
    .r_enable (_GEN),
    .r_index  (64'(_GEN_0 + 64'h2)),
    .r_data   (read_data_2),
    .w_enable (_GEN_1),
    .w_index  (64'(_GEN_2 + 64'h2)),
    .w_data   (write_data_2),
    .w_mask   (write_mask_2),
    .clock    (clock)
  );
  MemRWHelper helper_3 (
    .r_enable (_GEN),
    .r_index  (64'(_GEN_0 + 64'h3)),
    .r_data   (read_data_3),
    .w_enable (_GEN_1),
    .w_index  (64'(_GEN_2 + 64'h3)),
    .w_data   (write_data_3),
    .w_mask   (write_mask_3),
    .clock    (clock)
  );
endmodule

