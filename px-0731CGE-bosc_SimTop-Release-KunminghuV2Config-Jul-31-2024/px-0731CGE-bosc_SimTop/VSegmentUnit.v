// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module VSegmentUnit(
  input          clock,
  input          reset,
  input          io_in_valid,
  input          io_in_bits_uop_ftqPtr_flag,
  input  [5:0]   io_in_bits_uop_ftqPtr_value,
  input  [3:0]   io_in_bits_uop_ftqOffset,
  input  [34:0]  io_in_bits_uop_fuType,
  input  [8:0]   io_in_bits_uop_fuOpType,
  input          io_in_bits_uop_vecWen,
  input          io_in_bits_uop_v0Wen,
  input  [31:0]  io_in_bits_uop_imm,
  input          io_in_bits_uop_vpu_vill,
  input          io_in_bits_uop_vpu_vma,
  input          io_in_bits_uop_vpu_vta,
  input  [1:0]   io_in_bits_uop_vpu_vsew,
  input  [2:0]   io_in_bits_uop_vpu_vlmul,
  input          io_in_bits_uop_vpu_specVill,
  input          io_in_bits_uop_vpu_specVma,
  input          io_in_bits_uop_vpu_specVta,
  input  [1:0]   io_in_bits_uop_vpu_specVsew,
  input  [2:0]   io_in_bits_uop_vpu_specVlmul,
  input          io_in_bits_uop_vpu_vm,
  input  [7:0]   io_in_bits_uop_vpu_vstart,
  input  [2:0]   io_in_bits_uop_vpu_frm,
  input          io_in_bits_uop_vpu_fpu_isFpToVecInst,
  input          io_in_bits_uop_vpu_fpu_isFP32Instr,
  input          io_in_bits_uop_vpu_fpu_isFP64Instr,
  input          io_in_bits_uop_vpu_fpu_isReduction,
  input          io_in_bits_uop_vpu_fpu_isFoldTo1_2,
  input          io_in_bits_uop_vpu_fpu_isFoldTo1_4,
  input          io_in_bits_uop_vpu_fpu_isFoldTo1_8,
  input  [1:0]   io_in_bits_uop_vpu_vxrm,
  input  [6:0]   io_in_bits_uop_vpu_vuopIdx,
  input          io_in_bits_uop_vpu_lastUop,
  input  [2:0]   io_in_bits_uop_vpu_nf,
  input  [1:0]   io_in_bits_uop_vpu_veew,
  input          io_in_bits_uop_vpu_isReverse,
  input          io_in_bits_uop_vpu_isExt,
  input          io_in_bits_uop_vpu_isNarrow,
  input          io_in_bits_uop_vpu_isDstMask,
  input          io_in_bits_uop_vpu_isOpMask,
  input          io_in_bits_uop_vpu_isMove,
  input          io_in_bits_uop_vpu_isDependOldvd,
  input          io_in_bits_uop_vpu_isWritePartVd,
  input  [7:0]   io_in_bits_uop_pdest,
  input          io_in_bits_uop_robIdx_flag,
  input  [7:0]   io_in_bits_uop_robIdx_value,
  input          io_in_bits_uop_debugInfo_eliminatedMove,
  input  [63:0]  io_in_bits_uop_debugInfo_renameTime,
  input  [63:0]  io_in_bits_uop_debugInfo_dispatchTime,
  input  [63:0]  io_in_bits_uop_debugInfo_enqRsTime,
  input  [63:0]  io_in_bits_uop_debugInfo_selectTime,
  input  [63:0]  io_in_bits_uop_debugInfo_issueTime,
  input  [63:0]  io_in_bits_uop_debugInfo_writebackTime,
  input  [63:0]  io_in_bits_uop_debugInfo_runahead_checkpoint_id,
  input  [63:0]  io_in_bits_uop_debugInfo_tlbFirstReqTime,
  input  [63:0]  io_in_bits_uop_debugInfo_tlbRespTime,
  input          io_in_bits_uop_lqIdx_flag,
  input  [6:0]   io_in_bits_uop_lqIdx_value,
  input          io_in_bits_uop_sqIdx_flag,
  input  [5:0]   io_in_bits_uop_sqIdx_value,
  input  [4:0]   io_in_bits_uop_numLsElem,
  input  [127:0] io_in_bits_src_0,
  input  [127:0] io_in_bits_src_1,
  input  [127:0] io_in_bits_src_2,
  input  [127:0] io_in_bits_src_3,
  input  [127:0] io_in_bits_src_4,
  output         io_uopwriteback_valid,
  output         io_uopwriteback_bits_uop_exceptionVec_0,
  output         io_uopwriteback_bits_uop_exceptionVec_1,
  output         io_uopwriteback_bits_uop_exceptionVec_2,
  output         io_uopwriteback_bits_uop_exceptionVec_3,
  output         io_uopwriteback_bits_uop_exceptionVec_4,
  output         io_uopwriteback_bits_uop_exceptionVec_5,
  output         io_uopwriteback_bits_uop_exceptionVec_6,
  output         io_uopwriteback_bits_uop_exceptionVec_7,
  output         io_uopwriteback_bits_uop_exceptionVec_8,
  output         io_uopwriteback_bits_uop_exceptionVec_9,
  output         io_uopwriteback_bits_uop_exceptionVec_10,
  output         io_uopwriteback_bits_uop_exceptionVec_11,
  output         io_uopwriteback_bits_uop_exceptionVec_12,
  output         io_uopwriteback_bits_uop_exceptionVec_13,
  output         io_uopwriteback_bits_uop_exceptionVec_14,
  output         io_uopwriteback_bits_uop_exceptionVec_15,
  output         io_uopwriteback_bits_uop_exceptionVec_16,
  output         io_uopwriteback_bits_uop_exceptionVec_17,
  output         io_uopwriteback_bits_uop_exceptionVec_18,
  output         io_uopwriteback_bits_uop_exceptionVec_19,
  output         io_uopwriteback_bits_uop_exceptionVec_20,
  output         io_uopwriteback_bits_uop_exceptionVec_21,
  output         io_uopwriteback_bits_uop_exceptionVec_22,
  output         io_uopwriteback_bits_uop_exceptionVec_23,
  output [8:0]   io_uopwriteback_bits_uop_fuOpType,
  output         io_uopwriteback_bits_uop_vecWen,
  output         io_uopwriteback_bits_uop_v0Wen,
  output         io_uopwriteback_bits_uop_flushPipe,
  output         io_uopwriteback_bits_uop_vpu_vma,
  output         io_uopwriteback_bits_uop_vpu_vta,
  output [1:0]   io_uopwriteback_bits_uop_vpu_vsew,
  output         io_uopwriteback_bits_uop_vpu_vm,
  output [7:0]   io_uopwriteback_bits_uop_vpu_vstart,
  output [127:0] io_uopwriteback_bits_uop_vpu_vmask,
  output [7:0]   io_uopwriteback_bits_uop_vpu_vl,
  output [1:0]   io_uopwriteback_bits_uop_vpu_veew,
  output [7:0]   io_uopwriteback_bits_uop_pdest,
  output         io_uopwriteback_bits_uop_robIdx_flag,
  output [7:0]   io_uopwriteback_bits_uop_robIdx_value,
  output         io_uopwriteback_bits_uop_replayInst,
  output [127:0] io_uopwriteback_bits_data,
  output [2:0]   io_uopwriteback_bits_vdIdxInField,
  input          io_rdcache_req_ready,
  output         io_rdcache_req_valid,
  output [40:0]  io_rdcache_req_bits_vaddr,
  input          io_rdcache_resp_valid,
  input  [127:0] io_rdcache_resp_bits_data_delayed,
  input          io_rdcache_resp_bits_miss,
  output [35:0]  io_rdcache_s1_paddr_dup_lsu,
  output [35:0]  io_rdcache_s1_paddr_dup_dcache,
  input          io_rdcache_s2_bank_conflict,
  input          io_sbuffer_ready,
  output         io_sbuffer_valid,
  output [40:0]  io_sbuffer_bits_vaddr,
  output [127:0] io_sbuffer_bits_data,
  output [15:0]  io_sbuffer_bits_mask,
  output [35:0]  io_sbuffer_bits_addr,
  output         io_sbuffer_bits_vecValid,
  output         io_dtlb_req_valid,
  output [40:0]  io_dtlb_req_bits_vaddr,
  output [2:0]   io_dtlb_req_bits_cmd,
  output         io_dtlb_req_bits_debug_robIdx_flag,
  output [7:0]   io_dtlb_req_bits_debug_robIdx_value,
  input          io_dtlb_resp_valid,
  input  [35:0]  io_dtlb_resp_bits_paddr_0,
  input          io_dtlb_resp_bits_miss,
  input          io_dtlb_resp_bits_excp_0_pf_ld,
  input          io_dtlb_resp_bits_excp_0_pf_st,
  input          io_dtlb_resp_bits_excp_0_af_ld,
  input          io_dtlb_resp_bits_excp_0_af_st,
  input          io_pmpResp_ld,
  input          io_pmpResp_st,
  input          io_pmpResp_mmio,
  output         io_flush_sbuffer_valid,
  input          io_flush_sbuffer_empty,
  output         io_feedback_valid,
  output         io_feedback_bits_hit,
  output         io_feedback_bits_sqIdx_flag,
  output [5:0]   io_feedback_bits_sqIdx_value,
  output         io_feedback_bits_lqIdx_flag,
  output [6:0]   io_feedback_bits_lqIdx_value,
  output         io_exceptionInfo_valid,
  output [40:0]  io_exceptionInfo_bits_vaddr
);

  wire [40:0]       writebackOut_uop_pc = 41'h0;
  wire [40:0]       writebackOut_debug_vaddr = 41'h0;
  wire [3:0]        writebackOut_uop_srcType_0 = 4'h0;
  wire [3:0]        writebackOut_uop_srcType_1 = 4'h0;
  wire [3:0]        writebackOut_uop_srcType_2 = 4'h0;
  wire [3:0]        writebackOut_uop_srcType_3 = 4'h0;
  wire [3:0]        writebackOut_uop_srcType_4 = 4'h0;
  wire [3:0]        writebackOut_uop_selImm = 4'h0;
  wire [3:0]        feedbackOut_sourceType = 4'h0;
  wire [31:0]       writebackOut_uop_instr = 32'h0;
  wire [5:0]        writebackOut_uop_ldest = 6'h0;
  wire [5:0]        feedbackOut_dataInvalidSqIdx_value = 6'h0;
  wire [4:0]        writebackOut_uop_ssid = 5'h0;
  wire [7:0]        writebackOut_uop_vpu_vstart = 8'h0;
  wire [7:0]        writebackOut_uop_psrc_0 = 8'h0;
  wire [7:0]        writebackOut_uop_psrc_1 = 8'h0;
  wire [7:0]        writebackOut_uop_psrc_2 = 8'h0;
  wire [7:0]        writebackOut_uop_psrc_3 = 8'h0;
  wire [7:0]        writebackOut_uop_psrc_4 = 8'h0;
  wire [7:0]        writebackOut_uop_waitForRobIdx_value = 8'h0;
  wire              writebackOut_uop_exceptionVec_0 = 1'h0;
  wire              writebackOut_uop_exceptionVec_1 = 1'h0;
  wire              writebackOut_uop_exceptionVec_2 = 1'h0;
  wire              writebackOut_uop_exceptionVec_3 = 1'h0;
  wire              writebackOut_uop_exceptionVec_8 = 1'h0;
  wire              writebackOut_uop_exceptionVec_9 = 1'h0;
  wire              writebackOut_uop_exceptionVec_10 = 1'h0;
  wire              writebackOut_uop_exceptionVec_11 = 1'h0;
  wire              writebackOut_uop_exceptionVec_12 = 1'h0;
  wire              writebackOut_uop_exceptionVec_14 = 1'h0;
  wire              writebackOut_uop_exceptionVec_16 = 1'h0;
  wire              writebackOut_uop_exceptionVec_17 = 1'h0;
  wire              writebackOut_uop_exceptionVec_18 = 1'h0;
  wire              writebackOut_uop_exceptionVec_19 = 1'h0;
  wire              writebackOut_uop_exceptionVec_20 = 1'h0;
  wire              writebackOut_uop_exceptionVec_21 = 1'h0;
  wire              writebackOut_uop_exceptionVec_22 = 1'h0;
  wire              writebackOut_uop_exceptionVec_23 = 1'h0;
  wire              writebackOut_uop_hasException = 1'h0;
  wire              writebackOut_uop_trigger_frontendHit_0 = 1'h0;
  wire              writebackOut_uop_trigger_frontendHit_1 = 1'h0;
  wire              writebackOut_uop_trigger_frontendHit_2 = 1'h0;
  wire              writebackOut_uop_trigger_frontendHit_3 = 1'h0;
  wire              writebackOut_uop_trigger_frontendCanFire_0 = 1'h0;
  wire              writebackOut_uop_trigger_frontendCanFire_1 = 1'h0;
  wire              writebackOut_uop_trigger_frontendCanFire_2 = 1'h0;
  wire              writebackOut_uop_trigger_frontendCanFire_3 = 1'h0;
  wire              writebackOut_uop_trigger_backendHit_0 = 1'h0;
  wire              writebackOut_uop_trigger_backendHit_1 = 1'h0;
  wire              writebackOut_uop_trigger_backendHit_2 = 1'h0;
  wire              writebackOut_uop_trigger_backendHit_3 = 1'h0;
  wire              writebackOut_uop_trigger_backendCanFire_0 = 1'h0;
  wire              writebackOut_uop_trigger_backendCanFire_1 = 1'h0;
  wire              writebackOut_uop_trigger_backendCanFire_2 = 1'h0;
  wire              writebackOut_uop_trigger_backendCanFire_3 = 1'h0;
  wire              writebackOut_uop_preDecodeInfo_valid = 1'h0;
  wire              writebackOut_uop_preDecodeInfo_isRVC = 1'h0;
  wire              writebackOut_uop_preDecodeInfo_isCall = 1'h0;
  wire              writebackOut_uop_preDecodeInfo_isRet = 1'h0;
  wire              writebackOut_uop_pred_taken = 1'h0;
  wire              writebackOut_uop_crossPageIPFFix = 1'h0;
  wire              writebackOut_uop_rfWen = 1'h0;
  wire              writebackOut_uop_fpWen = 1'h0;
  wire              writebackOut_uop_vlWen = 1'h0;
  wire              writebackOut_uop_isXSTrap = 1'h0;
  wire              writebackOut_uop_waitForward = 1'h0;
  wire              writebackOut_uop_blockBackward = 1'h0;
  wire              writebackOut_uop_flushPipe = 1'h0;
  wire              writebackOut_uop_canRobCompress = 1'h0;
  wire              writebackOut_uop_fpu_isAddSub = 1'h0;
  wire              writebackOut_uop_fpu_typeTagIn = 1'h0;
  wire              writebackOut_uop_fpu_typeTagOut = 1'h0;
  wire              writebackOut_uop_fpu_fromInt = 1'h0;
  wire              writebackOut_uop_fpu_wflags = 1'h0;
  wire              writebackOut_uop_fpu_fpWen = 1'h0;
  wire              writebackOut_uop_fpu_div = 1'h0;
  wire              writebackOut_uop_fpu_sqrt = 1'h0;
  wire              writebackOut_uop_fpu_fcvt = 1'h0;
  wire              writebackOut_uop_fpu_ren3 = 1'h0;
  wire              writebackOut_uop_vlsInstr = 1'h0;
  wire              writebackOut_uop_wfflags = 1'h0;
  wire              writebackOut_uop_isMove = 1'h0;
  wire              writebackOut_uop_isVset = 1'h0;
  wire              writebackOut_uop_firstUop = 1'h0;
  wire              writebackOut_uop_lastUop = 1'h0;
  wire              writebackOut_uop_srcState_0 = 1'h0;
  wire              writebackOut_uop_srcState_1 = 1'h0;
  wire              writebackOut_uop_srcState_2 = 1'h0;
  wire              writebackOut_uop_srcState_3 = 1'h0;
  wire              writebackOut_uop_srcState_4 = 1'h0;
  wire              writebackOut_uop_dirtyFs = 1'h0;
  wire              writebackOut_uop_dirtyVs = 1'h0;
  wire              writebackOut_uop_eliminatedMove = 1'h0;
  wire              writebackOut_uop_snapshot = 1'h0;
  wire              writebackOut_uop_storeSetHit = 1'h0;
  wire              writebackOut_uop_waitForRobIdx_flag = 1'h0;
  wire              writebackOut_uop_loadWaitBit = 1'h0;
  wire              writebackOut_uop_loadWaitStrict = 1'h0;
  wire              writebackOut_uop_singleStep = 1'h0;
  wire              writebackOut_uop_replayInst = 1'h0;
  wire              writebackOut_debug_isMMIO = 1'h0;
  wire              writebackOut_debug_isPerfCnt = 1'h0;
  wire              feedbackOut_flushState = 1'h0;
  wire              feedbackOut_dataInvalidSqIdx_flag = 1'h0;
  wire              feedbackOut_hit = 1'h1;
  wire [1:0]        writebackOut_uop_preDecodeInfo_brType = 2'h0;
  wire [1:0]        writebackOut_uop_fpu_fmaCmd = 2'h0;
  wire [1:0]        writebackOut_uop_fpu_typ = 2'h0;
  wire [1:0]        writebackOut_uop_fpu_fmt = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_0_0 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_0_1 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_0_2 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_1_0 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_1_1 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_1_2 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_2_0 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_2_1 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_2_2 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_3_0 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_3_1 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_3_2 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_4_0 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_4_1 = 2'h0;
  wire [1:0]        writebackOut_uop_srcLoadDependency_4_2 = 2'h0;
  wire [2:0]        writebackOut_uop_fpu_rm = 3'h0;
  wire [2:0]        writebackOut_uop_commitType = 3'h0;
  wire [2:0]        writebackOut_uop_instrSize = 3'h0;
  wire [35:0]       writebackOut_debug_paddr = 36'h0;
  wire [9:0]        writebackOut_uop_foldpc = 10'h0;
  wire [6:0]        writebackOut_uop_uopIdx = 7'h0;
  wire [6:0]        writebackOut_uop_numUops = 7'h0;
  wire [6:0]        writebackOut_uop_numWB = 7'h0;
  reg  [40:0]       instMicroOp_baseVaddr;
  reg               instMicroOp_uop_exceptionVec_4;
  wire              writebackOut_uop_exceptionVec_4 = instMicroOp_uop_exceptionVec_4;
  reg               instMicroOp_uop_exceptionVec_5;
  wire              writebackOut_uop_exceptionVec_5 = instMicroOp_uop_exceptionVec_5;
  reg               instMicroOp_uop_exceptionVec_6;
  wire              writebackOut_uop_exceptionVec_6 = instMicroOp_uop_exceptionVec_6;
  reg               instMicroOp_uop_exceptionVec_7;
  wire              writebackOut_uop_exceptionVec_7 = instMicroOp_uop_exceptionVec_7;
  reg               instMicroOp_uop_exceptionVec_13;
  wire              writebackOut_uop_exceptionVec_13 = instMicroOp_uop_exceptionVec_13;
  reg               instMicroOp_uop_exceptionVec_15;
  wire              writebackOut_uop_exceptionVec_15 = instMicroOp_uop_exceptionVec_15;
  reg  [34:0]       instMicroOp_uop_fuType;
  reg  [8:0]        instMicroOp_uop_fuOpType;
  wire [8:0]        writebackOut_uop_fuOpType = instMicroOp_uop_fuOpType;
  reg               instMicroOp_uop_vpu_vill;
  wire              writebackOut_uop_vpu_vill = instMicroOp_uop_vpu_vill;
  reg               instMicroOp_uop_vpu_vma;
  wire              writebackOut_uop_vpu_vma = instMicroOp_uop_vpu_vma;
  reg               instMicroOp_uop_vpu_vta;
  wire              writebackOut_uop_vpu_vta = instMicroOp_uop_vpu_vta;
  reg  [1:0]        instMicroOp_uop_vpu_vsew;
  wire [1:0]        writebackOut_uop_vpu_vsew = instMicroOp_uop_vpu_vsew;
  reg  [2:0]        instMicroOp_uop_vpu_vlmul;
  wire [2:0]        writebackOut_uop_vpu_vlmul = instMicroOp_uop_vpu_vlmul;
  reg               instMicroOp_uop_vpu_specVill;
  wire              writebackOut_uop_vpu_specVill = instMicroOp_uop_vpu_specVill;
  reg               instMicroOp_uop_vpu_specVma;
  wire              writebackOut_uop_vpu_specVma = instMicroOp_uop_vpu_specVma;
  reg               instMicroOp_uop_vpu_specVta;
  wire              writebackOut_uop_vpu_specVta = instMicroOp_uop_vpu_specVta;
  reg  [1:0]        instMicroOp_uop_vpu_specVsew;
  wire [1:0]        writebackOut_uop_vpu_specVsew = instMicroOp_uop_vpu_specVsew;
  reg  [2:0]        instMicroOp_uop_vpu_specVlmul;
  wire [2:0]        writebackOut_uop_vpu_specVlmul = instMicroOp_uop_vpu_specVlmul;
  reg               instMicroOp_uop_vpu_vm;
  wire              writebackOut_uop_vpu_vm = instMicroOp_uop_vpu_vm;
  reg  [7:0]        instMicroOp_uop_vpu_vstart;
  reg  [2:0]        instMicroOp_uop_vpu_frm;
  wire [2:0]        writebackOut_uop_vpu_frm = instMicroOp_uop_vpu_frm;
  reg               instMicroOp_uop_vpu_fpu_isFpToVecInst;
  wire              writebackOut_uop_vpu_fpu_isFpToVecInst =
    instMicroOp_uop_vpu_fpu_isFpToVecInst;
  reg               instMicroOp_uop_vpu_fpu_isFP32Instr;
  wire              writebackOut_uop_vpu_fpu_isFP32Instr =
    instMicroOp_uop_vpu_fpu_isFP32Instr;
  reg               instMicroOp_uop_vpu_fpu_isFP64Instr;
  wire              writebackOut_uop_vpu_fpu_isFP64Instr =
    instMicroOp_uop_vpu_fpu_isFP64Instr;
  reg               instMicroOp_uop_vpu_fpu_isReduction;
  wire              writebackOut_uop_vpu_fpu_isReduction =
    instMicroOp_uop_vpu_fpu_isReduction;
  reg               instMicroOp_uop_vpu_fpu_isFoldTo1_2;
  wire              writebackOut_uop_vpu_fpu_isFoldTo1_2 =
    instMicroOp_uop_vpu_fpu_isFoldTo1_2;
  reg               instMicroOp_uop_vpu_fpu_isFoldTo1_4;
  wire              writebackOut_uop_vpu_fpu_isFoldTo1_4 =
    instMicroOp_uop_vpu_fpu_isFoldTo1_4;
  reg               instMicroOp_uop_vpu_fpu_isFoldTo1_8;
  wire              writebackOut_uop_vpu_fpu_isFoldTo1_8 =
    instMicroOp_uop_vpu_fpu_isFoldTo1_8;
  reg  [1:0]        instMicroOp_uop_vpu_vxrm;
  wire [1:0]        writebackOut_uop_vpu_vxrm = instMicroOp_uop_vpu_vxrm;
  reg               instMicroOp_uop_vpu_lastUop;
  wire              writebackOut_uop_vpu_lastUop = instMicroOp_uop_vpu_lastUop;
  reg  [2:0]        instMicroOp_uop_vpu_nf;
  wire [2:0]        writebackOut_uop_vpu_nf = instMicroOp_uop_vpu_nf;
  reg  [1:0]        instMicroOp_uop_vpu_veew;
  wire [1:0]        writebackOut_uop_vpu_veew = instMicroOp_uop_vpu_veew;
  reg               instMicroOp_uop_vpu_isReverse;
  wire              writebackOut_uop_vpu_isReverse = instMicroOp_uop_vpu_isReverse;
  reg               instMicroOp_uop_vpu_isExt;
  wire              writebackOut_uop_vpu_isExt = instMicroOp_uop_vpu_isExt;
  reg               instMicroOp_uop_vpu_isNarrow;
  wire              writebackOut_uop_vpu_isNarrow = instMicroOp_uop_vpu_isNarrow;
  reg               instMicroOp_uop_vpu_isDstMask;
  wire              writebackOut_uop_vpu_isDstMask = instMicroOp_uop_vpu_isDstMask;
  reg               instMicroOp_uop_vpu_isOpMask;
  wire              writebackOut_uop_vpu_isOpMask = instMicroOp_uop_vpu_isOpMask;
  reg               instMicroOp_uop_vpu_isMove;
  wire              writebackOut_uop_vpu_isMove = instMicroOp_uop_vpu_isMove;
  reg               instMicroOp_uop_vpu_isDependOldvd;
  wire              writebackOut_uop_vpu_isDependOldvd =
    instMicroOp_uop_vpu_isDependOldvd;
  reg               instMicroOp_uop_vpu_isWritePartVd;
  wire              writebackOut_uop_vpu_isWritePartVd =
    instMicroOp_uop_vpu_isWritePartVd;
  reg               instMicroOp_uop_robIdx_flag;
  wire              writebackOut_uop_robIdx_flag = instMicroOp_uop_robIdx_flag;
  wire              feedbackOut_robIdx_flag = instMicroOp_uop_robIdx_flag;
  reg  [7:0]        instMicroOp_uop_robIdx_value;
  wire [7:0]        writebackOut_uop_robIdx_value = instMicroOp_uop_robIdx_value;
  wire [7:0]        feedbackOut_robIdx_value = instMicroOp_uop_robIdx_value;
  reg  [35:0]       instMicroOp_paddr;
  reg  [127:0]      instMicroOp_mask;
  wire [127:0]      writebackOut_mask = instMicroOp_mask;
  reg  [2:0]        instMicroOp_alignedType;
  reg  [7:0]        instMicroOp_vl;
  wire [7:0]        writebackOut_uop_vpu_vl = instMicroOp_vl;
  reg  [7:0]        instMicroOp_uopFlowNumMask;
  reg  [40:0]       instMicroOp_exceptionVaddr;
  reg               instMicroOp_isFof;
  reg               instMicroOpValid;
  reg  [127:0]      data_0;
  reg  [127:0]      data_1;
  reg  [127:0]      data_2;
  reg  [127:0]      data_3;
  reg  [127:0]      data_4;
  reg  [127:0]      data_5;
  reg  [127:0]      data_6;
  reg  [127:0]      data_7;
  reg               uopq_0_uop_ftqPtr_flag;
  reg  [5:0]        uopq_0_uop_ftqPtr_value;
  reg  [3:0]        uopq_0_uop_ftqOffset;
  reg  [34:0]       uopq_0_uop_fuType;
  reg               uopq_0_uop_vecWen;
  reg               uopq_0_uop_v0Wen;
  reg  [31:0]       uopq_0_uop_imm;
  reg  [6:0]        uopq_0_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_0_uop_pdest;
  reg               uopq_0_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_0_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_0_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_0_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_0_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_0_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_0_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_0_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_0_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_0_uop_debugInfo_tlbRespTime;
  reg               uopq_0_uop_lqIdx_flag;
  reg  [6:0]        uopq_0_uop_lqIdx_value;
  reg               uopq_0_uop_sqIdx_flag;
  reg  [5:0]        uopq_0_uop_sqIdx_value;
  reg  [4:0]        uopq_0_uop_numLsElem;
  reg               uopq_1_uop_ftqPtr_flag;
  reg  [5:0]        uopq_1_uop_ftqPtr_value;
  reg  [3:0]        uopq_1_uop_ftqOffset;
  reg  [34:0]       uopq_1_uop_fuType;
  reg               uopq_1_uop_vecWen;
  reg               uopq_1_uop_v0Wen;
  reg  [31:0]       uopq_1_uop_imm;
  reg  [6:0]        uopq_1_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_1_uop_pdest;
  reg               uopq_1_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_1_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_1_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_1_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_1_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_1_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_1_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_1_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_1_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_1_uop_debugInfo_tlbRespTime;
  reg               uopq_1_uop_lqIdx_flag;
  reg  [6:0]        uopq_1_uop_lqIdx_value;
  reg               uopq_1_uop_sqIdx_flag;
  reg  [5:0]        uopq_1_uop_sqIdx_value;
  reg  [4:0]        uopq_1_uop_numLsElem;
  reg               uopq_2_uop_ftqPtr_flag;
  reg  [5:0]        uopq_2_uop_ftqPtr_value;
  reg  [3:0]        uopq_2_uop_ftqOffset;
  reg  [34:0]       uopq_2_uop_fuType;
  reg               uopq_2_uop_vecWen;
  reg               uopq_2_uop_v0Wen;
  reg  [31:0]       uopq_2_uop_imm;
  reg  [6:0]        uopq_2_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_2_uop_pdest;
  reg               uopq_2_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_2_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_2_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_2_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_2_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_2_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_2_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_2_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_2_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_2_uop_debugInfo_tlbRespTime;
  reg               uopq_2_uop_lqIdx_flag;
  reg  [6:0]        uopq_2_uop_lqIdx_value;
  reg               uopq_2_uop_sqIdx_flag;
  reg  [5:0]        uopq_2_uop_sqIdx_value;
  reg  [4:0]        uopq_2_uop_numLsElem;
  reg               uopq_3_uop_ftqPtr_flag;
  reg  [5:0]        uopq_3_uop_ftqPtr_value;
  reg  [3:0]        uopq_3_uop_ftqOffset;
  reg  [34:0]       uopq_3_uop_fuType;
  reg               uopq_3_uop_vecWen;
  reg               uopq_3_uop_v0Wen;
  reg  [31:0]       uopq_3_uop_imm;
  reg  [6:0]        uopq_3_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_3_uop_pdest;
  reg               uopq_3_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_3_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_3_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_3_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_3_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_3_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_3_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_3_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_3_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_3_uop_debugInfo_tlbRespTime;
  reg               uopq_3_uop_lqIdx_flag;
  reg  [6:0]        uopq_3_uop_lqIdx_value;
  reg               uopq_3_uop_sqIdx_flag;
  reg  [5:0]        uopq_3_uop_sqIdx_value;
  reg  [4:0]        uopq_3_uop_numLsElem;
  reg               uopq_4_uop_ftqPtr_flag;
  reg  [5:0]        uopq_4_uop_ftqPtr_value;
  reg  [3:0]        uopq_4_uop_ftqOffset;
  reg  [34:0]       uopq_4_uop_fuType;
  reg               uopq_4_uop_vecWen;
  reg               uopq_4_uop_v0Wen;
  reg  [31:0]       uopq_4_uop_imm;
  reg  [6:0]        uopq_4_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_4_uop_pdest;
  reg               uopq_4_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_4_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_4_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_4_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_4_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_4_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_4_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_4_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_4_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_4_uop_debugInfo_tlbRespTime;
  reg               uopq_4_uop_lqIdx_flag;
  reg  [6:0]        uopq_4_uop_lqIdx_value;
  reg               uopq_4_uop_sqIdx_flag;
  reg  [5:0]        uopq_4_uop_sqIdx_value;
  reg  [4:0]        uopq_4_uop_numLsElem;
  reg               uopq_5_uop_ftqPtr_flag;
  reg  [5:0]        uopq_5_uop_ftqPtr_value;
  reg  [3:0]        uopq_5_uop_ftqOffset;
  reg  [34:0]       uopq_5_uop_fuType;
  reg               uopq_5_uop_vecWen;
  reg               uopq_5_uop_v0Wen;
  reg  [31:0]       uopq_5_uop_imm;
  reg  [6:0]        uopq_5_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_5_uop_pdest;
  reg               uopq_5_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_5_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_5_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_5_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_5_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_5_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_5_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_5_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_5_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_5_uop_debugInfo_tlbRespTime;
  reg               uopq_5_uop_lqIdx_flag;
  reg  [6:0]        uopq_5_uop_lqIdx_value;
  reg               uopq_5_uop_sqIdx_flag;
  reg  [5:0]        uopq_5_uop_sqIdx_value;
  reg  [4:0]        uopq_5_uop_numLsElem;
  reg               uopq_6_uop_ftqPtr_flag;
  reg  [5:0]        uopq_6_uop_ftqPtr_value;
  reg  [3:0]        uopq_6_uop_ftqOffset;
  reg  [34:0]       uopq_6_uop_fuType;
  reg               uopq_6_uop_vecWen;
  reg               uopq_6_uop_v0Wen;
  reg  [31:0]       uopq_6_uop_imm;
  reg  [6:0]        uopq_6_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_6_uop_pdest;
  reg               uopq_6_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_6_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_6_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_6_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_6_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_6_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_6_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_6_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_6_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_6_uop_debugInfo_tlbRespTime;
  reg               uopq_6_uop_lqIdx_flag;
  reg  [6:0]        uopq_6_uop_lqIdx_value;
  reg               uopq_6_uop_sqIdx_flag;
  reg  [5:0]        uopq_6_uop_sqIdx_value;
  reg  [4:0]        uopq_6_uop_numLsElem;
  reg               uopq_7_uop_ftqPtr_flag;
  reg  [5:0]        uopq_7_uop_ftqPtr_value;
  reg  [3:0]        uopq_7_uop_ftqOffset;
  reg  [34:0]       uopq_7_uop_fuType;
  reg               uopq_7_uop_vecWen;
  reg               uopq_7_uop_v0Wen;
  reg  [31:0]       uopq_7_uop_imm;
  reg  [6:0]        uopq_7_uop_vpu_vuopIdx;
  reg  [7:0]        uopq_7_uop_pdest;
  reg               uopq_7_uop_debugInfo_eliminatedMove;
  reg  [63:0]       uopq_7_uop_debugInfo_renameTime;
  reg  [63:0]       uopq_7_uop_debugInfo_dispatchTime;
  reg  [63:0]       uopq_7_uop_debugInfo_enqRsTime;
  reg  [63:0]       uopq_7_uop_debugInfo_selectTime;
  reg  [63:0]       uopq_7_uop_debugInfo_issueTime;
  reg  [63:0]       uopq_7_uop_debugInfo_writebackTime;
  reg  [63:0]       uopq_7_uop_debugInfo_runahead_checkpoint_id;
  reg  [63:0]       uopq_7_uop_debugInfo_tlbFirstReqTime;
  reg  [63:0]       uopq_7_uop_debugInfo_tlbRespTime;
  reg               uopq_7_uop_lqIdx_flag;
  reg  [6:0]        uopq_7_uop_lqIdx_value;
  reg               uopq_7_uop_sqIdx_flag;
  reg  [5:0]        uopq_7_uop_sqIdx_value;
  reg  [4:0]        uopq_7_uop_numLsElem;
  reg  [127:0]      stride_0;
  reg  [127:0]      stride_1;
  reg  [127:0]      stride_2;
  reg  [127:0]      stride_3;
  reg  [127:0]      stride_4;
  reg  [127:0]      stride_5;
  reg  [127:0]      stride_6;
  reg  [127:0]      stride_7;
  reg               enqPtr_flag;
  reg  [2:0]        enqPtr_value;
  reg               deqPtr_flag;
  reg  [2:0]        deqPtr_value;
  reg  [7:0]        segmentIdx;
  reg  [3:0]        fieldIdx;
  reg  [40:0]       segmentOffset;
  reg               splitPtr_flag;
  reg  [2:0]        splitPtr_value;
  reg  [40:0]       latchVaddr;
  wire [2:0]        _GEN = {1'h0, instMicroOp_uop_vpu_veew};
  wire [2:0]        _GEN_0 = {1'h0, instMicroOp_uop_vpu_vsew};
  wire [2:0]        issueEmul = 3'(3'(_GEN - _GEN_0) + instMicroOp_uop_vpu_vlmul);
  wire [2:0]        _issueUopFlowNumLog2_sewRealFlowLog2_T_3 =
    3'(3'(($signed(instMicroOp_uop_vpu_vlmul) > -3'sh1 ? 3'h0 : instMicroOp_uop_vpu_vlmul)
          - 3'h4) - _GEN_0);
  wire [2:0]        issueUopFlowNumLog2 =
    (instMicroOp_uop_fuOpType[6:5] == 2'h0 | instMicroOp_uop_fuOpType[6:5] == 2'h2
       ? 3'(3'(($signed(issueEmul) > -3'sh1 ? 3'h0 : issueEmul) - 3'h4) - _GEN)
       : 3'h0)
    | (instMicroOp_uop_fuOpType[6:5] == 2'h1
         ? _issueUopFlowNumLog2_sewRealFlowLog2_T_3
         : 3'h0)
    | ((&(instMicroOp_uop_fuOpType[6:5]))
         ? _issueUopFlowNumLog2_sewRealFlowLog2_T_3
         : 3'h0);
  wire [7:0]        issueIndexIdx =
    segmentIdx
    & 8'((8'h1 << 3'(3'(($signed(issueEmul) > 3'sh0 ? 3'h0 : issueEmul) - 3'h4) - _GEN))
         - 8'h1);
  wire [255:0]      _segmentActive_T = 256'h1 << segmentIdx;
  wire              segmentActive = |(_segmentActive_T[127:0] & instMicroOp_mask);
  reg  [3:0]        state;
  wire              _GEN_1 = state == 4'h5;
  wire [3:0]        _GEN_2 = {1'h0, instMicroOp_uop_vpu_nf};
  wire [2:0]        _emul_T_3 =
    3'(3'({1'h0, io_in_bits_uop_vpu_veew} - {1'h0, io_in_bits_uop_vpu_vsew})
       + io_in_bits_uop_vpu_vlmul);
  wire              _GEN_3 = io_in_valid & ~instMicroOpValid;
  wire [7:0][127:0] _GEN_4 =
    {{stride_7},
     {stride_6},
     {stride_5},
     {stride_4},
     {stride_3},
     {stride_2},
     {stride_1},
     {stride_0}};
  wire [2:0]        stridePtr_value;
  wire              _indexStride_T_111 = issueIndexIdx == 8'h0;
  wire              _indexStride_T_112 = issueIndexIdx == 8'h1;
  wire              _indexStride_T_100 = issueIndexIdx == 8'h2;
  wire              _indexStride_T_101 = issueIndexIdx == 8'h3;
  wire              _indexStride_T_75 = issueIndexIdx == 8'h4;
  wire              _indexStride_T_76 = issueIndexIdx == 8'h5;
  wire              _indexStride_T_77 = issueIndexIdx == 8'h6;
  wire              _indexStride_T_78 = issueIndexIdx == 8'h7;
  wire [40:0]       _vaddr_T_3 =
    41'(instMicroOp_baseVaddr
        + 41'({30'h0, {7'h0, fieldIdx} << instMicroOp_alignedType}
              + (instMicroOp_uop_fuOpType[5]
                   ? {9'h0,
                      {16'h0,
                       {8'h0,
                        instMicroOp_uop_vpu_veew == 2'h0
                          ? (_indexStride_T_111 ? _GEN_4[stridePtr_value][7:0] : 8'h0)
                            | (_indexStride_T_112 ? _GEN_4[stridePtr_value][15:8] : 8'h0)
                            | (_indexStride_T_100 ? _GEN_4[stridePtr_value][23:16] : 8'h0)
                            | (_indexStride_T_101 ? _GEN_4[stridePtr_value][31:24] : 8'h0)
                            | (_indexStride_T_75 ? _GEN_4[stridePtr_value][39:32] : 8'h0)
                            | (_indexStride_T_76 ? _GEN_4[stridePtr_value][47:40] : 8'h0)
                            | (_indexStride_T_77 ? _GEN_4[stridePtr_value][55:48] : 8'h0)
                            | (_indexStride_T_78 ? _GEN_4[stridePtr_value][63:56] : 8'h0)
                            | (issueIndexIdx == 8'h8
                                 ? _GEN_4[stridePtr_value][71:64]
                                 : 8'h0)
                            | (issueIndexIdx == 8'h9
                                 ? _GEN_4[stridePtr_value][79:72]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hA
                                 ? _GEN_4[stridePtr_value][87:80]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hB
                                 ? _GEN_4[stridePtr_value][95:88]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hC
                                 ? _GEN_4[stridePtr_value][103:96]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hD
                                 ? _GEN_4[stridePtr_value][111:104]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hE
                                 ? _GEN_4[stridePtr_value][119:112]
                                 : 8'h0)
                            | (issueIndexIdx == 8'hF
                                 ? _GEN_4[stridePtr_value][127:120]
                                 : 8'h0)
                          : 8'h0}
                         | (instMicroOp_uop_vpu_veew == 2'h1
                              ? (_indexStride_T_111
                                   ? _GEN_4[stridePtr_value][15:0]
                                   : 16'h0)
                                | (_indexStride_T_112
                                     ? _GEN_4[stridePtr_value][31:16]
                                     : 16'h0)
                                | (_indexStride_T_100
                                     ? _GEN_4[stridePtr_value][47:32]
                                     : 16'h0)
                                | (_indexStride_T_101
                                     ? _GEN_4[stridePtr_value][63:48]
                                     : 16'h0)
                                | (_indexStride_T_75
                                     ? _GEN_4[stridePtr_value][79:64]
                                     : 16'h0)
                                | (_indexStride_T_76
                                     ? _GEN_4[stridePtr_value][95:80]
                                     : 16'h0)
                                | (_indexStride_T_77
                                     ? _GEN_4[stridePtr_value][111:96]
                                     : 16'h0)
                                | (_indexStride_T_78
                                     ? _GEN_4[stridePtr_value][127:112]
                                     : 16'h0)
                              : 16'h0)}
                        | (instMicroOp_uop_vpu_veew == 2'h2
                             ? (_indexStride_T_111
                                  ? _GEN_4[stridePtr_value][31:0]
                                  : 32'h0)
                               | (_indexStride_T_112
                                    ? _GEN_4[stridePtr_value][63:32]
                                    : 32'h0)
                               | (_indexStride_T_100
                                    ? _GEN_4[stridePtr_value][95:64]
                                    : 32'h0)
                               | (_indexStride_T_101
                                    ? _GEN_4[stridePtr_value][127:96]
                                    : 32'h0)
                             : 32'h0)}
                     | ((&instMicroOp_uop_vpu_veew)
                          ? (_indexStride_T_111 ? _GEN_4[stridePtr_value][40:0] : 41'h0)
                            | (_indexStride_T_112
                                 ? _GEN_4[stridePtr_value][104:64]
                                 : 41'h0)
                          : 41'h0)
                   : segmentOffset)));
  wire              _io_dtlb_req_valid_T = state == 4'h3;
  wire              canTriggerException = segmentIdx == 8'h0 | ~instMicroOp_isFof;
  wire [1:0]        _addr_aligned_T_4 =
    instMicroOp_uop_fuOpType[5] ? instMicroOp_uop_vpu_vsew : instMicroOp_uop_vpu_veew;
  wire              addr_aligned =
    _addr_aligned_T_4 == 2'h0 | _addr_aligned_T_4 == 2'h1 & ~(_vaddr_T_3[0])
    | _addr_aligned_T_4 == 2'h2 & _vaddr_T_3[1:0] == 2'h0 | (&_addr_aligned_T_4)
    & _vaddr_T_3[2:0] == 3'h0;
  wire              exception_va =
    _GEN_1
    & (instMicroOp_uop_exceptionVec_15 | instMicroOp_uop_exceptionVec_13
       | instMicroOp_uop_exceptionVec_7 | instMicroOp_uop_exceptionVec_5 | ~addr_aligned
       & canTriggerException);
  wire              exception_pa =
    _GEN_1 & (io_pmpResp_st | io_pmpResp_ld | io_pmpResp_mmio) & canTriggerException;
  wire [3:0]        _splitData_T = segmentIdx[3:0] & instMicroOp_uopFlowNumMask[3:0];
  wire [7:0][127:0] _GEN_5 =
    {{data_7}, {data_6}, {data_5}, {data_4}, {data_3}, {data_2}, {data_1}, {data_0}};
  wire [127:0]      _GEN_6 = _GEN_5[splitPtr_value];
  wire [2:0]        _splitData_T_65 = segmentIdx[2:0] & instMicroOp_uopFlowNumMask[2:0];
  wire [1:0]        _splitData_T_98 = segmentIdx[1:0] & instMicroOp_uopFlowNumMask[1:0];
  wire              _splitData_T_119 = segmentIdx[0] & instMicroOp_uopFlowNumMask[0];
  wire              _segmentInactiveFinish_T = state == 4'h8;
  wire              _GEN_7 = _segmentInactiveFinish_T & segmentActive;
  wire              _flowData_T_15 = instMicroOp_alignedType == 3'h0;
  wire              _flowData_T_16 = instMicroOp_alignedType == 3'h1;
  wire              _flowData_T_17 = instMicroOp_alignedType == 3'h2;
  wire              _flowData_T_18 = instMicroOp_alignedType == 3'h3;
  wire              _flowData_T_19 = instMicroOp_alignedType == 3'h4;
  wire [127:0]      splitData =
    (_flowData_T_15
       ? {120'h0,
          (_splitData_T == 4'h0 ? _GEN_6[7:0] : 8'h0)
            | (_splitData_T == 4'h1 ? _GEN_6[15:8] : 8'h0)
            | (_splitData_T == 4'h2 ? _GEN_6[23:16] : 8'h0)
            | (_splitData_T == 4'h3 ? _GEN_6[31:24] : 8'h0)
            | (_splitData_T == 4'h4 ? _GEN_6[39:32] : 8'h0)
            | (_splitData_T == 4'h5 ? _GEN_6[47:40] : 8'h0)
            | (_splitData_T == 4'h6 ? _GEN_6[55:48] : 8'h0)
            | (_splitData_T == 4'h7 ? _GEN_6[63:56] : 8'h0)
            | (_splitData_T == 4'h8 ? _GEN_6[71:64] : 8'h0)
            | (_splitData_T == 4'h9 ? _GEN_6[79:72] : 8'h0)
            | (_splitData_T == 4'hA ? _GEN_6[87:80] : 8'h0)
            | (_splitData_T == 4'hB ? _GEN_6[95:88] : 8'h0)
            | (_splitData_T == 4'hC ? _GEN_6[103:96] : 8'h0)
            | (_splitData_T == 4'hD ? _GEN_6[111:104] : 8'h0)
            | (_splitData_T == 4'hE ? _GEN_6[119:112] : 8'h0)
            | ((&_splitData_T) ? _GEN_6[127:120] : 8'h0)}
       : 128'h0)
    | (_flowData_T_16
         ? {112'h0,
            (_splitData_T_65 == 3'h0 ? _GEN_6[15:0] : 16'h0)
              | (_splitData_T_65 == 3'h1 ? _GEN_6[31:16] : 16'h0)
              | (_splitData_T_65 == 3'h2 ? _GEN_6[47:32] : 16'h0)
              | (_splitData_T_65 == 3'h3 ? _GEN_6[63:48] : 16'h0)
              | (_splitData_T_65 == 3'h4 ? _GEN_6[79:64] : 16'h0)
              | (_splitData_T_65 == 3'h5 ? _GEN_6[95:80] : 16'h0)
              | (_splitData_T_65 == 3'h6 ? _GEN_6[111:96] : 16'h0)
              | ((&_splitData_T_65) ? _GEN_6[127:112] : 16'h0)}
         : 128'h0)
    | (_flowData_T_17
         ? {96'h0,
            (_splitData_T_98 == 2'h0 ? _GEN_6[31:0] : 32'h0)
              | (_splitData_T_98 == 2'h1 ? _GEN_6[63:32] : 32'h0)
              | (_splitData_T_98 == 2'h2 ? _GEN_6[95:64] : 32'h0)
              | ((&_splitData_T_98) ? _GEN_6[127:96] : 32'h0)}
         : 128'h0)
    | (_flowData_T_18
         ? {64'h0,
            (_splitData_T_119 ? 64'h0 : _GEN_6[63:0])
              | (_splitData_T_119 ? _GEN_6[127:64] : 64'h0)}
         : 128'h0) | (_flowData_T_19 ? _GEN_6 : 128'h0);
  wire [22:0]       _wmask_T_13 =
    {15'h0,
     {4'h0,
      {2'h0,
       {1'h0, ~(|(instMicroOp_alignedType[1:0]))}
         | {2{instMicroOp_alignedType[1:0] == 2'h1}}}
        | {4{instMicroOp_alignedType[1:0] == 2'h2}}}
       | {8{&(instMicroOp_alignedType[1:0])}}} << latchVaddr[3:0];
  wire              io_rdcache_req_valid_0 =
    state == 4'h6 & (instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33]);
  wire              _segmentInactiveFinish_T_1 = state == 4'h9;
  wire              io_sbuffer_valid_0 = _segmentInactiveFinish_T_1 & segmentActive;
  wire [7:0]        _GEN_8 =
    {{uopq_7_uop_ftqPtr_flag},
     {uopq_6_uop_ftqPtr_flag},
     {uopq_5_uop_ftqPtr_flag},
     {uopq_4_uop_ftqPtr_flag},
     {uopq_3_uop_ftqPtr_flag},
     {uopq_2_uop_ftqPtr_flag},
     {uopq_1_uop_ftqPtr_flag},
     {uopq_0_uop_ftqPtr_flag}};
  wire              writebackOut_uop_ftqPtr_flag = _GEN_8[deqPtr_value];
  wire [7:0][5:0]   _GEN_9 =
    {{uopq_7_uop_ftqPtr_value},
     {uopq_6_uop_ftqPtr_value},
     {uopq_5_uop_ftqPtr_value},
     {uopq_4_uop_ftqPtr_value},
     {uopq_3_uop_ftqPtr_value},
     {uopq_2_uop_ftqPtr_value},
     {uopq_1_uop_ftqPtr_value},
     {uopq_0_uop_ftqPtr_value}};
  wire [5:0]        writebackOut_uop_ftqPtr_value = _GEN_9[deqPtr_value];
  wire [7:0][3:0]   _GEN_10 =
    {{uopq_7_uop_ftqOffset},
     {uopq_6_uop_ftqOffset},
     {uopq_5_uop_ftqOffset},
     {uopq_4_uop_ftqOffset},
     {uopq_3_uop_ftqOffset},
     {uopq_2_uop_ftqOffset},
     {uopq_1_uop_ftqOffset},
     {uopq_0_uop_ftqOffset}};
  wire [3:0]        writebackOut_uop_ftqOffset = _GEN_10[deqPtr_value];
  wire [7:0][34:0]  _GEN_11 =
    {{uopq_7_uop_fuType},
     {uopq_6_uop_fuType},
     {uopq_5_uop_fuType},
     {uopq_4_uop_fuType},
     {uopq_3_uop_fuType},
     {uopq_2_uop_fuType},
     {uopq_1_uop_fuType},
     {uopq_0_uop_fuType}};
  wire [34:0]       writebackOut_uop_fuType = _GEN_11[deqPtr_value];
  wire [7:0]        _GEN_12 =
    {{uopq_7_uop_vecWen},
     {uopq_6_uop_vecWen},
     {uopq_5_uop_vecWen},
     {uopq_4_uop_vecWen},
     {uopq_3_uop_vecWen},
     {uopq_2_uop_vecWen},
     {uopq_1_uop_vecWen},
     {uopq_0_uop_vecWen}};
  wire              writebackOut_uop_vecWen = _GEN_12[deqPtr_value];
  wire [7:0]        _GEN_13 =
    {{uopq_7_uop_v0Wen},
     {uopq_6_uop_v0Wen},
     {uopq_5_uop_v0Wen},
     {uopq_4_uop_v0Wen},
     {uopq_3_uop_v0Wen},
     {uopq_2_uop_v0Wen},
     {uopq_1_uop_v0Wen},
     {uopq_0_uop_v0Wen}};
  wire              writebackOut_uop_v0Wen = _GEN_13[deqPtr_value];
  wire [7:0][31:0]  _GEN_14 =
    {{uopq_7_uop_imm},
     {uopq_6_uop_imm},
     {uopq_5_uop_imm},
     {uopq_4_uop_imm},
     {uopq_3_uop_imm},
     {uopq_2_uop_imm},
     {uopq_1_uop_imm},
     {uopq_0_uop_imm}};
  wire [31:0]       writebackOut_uop_imm = _GEN_14[deqPtr_value];
  wire [7:0][6:0]   _GEN_15 =
    {{uopq_7_uop_vpu_vuopIdx},
     {uopq_6_uop_vpu_vuopIdx},
     {uopq_5_uop_vpu_vuopIdx},
     {uopq_4_uop_vpu_vuopIdx},
     {uopq_3_uop_vpu_vuopIdx},
     {uopq_2_uop_vpu_vuopIdx},
     {uopq_1_uop_vpu_vuopIdx},
     {uopq_0_uop_vpu_vuopIdx}};
  wire [6:0]        writebackOut_uop_vpu_vuopIdx = _GEN_15[deqPtr_value];
  wire [7:0][7:0]   _GEN_16 =
    {{uopq_7_uop_pdest},
     {uopq_6_uop_pdest},
     {uopq_5_uop_pdest},
     {uopq_4_uop_pdest},
     {uopq_3_uop_pdest},
     {uopq_2_uop_pdest},
     {uopq_1_uop_pdest},
     {uopq_0_uop_pdest}};
  wire [7:0]        writebackOut_uop_pdest = _GEN_16[deqPtr_value];
  wire [7:0]        _GEN_17 =
    {{uopq_7_uop_debugInfo_eliminatedMove},
     {uopq_6_uop_debugInfo_eliminatedMove},
     {uopq_5_uop_debugInfo_eliminatedMove},
     {uopq_4_uop_debugInfo_eliminatedMove},
     {uopq_3_uop_debugInfo_eliminatedMove},
     {uopq_2_uop_debugInfo_eliminatedMove},
     {uopq_1_uop_debugInfo_eliminatedMove},
     {uopq_0_uop_debugInfo_eliminatedMove}};
  wire              writebackOut_uop_debugInfo_eliminatedMove = _GEN_17[deqPtr_value];
  wire [7:0][63:0]  _GEN_18 =
    {{uopq_7_uop_debugInfo_renameTime},
     {uopq_6_uop_debugInfo_renameTime},
     {uopq_5_uop_debugInfo_renameTime},
     {uopq_4_uop_debugInfo_renameTime},
     {uopq_3_uop_debugInfo_renameTime},
     {uopq_2_uop_debugInfo_renameTime},
     {uopq_1_uop_debugInfo_renameTime},
     {uopq_0_uop_debugInfo_renameTime}};
  wire [63:0]       writebackOut_uop_debugInfo_renameTime = _GEN_18[deqPtr_value];
  wire [7:0][63:0]  _GEN_19 =
    {{uopq_7_uop_debugInfo_dispatchTime},
     {uopq_6_uop_debugInfo_dispatchTime},
     {uopq_5_uop_debugInfo_dispatchTime},
     {uopq_4_uop_debugInfo_dispatchTime},
     {uopq_3_uop_debugInfo_dispatchTime},
     {uopq_2_uop_debugInfo_dispatchTime},
     {uopq_1_uop_debugInfo_dispatchTime},
     {uopq_0_uop_debugInfo_dispatchTime}};
  wire [63:0]       writebackOut_uop_debugInfo_dispatchTime = _GEN_19[deqPtr_value];
  wire [7:0][63:0]  _GEN_20 =
    {{uopq_7_uop_debugInfo_enqRsTime},
     {uopq_6_uop_debugInfo_enqRsTime},
     {uopq_5_uop_debugInfo_enqRsTime},
     {uopq_4_uop_debugInfo_enqRsTime},
     {uopq_3_uop_debugInfo_enqRsTime},
     {uopq_2_uop_debugInfo_enqRsTime},
     {uopq_1_uop_debugInfo_enqRsTime},
     {uopq_0_uop_debugInfo_enqRsTime}};
  wire [63:0]       writebackOut_uop_debugInfo_enqRsTime = _GEN_20[deqPtr_value];
  wire [7:0][63:0]  _GEN_21 =
    {{uopq_7_uop_debugInfo_selectTime},
     {uopq_6_uop_debugInfo_selectTime},
     {uopq_5_uop_debugInfo_selectTime},
     {uopq_4_uop_debugInfo_selectTime},
     {uopq_3_uop_debugInfo_selectTime},
     {uopq_2_uop_debugInfo_selectTime},
     {uopq_1_uop_debugInfo_selectTime},
     {uopq_0_uop_debugInfo_selectTime}};
  wire [63:0]       writebackOut_uop_debugInfo_selectTime = _GEN_21[deqPtr_value];
  wire [7:0][63:0]  _GEN_22 =
    {{uopq_7_uop_debugInfo_issueTime},
     {uopq_6_uop_debugInfo_issueTime},
     {uopq_5_uop_debugInfo_issueTime},
     {uopq_4_uop_debugInfo_issueTime},
     {uopq_3_uop_debugInfo_issueTime},
     {uopq_2_uop_debugInfo_issueTime},
     {uopq_1_uop_debugInfo_issueTime},
     {uopq_0_uop_debugInfo_issueTime}};
  wire [63:0]       writebackOut_uop_debugInfo_issueTime = _GEN_22[deqPtr_value];
  wire [7:0][63:0]  _GEN_23 =
    {{uopq_7_uop_debugInfo_writebackTime},
     {uopq_6_uop_debugInfo_writebackTime},
     {uopq_5_uop_debugInfo_writebackTime},
     {uopq_4_uop_debugInfo_writebackTime},
     {uopq_3_uop_debugInfo_writebackTime},
     {uopq_2_uop_debugInfo_writebackTime},
     {uopq_1_uop_debugInfo_writebackTime},
     {uopq_0_uop_debugInfo_writebackTime}};
  wire [63:0]       writebackOut_uop_debugInfo_writebackTime = _GEN_23[deqPtr_value];
  wire [7:0][63:0]  _GEN_24 =
    {{uopq_7_uop_debugInfo_runahead_checkpoint_id},
     {uopq_6_uop_debugInfo_runahead_checkpoint_id},
     {uopq_5_uop_debugInfo_runahead_checkpoint_id},
     {uopq_4_uop_debugInfo_runahead_checkpoint_id},
     {uopq_3_uop_debugInfo_runahead_checkpoint_id},
     {uopq_2_uop_debugInfo_runahead_checkpoint_id},
     {uopq_1_uop_debugInfo_runahead_checkpoint_id},
     {uopq_0_uop_debugInfo_runahead_checkpoint_id}};
  wire [63:0]       writebackOut_uop_debugInfo_runahead_checkpoint_id =
    _GEN_24[deqPtr_value];
  wire [7:0][63:0]  _GEN_25 =
    {{uopq_7_uop_debugInfo_tlbFirstReqTime},
     {uopq_6_uop_debugInfo_tlbFirstReqTime},
     {uopq_5_uop_debugInfo_tlbFirstReqTime},
     {uopq_4_uop_debugInfo_tlbFirstReqTime},
     {uopq_3_uop_debugInfo_tlbFirstReqTime},
     {uopq_2_uop_debugInfo_tlbFirstReqTime},
     {uopq_1_uop_debugInfo_tlbFirstReqTime},
     {uopq_0_uop_debugInfo_tlbFirstReqTime}};
  wire [63:0]       writebackOut_uop_debugInfo_tlbFirstReqTime = _GEN_25[deqPtr_value];
  wire [7:0][63:0]  _GEN_26 =
    {{uopq_7_uop_debugInfo_tlbRespTime},
     {uopq_6_uop_debugInfo_tlbRespTime},
     {uopq_5_uop_debugInfo_tlbRespTime},
     {uopq_4_uop_debugInfo_tlbRespTime},
     {uopq_3_uop_debugInfo_tlbRespTime},
     {uopq_2_uop_debugInfo_tlbRespTime},
     {uopq_1_uop_debugInfo_tlbRespTime},
     {uopq_0_uop_debugInfo_tlbRespTime}};
  wire [63:0]       writebackOut_uop_debugInfo_tlbRespTime = _GEN_26[deqPtr_value];
  wire [7:0]        _GEN_27 =
    {{uopq_7_uop_lqIdx_flag},
     {uopq_6_uop_lqIdx_flag},
     {uopq_5_uop_lqIdx_flag},
     {uopq_4_uop_lqIdx_flag},
     {uopq_3_uop_lqIdx_flag},
     {uopq_2_uop_lqIdx_flag},
     {uopq_1_uop_lqIdx_flag},
     {uopq_0_uop_lqIdx_flag}};
  wire              _GEN_28 = _GEN_27[deqPtr_value];
  wire              writebackOut_uop_lqIdx_flag;
  assign writebackOut_uop_lqIdx_flag = _GEN_28;
  wire              feedbackOut_lqIdx_flag;
  assign feedbackOut_lqIdx_flag = _GEN_28;
  wire [7:0][6:0]   _GEN_29 =
    {{uopq_7_uop_lqIdx_value},
     {uopq_6_uop_lqIdx_value},
     {uopq_5_uop_lqIdx_value},
     {uopq_4_uop_lqIdx_value},
     {uopq_3_uop_lqIdx_value},
     {uopq_2_uop_lqIdx_value},
     {uopq_1_uop_lqIdx_value},
     {uopq_0_uop_lqIdx_value}};
  wire [6:0]        _GEN_30 = _GEN_29[deqPtr_value];
  wire [6:0]        writebackOut_uop_lqIdx_value;
  assign writebackOut_uop_lqIdx_value = _GEN_30;
  wire [6:0]        feedbackOut_lqIdx_value;
  assign feedbackOut_lqIdx_value = _GEN_30;
  wire [7:0]        _GEN_31 =
    {{uopq_7_uop_sqIdx_flag},
     {uopq_6_uop_sqIdx_flag},
     {uopq_5_uop_sqIdx_flag},
     {uopq_4_uop_sqIdx_flag},
     {uopq_3_uop_sqIdx_flag},
     {uopq_2_uop_sqIdx_flag},
     {uopq_1_uop_sqIdx_flag},
     {uopq_0_uop_sqIdx_flag}};
  wire              _GEN_32 = _GEN_31[deqPtr_value];
  wire              writebackOut_uop_sqIdx_flag;
  assign writebackOut_uop_sqIdx_flag = _GEN_32;
  wire              feedbackOut_sqIdx_flag;
  assign feedbackOut_sqIdx_flag = _GEN_32;
  wire [7:0][5:0]   _GEN_33 =
    {{uopq_7_uop_sqIdx_value},
     {uopq_6_uop_sqIdx_value},
     {uopq_5_uop_sqIdx_value},
     {uopq_4_uop_sqIdx_value},
     {uopq_3_uop_sqIdx_value},
     {uopq_2_uop_sqIdx_value},
     {uopq_1_uop_sqIdx_value},
     {uopq_0_uop_sqIdx_value}};
  wire [5:0]        _GEN_34 = _GEN_33[deqPtr_value];
  wire [5:0]        writebackOut_uop_sqIdx_value;
  assign writebackOut_uop_sqIdx_value = _GEN_34;
  wire [5:0]        feedbackOut_sqIdx_value;
  assign feedbackOut_sqIdx_value = _GEN_34;
  wire [7:0][4:0]   _GEN_35 =
    {{uopq_7_uop_numLsElem},
     {uopq_6_uop_numLsElem},
     {uopq_5_uop_numLsElem},
     {uopq_4_uop_numLsElem},
     {uopq_3_uop_numLsElem},
     {uopq_2_uop_numLsElem},
     {uopq_1_uop_numLsElem},
     {uopq_0_uop_numLsElem}};
  wire [4:0]        writebackOut_uop_numLsElem = _GEN_35[deqPtr_value];
  wire [7:0]        _splitPtrOffset_T_4 = 8'h1 << io_in_bits_uop_vpu_vlmul;
  wire [7:0]        _splitPtrOffset_T_8 = 8'h1 << _emul_T_3;
  wire              _fieldIdx_T = fieldIdx == _GEN_2;
  wire              _splitPtrNext_T_2 = _fieldIdx_T | ~segmentActive;
  wire [8:0]        _segmentIdx_T_2 = 9'({1'h0, segmentIdx} + 9'h1);
  wire [8:0]        _splitPtrNext_T_4 = _segmentIdx_T_2 >> issueUopFlowNumLog2;
  wire [3:0]        _io_exceptionInfo_valid_T_5 = {deqPtr_flag, deqPtr_value};
  wire [3:0]        _GEN_36 = {deqPtr_flag, deqPtr_value};
  wire [3:0]        _splitPtrNext_new_ptr_T_1 = 4'(_GEN_36 + _splitPtrNext_T_4[3:0]);
  wire [3:0]        _splitPtrNext_new_ptr_T_6 =
    4'({splitPtr_flag, splitPtr_value}
       + (io_in_bits_uop_fuOpType[5]
            ? ($signed(io_in_bits_uop_vpu_vlmul) < 3'sh0
                 ? 4'h1
                 : _splitPtrOffset_T_4[3:0])
            : $signed(_emul_T_3) < 3'sh0 ? 4'h1 : _splitPtrOffset_T_8[3:0]));
  wire              splitPtrNext_flag =
    _splitPtrNext_T_2 ? _splitPtrNext_new_ptr_T_1[3] : _splitPtrNext_new_ptr_T_6[3];
  wire [2:0]        splitPtrNext_value =
    _splitPtrNext_T_2 ? _splitPtrNext_new_ptr_T_1[2:0] : _splitPtrNext_new_ptr_T_6[2:0];
  wire [7:0]        _strideOffset_T_2 =
    segmentIdx >> 3'(3'(($signed(issueEmul) > 3'sh0 ? 3'h0 : issueEmul) - 3'h4) - _GEN);
  wire [3:0]        _stridePtr_new_ptr_T_1 =
    4'(_GEN_36 + (instMicroOp_uop_fuOpType[5] ? _strideOffset_T_2[3:0] : 4'h0));
  assign stridePtr_value = _stridePtr_new_ptr_T_1[2:0];
  wire              stridePtr_flag = _stridePtr_new_ptr_T_1[3];
  wire              _io_exceptionInfo_valid_T = state == 4'hA;
  wire [3:0]        _io_exceptionInfo_valid_T_4 = {enqPtr_flag, enqPtr_value};
  wire [2:0]        _vdIdxInField_T_2 =
    io_in_bits_uop_fuOpType[5] ? instMicroOp_uop_vpu_vlmul : issueEmul;
  wire [2:0]        vdIdxInField =
    {1'h0,
     {1'h0, _vdIdxInField_T_2 == 3'h1 & writebackOut_uop_vpu_vuopIdx[0]}
       | (_vdIdxInField_T_2 == 3'h2 ? writebackOut_uop_vpu_vuopIdx[1:0] : 2'h0)}
    | (_vdIdxInField_T_2 == 3'h3 ? writebackOut_uop_vpu_vuopIdx[2:0] : 3'h0);
  wire [2:0]        writebackOut_vdIdx;
  assign writebackOut_vdIdx = vdIdxInField;
  wire [2:0]        writebackOut_vdIdxInField;
  assign writebackOut_vdIdxInField = vdIdxInField;
  wire [1:0]        realEw =
    instMicroOp_uop_fuOpType[5] ? instMicroOp_uop_vpu_vsew : instMicroOp_uop_vpu_veew;
  wire              _maskDataVec_maskDataVec_7_T = realEw == 2'h0;
  wire              _maskDataVec_maskDataVec_7_T_2 = realEw == 2'h1;
  wire              _maskDataVec_maskDataVec_7_T_4 = realEw == 2'h2;
  wire [15:0]       _maskDataVec_maskDataVec_0_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[15:0] : 16'h0;
  wire [7:0]        _GEN_37 =
    _maskDataVec_maskDataVec_0_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[7:0] : 8'h0);
  wire [3:0]        _GEN_38 =
    _GEN_37[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[3:0] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_1_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[31:16] : 16'h0;
  wire [7:0]        _GEN_39 =
    _maskDataVec_maskDataVec_1_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[15:8] : 8'h0);
  wire [3:0]        _GEN_40 =
    _GEN_39[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[7:4] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_2_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[47:32] : 16'h0;
  wire [7:0]        _GEN_41 =
    _maskDataVec_maskDataVec_2_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[23:16] : 8'h0);
  wire [3:0]        _GEN_42 =
    _GEN_41[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[11:8] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_3_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[63:48] : 16'h0;
  wire [7:0]        _GEN_43 =
    _maskDataVec_maskDataVec_3_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[31:24] : 8'h0);
  wire [3:0]        _GEN_44 =
    _GEN_43[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[15:12] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_4_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[79:64] : 16'h0;
  wire [7:0]        _GEN_45 =
    _maskDataVec_maskDataVec_4_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[39:32] : 8'h0);
  wire [3:0]        _GEN_46 =
    _GEN_45[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[19:16] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_5_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[95:80] : 16'h0;
  wire [7:0]        _GEN_47 =
    _maskDataVec_maskDataVec_5_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[47:40] : 8'h0);
  wire [3:0]        _GEN_48 =
    _GEN_47[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[23:20] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_6_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[111:96] : 16'h0;
  wire [7:0]        _GEN_49 =
    _maskDataVec_maskDataVec_6_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[55:48] : 8'h0);
  wire [3:0]        _GEN_50 =
    _GEN_49[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[27:24] : 4'h0);
  wire [15:0]       _maskDataVec_maskDataVec_7_T_8 =
    _maskDataVec_maskDataVec_7_T ? instMicroOp_mask[127:112] : 16'h0;
  wire [7:0]        _GEN_51 =
    _maskDataVec_maskDataVec_7_T_8[7:0]
    | (_maskDataVec_maskDataVec_7_T_2 ? instMicroOp_mask[63:56] : 8'h0);
  wire [3:0]        _GEN_52 =
    _GEN_51[3:0] | (_maskDataVec_maskDataVec_7_T_4 ? instMicroOp_mask[31:28] : 4'h0);
  wire              writebackValid =
    _io_exceptionInfo_valid_T
    & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5;
  wire [127:0]      writebackOut_data = _GEN_5[deqPtr_value];
  wire [7:0][15:0]  _GEN_53 =
    {{{_maskDataVec_maskDataVec_7_T_8[15:8],
       _GEN_51[7:4],
       _GEN_52[3:2],
       _GEN_52[1:0] | ((&realEw) ? instMicroOp_mask[15:14] : 2'h0)}},
     {{_maskDataVec_maskDataVec_6_T_8[15:8],
       _GEN_49[7:4],
       _GEN_50[3:2],
       _GEN_50[1:0] | ((&realEw) ? instMicroOp_mask[13:12] : 2'h0)}},
     {{_maskDataVec_maskDataVec_5_T_8[15:8],
       _GEN_47[7:4],
       _GEN_48[3:2],
       _GEN_48[1:0] | ((&realEw) ? instMicroOp_mask[11:10] : 2'h0)}},
     {{_maskDataVec_maskDataVec_4_T_8[15:8],
       _GEN_45[7:4],
       _GEN_46[3:2],
       _GEN_46[1:0] | ((&realEw) ? instMicroOp_mask[9:8] : 2'h0)}},
     {{_maskDataVec_maskDataVec_3_T_8[15:8],
       _GEN_43[7:4],
       _GEN_44[3:2],
       _GEN_44[1:0] | ((&realEw) ? instMicroOp_mask[7:6] : 2'h0)}},
     {{_maskDataVec_maskDataVec_2_T_8[15:8],
       _GEN_41[7:4],
       _GEN_42[3:2],
       _GEN_42[1:0] | ((&realEw) ? instMicroOp_mask[5:4] : 2'h0)}},
     {{_maskDataVec_maskDataVec_1_T_8[15:8],
       _GEN_39[7:4],
       _GEN_40[3:2],
       _GEN_40[1:0] | ((&realEw) ? instMicroOp_mask[3:2] : 2'h0)}},
     {{_maskDataVec_maskDataVec_0_T_8[15:8],
       _GEN_37[7:4],
       _GEN_38[3:2],
       _GEN_38[1:0] | ((&realEw) ? instMicroOp_mask[1:0] : 2'h0)}}};
  wire [127:0]      writebackOut_uop_vpu_vmask = {112'h0, _GEN_53[vdIdxInField]};
  reg               io_uopwriteback_valid_REG;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_0;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_1;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_2;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_3;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_4;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_5;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_6;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_7;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_8;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_9;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_10;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_11;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_12;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_13;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_14;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_15;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_16;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_17;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_18;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_19;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_20;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_21;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_22;
  reg               io_uopwriteback_bits_r_uop_exceptionVec_23;
  reg  [8:0]        io_uopwriteback_bits_r_uop_fuOpType;
  reg               io_uopwriteback_bits_r_uop_vecWen;
  reg               io_uopwriteback_bits_r_uop_v0Wen;
  reg               io_uopwriteback_bits_r_uop_flushPipe;
  reg               io_uopwriteback_bits_r_uop_vpu_vma;
  reg               io_uopwriteback_bits_r_uop_vpu_vta;
  reg  [1:0]        io_uopwriteback_bits_r_uop_vpu_vsew;
  reg               io_uopwriteback_bits_r_uop_vpu_vm;
  reg  [7:0]        io_uopwriteback_bits_r_uop_vpu_vstart;
  reg  [127:0]      io_uopwriteback_bits_r_uop_vpu_vmask;
  reg  [7:0]        io_uopwriteback_bits_r_uop_vpu_vl;
  reg  [1:0]        io_uopwriteback_bits_r_uop_vpu_veew;
  reg  [7:0]        io_uopwriteback_bits_r_uop_pdest;
  reg               io_uopwriteback_bits_r_uop_robIdx_flag;
  reg  [7:0]        io_uopwriteback_bits_r_uop_robIdx_value;
  reg               io_uopwriteback_bits_r_uop_replayInst;
  reg  [127:0]      io_uopwriteback_bits_r_data;
  reg  [2:0]        io_uopwriteback_bits_r_vdIdxInField;
  wire              feedbackValid =
    _io_exceptionInfo_valid_T
    & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5;
  reg               io_feedback_valid_REG;
  reg               io_feedback_bits_r_hit;
  reg               io_feedback_bits_r_sqIdx_flag;
  reg  [5:0]        io_feedback_bits_r_sqIdx_value;
  reg               io_feedback_bits_r_lqIdx_flag;
  reg  [6:0]        io_feedback_bits_r_lqIdx_value;
  wire [4:0]        uopFlowNum_segmentIndexFlowNum =
    {io_in_bits_uop_vpu_vlmul == 3'h0 | io_in_bits_uop_vpu_vlmul == 3'h1
       | io_in_bits_uop_vpu_vlmul == 3'h2 | io_in_bits_uop_vpu_vlmul == 3'h3,
     &io_in_bits_uop_vpu_vlmul,
     io_in_bits_uop_vpu_vlmul == 3'h6,
     io_in_bits_uop_vpu_vlmul == 3'h5,
     1'h0} >> io_in_bits_uop_vpu_vsew;
  wire              _uopFlowNum_T_157 = _emul_T_3 == 3'h5;
  wire              _uopFlowNum_T_158 = _emul_T_3 == 3'h6;
  wire [4:0]        _GEN_54 = {3'h0, io_in_bits_uop_vpu_veew};
  wire              _GEN_55 =
    _emul_T_3 == 3'h0 | _emul_T_3 == 3'h1 | _emul_T_3 == 3'h2 | _emul_T_3 == 3'h3;
  wire [255:0]      _srcMask_vlMask_T = 256'h1 << instMicroOp_vl;
  wire [255:0]      _srcMask_startMask_T = 256'h1 << instMicroOp_uop_vpu_vstart;
  wire              _GEN_56 = io_in_valid & enqPtr_value == 3'h0;
  wire              _GEN_57 = io_in_valid & enqPtr_value == 3'h1;
  wire              _GEN_58 = io_in_valid & enqPtr_value == 3'h2;
  wire              _GEN_59 = io_in_valid & enqPtr_value == 3'h3;
  wire              _GEN_60 = io_in_valid & enqPtr_value == 3'h4;
  wire              _GEN_61 = io_in_valid & enqPtr_value == 3'h5;
  wire              _GEN_62 = io_in_valid & enqPtr_value == 3'h6;
  wire              _GEN_63 = io_in_valid & (&enqPtr_value);
  wire              _GEN_64 = io_dtlb_resp_valid & state == 4'h4;
  wire [63:0]       _cacheData_T_33 =
    latchVaddr[3:0] == 4'h0 ? io_rdcache_resp_bits_data_delayed[63:0] : 64'h0;
  wire [55:0]       _GEN_65 =
    _cacheData_T_33[55:0]
    | (latchVaddr[3:0] == 4'h1 ? io_rdcache_resp_bits_data_delayed[63:8] : 56'h0);
  wire [47:0]       _GEN_66 =
    _GEN_65[47:0]
    | (latchVaddr[3:0] == 4'h2 ? io_rdcache_resp_bits_data_delayed[63:16] : 48'h0);
  wire [39:0]       _GEN_67 =
    _GEN_66[39:0]
    | (latchVaddr[3:0] == 4'h3 ? io_rdcache_resp_bits_data_delayed[63:24] : 40'h0);
  wire [31:0]       _GEN_68 =
    _GEN_67[31:0]
    | (latchVaddr[3:0] == 4'h4 ? io_rdcache_resp_bits_data_delayed[63:32] : 32'h0);
  wire [23:0]       _GEN_69 =
    _GEN_68[23:0]
    | (latchVaddr[3:0] == 4'h5 ? io_rdcache_resp_bits_data_delayed[63:40] : 24'h0);
  wire [15:0]       _GEN_70 =
    _GEN_69[15:0]
    | (latchVaddr[3:0] == 4'h6 ? io_rdcache_resp_bits_data_delayed[63:48] : 16'h0);
  wire [63:0]       _cacheData_T_56 =
    {_cacheData_T_33[63:56],
     _GEN_65[55:48],
     _GEN_66[47:40],
     _GEN_67[39:32],
     _GEN_68[31:24],
     _GEN_69[23:16],
     _GEN_70[15:8],
     _GEN_70[7:0]
       | (latchVaddr[3:0] == 4'h7 ? io_rdcache_resp_bits_data_delayed[63:56] : 8'h0)}
    | (latchVaddr[3:0] == 4'h8 ? io_rdcache_resp_bits_data_delayed[127:64] : 64'h0);
  wire [55:0]       _GEN_71 =
    _cacheData_T_56[55:0]
    | (latchVaddr[3:0] == 4'h9 ? io_rdcache_resp_bits_data_delayed[127:72] : 56'h0);
  wire [47:0]       _GEN_72 =
    _GEN_71[47:0]
    | (latchVaddr[3:0] == 4'hA ? io_rdcache_resp_bits_data_delayed[127:80] : 48'h0);
  wire [39:0]       _GEN_73 =
    _GEN_72[39:0]
    | (latchVaddr[3:0] == 4'hB ? io_rdcache_resp_bits_data_delayed[127:88] : 40'h0);
  wire [31:0]       _GEN_74 =
    _GEN_73[31:0]
    | (latchVaddr[3:0] == 4'hC ? io_rdcache_resp_bits_data_delayed[127:96] : 32'h0);
  wire [23:0]       _GEN_75 =
    _GEN_74[23:0]
    | (latchVaddr[3:0] == 4'hD ? io_rdcache_resp_bits_data_delayed[127:104] : 24'h0);
  wire [15:0]       _GEN_76 =
    _GEN_75[15:0]
    | (latchVaddr[3:0] == 4'hE ? io_rdcache_resp_bits_data_delayed[127:112] : 16'h0);
  wire [7:0]        _pickData_T_1 =
    _GEN_76[7:0]
    | ((&(latchVaddr[3:0])) ? io_rdcache_resp_bits_data_delayed[127:120] : 8'h0);
  wire [63:0]       pickData =
    ((|(instMicroOp_alignedType[1:0])) ? 64'h0 : {56'h0, _pickData_T_1})
    | (instMicroOp_alignedType[1:0] == 2'h1
         ? {48'h0, _GEN_76[15:8], _pickData_T_1}
         : 64'h0)
    | (instMicroOp_alignedType[1:0] == 2'h2
         ? {32'h0, _GEN_74[31:24], _GEN_75[23:16], _GEN_76[15:8], _pickData_T_1}
         : 64'h0)
    | ((&(instMicroOp_alignedType[1:0]))
         ? {_cacheData_T_56[63:56],
            _GEN_71[55:48],
            _GEN_72[47:40],
            _GEN_73[39:32],
            _GEN_74[31:24],
            _GEN_75[23:16],
            _GEN_76[15:8],
            _pickData_T_1}
         : 64'h0);
  wire [127:0]      mergedData =
    ((|(instMicroOp_alignedType[1:0]))
       ? 128'h0
       : {(&_splitData_T) ? pickData[7:0] : _GEN_6[127:120],
          _splitData_T == 4'hE ? pickData[7:0] : _GEN_6[119:112],
          _splitData_T == 4'hD ? pickData[7:0] : _GEN_6[111:104],
          _splitData_T == 4'hC ? pickData[7:0] : _GEN_6[103:96],
          _splitData_T == 4'hB ? pickData[7:0] : _GEN_6[95:88],
          _splitData_T == 4'hA ? pickData[7:0] : _GEN_6[87:80],
          _splitData_T == 4'h9 ? pickData[7:0] : _GEN_6[79:72],
          _splitData_T == 4'h8 ? pickData[7:0] : _GEN_6[71:64],
          _splitData_T == 4'h7 ? pickData[7:0] : _GEN_6[63:56],
          _splitData_T == 4'h6 ? pickData[7:0] : _GEN_6[55:48],
          _splitData_T == 4'h5 ? pickData[7:0] : _GEN_6[47:40],
          _splitData_T == 4'h4 ? pickData[7:0] : _GEN_6[39:32],
          _splitData_T == 4'h3 ? pickData[7:0] : _GEN_6[31:24],
          _splitData_T == 4'h2 ? pickData[7:0] : _GEN_6[23:16],
          _splitData_T == 4'h1 ? pickData[7:0] : _GEN_6[15:8],
          _splitData_T == 4'h0 ? pickData[7:0] : _GEN_6[7:0]})
    | (instMicroOp_alignedType[1:0] == 2'h1
         ? {(&_splitData_T_65) ? pickData[15:0] : _GEN_6[127:112],
            _splitData_T_65 == 3'h6 ? pickData[15:0] : _GEN_6[111:96],
            _splitData_T_65 == 3'h5 ? pickData[15:0] : _GEN_6[95:80],
            _splitData_T_65 == 3'h4 ? pickData[15:0] : _GEN_6[79:64],
            _splitData_T_65 == 3'h3 ? pickData[15:0] : _GEN_6[63:48],
            _splitData_T_65 == 3'h2 ? pickData[15:0] : _GEN_6[47:32],
            _splitData_T_65 == 3'h1 ? pickData[15:0] : _GEN_6[31:16],
            _splitData_T_65 == 3'h0 ? pickData[15:0] : _GEN_6[15:0]}
         : 128'h0)
    | (instMicroOp_alignedType[1:0] == 2'h2
         ? {(&_splitData_T_98) ? pickData[31:0] : _GEN_6[127:96],
            _splitData_T_98 == 2'h2 ? pickData[31:0] : _GEN_6[95:64],
            _splitData_T_98 == 2'h1 ? pickData[31:0] : _GEN_6[63:32],
            _splitData_T_98 == 2'h0 ? pickData[31:0] : _GEN_6[31:0]}
         : 128'h0)
    | ((&(instMicroOp_alignedType[1:0]))
         ? {_splitData_T_119 ? pickData : _GEN_6[127:64],
            _splitData_T_119 ? _GEN_6[63:0] : pickData}
         : 128'h0);
  always @(posedge clock) begin
    if (_GEN_3) begin
      instMicroOp_baseVaddr <= io_in_bits_src_0[40:0];
      instMicroOp_uop_fuType <= io_in_bits_uop_fuType;
      instMicroOp_uop_fuOpType <= io_in_bits_uop_fuOpType;
      instMicroOp_uop_vpu_vill <= io_in_bits_uop_vpu_vill;
      instMicroOp_uop_vpu_vma <= io_in_bits_uop_vpu_vma;
      instMicroOp_uop_vpu_vta <= io_in_bits_uop_vpu_vta;
      instMicroOp_uop_vpu_vsew <= io_in_bits_uop_vpu_vsew;
      instMicroOp_uop_vpu_vlmul <= io_in_bits_uop_vpu_vlmul;
      instMicroOp_uop_vpu_specVill <= io_in_bits_uop_vpu_specVill;
      instMicroOp_uop_vpu_specVma <= io_in_bits_uop_vpu_specVma;
      instMicroOp_uop_vpu_specVta <= io_in_bits_uop_vpu_specVta;
      instMicroOp_uop_vpu_specVsew <= io_in_bits_uop_vpu_specVsew;
      instMicroOp_uop_vpu_specVlmul <= io_in_bits_uop_vpu_specVlmul;
      instMicroOp_uop_vpu_vm <= io_in_bits_uop_vpu_vm;
      instMicroOp_uop_vpu_vstart <= io_in_bits_uop_vpu_vstart;
      instMicroOp_uop_vpu_frm <= io_in_bits_uop_vpu_frm;
      instMicroOp_uop_vpu_fpu_isFpToVecInst <= io_in_bits_uop_vpu_fpu_isFpToVecInst;
      instMicroOp_uop_vpu_fpu_isFP32Instr <= io_in_bits_uop_vpu_fpu_isFP32Instr;
      instMicroOp_uop_vpu_fpu_isFP64Instr <= io_in_bits_uop_vpu_fpu_isFP64Instr;
      instMicroOp_uop_vpu_fpu_isReduction <= io_in_bits_uop_vpu_fpu_isReduction;
      instMicroOp_uop_vpu_fpu_isFoldTo1_2 <= io_in_bits_uop_vpu_fpu_isFoldTo1_2;
      instMicroOp_uop_vpu_fpu_isFoldTo1_4 <= io_in_bits_uop_vpu_fpu_isFoldTo1_4;
      instMicroOp_uop_vpu_fpu_isFoldTo1_8 <= io_in_bits_uop_vpu_fpu_isFoldTo1_8;
      instMicroOp_uop_vpu_vxrm <= io_in_bits_uop_vpu_vxrm;
      instMicroOp_uop_vpu_lastUop <= io_in_bits_uop_vpu_lastUop;
      instMicroOp_uop_vpu_nf <= io_in_bits_uop_vpu_nf;
      instMicroOp_uop_vpu_veew <= io_in_bits_uop_vpu_veew;
      instMicroOp_uop_vpu_isReverse <= io_in_bits_uop_vpu_isReverse;
      instMicroOp_uop_vpu_isExt <= io_in_bits_uop_vpu_isExt;
      instMicroOp_uop_vpu_isNarrow <= io_in_bits_uop_vpu_isNarrow;
      instMicroOp_uop_vpu_isDstMask <= io_in_bits_uop_vpu_isDstMask;
      instMicroOp_uop_vpu_isOpMask <= io_in_bits_uop_vpu_isOpMask;
      instMicroOp_uop_vpu_isMove <= io_in_bits_uop_vpu_isMove;
      instMicroOp_uop_vpu_isDependOldvd <= io_in_bits_uop_vpu_isDependOldvd;
      instMicroOp_uop_vpu_isWritePartVd <= io_in_bits_uop_vpu_isWritePartVd;
      instMicroOp_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      instMicroOp_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      instMicroOp_mask <=
        (instMicroOp_uop_vpu_vm
           ? 128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
           : io_in_bits_src_3) & 128'(_srcMask_vlMask_T[127:0] - 128'h1)
        & ~(128'(_srcMask_startMask_T[127:0] - 128'h1));
      instMicroOp_alignedType <=
        {1'h0,
         io_in_bits_uop_fuOpType[5] ? io_in_bits_uop_vpu_vsew : io_in_bits_uop_vpu_veew};
      instMicroOp_vl <= io_in_bits_src_4[7:0];
      instMicroOp_uopFlowNumMask <=
        8'({3'h0,
            (io_in_bits_uop_fuOpType[6:5] == 2'h0
               ? {_GEN_55, &_emul_T_3, _uopFlowNum_T_158, _uopFlowNum_T_157, 1'h0}
                 >> _GEN_54
               : 5'h0)
              | (io_in_bits_uop_fuOpType[6:5] == 2'h2
                   ? {_GEN_55, &_emul_T_3, _uopFlowNum_T_158, _uopFlowNum_T_157, 1'h0}
                     >> _GEN_54
                   : 5'h0)
              | (io_in_bits_uop_fuOpType[6:5] == 2'h1
                   ? uopFlowNum_segmentIndexFlowNum
                   : 5'h0)
              | ((&(io_in_bits_uop_fuOpType[6:5]))
                   ? uopFlowNum_segmentIndexFlowNum
                   : 5'h0)} - 8'h1);
      instMicroOp_isFof <=
        io_in_bits_uop_fuOpType == 9'h90
        & (instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33]);
    end
    if (_GEN_1) begin
      instMicroOp_uop_exceptionVec_4 <=
        ~addr_aligned & (instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33])
        & canTriggerException;
      instMicroOp_uop_exceptionVec_5 <=
        (instMicroOp_uop_exceptionVec_5 | io_pmpResp_ld | io_pmpResp_mmio)
        & canTriggerException;
      instMicroOp_uop_exceptionVec_6 <=
        ~addr_aligned & ~(instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33])
        & canTriggerException;
      instMicroOp_uop_exceptionVec_7 <=
        (instMicroOp_uop_exceptionVec_7 | io_pmpResp_st | io_pmpResp_mmio)
        & canTriggerException;
    end
    else begin
      instMicroOp_uop_exceptionVec_4 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_4;
      if (_GEN_64) begin
        instMicroOp_uop_exceptionVec_5 <=
          io_dtlb_resp_bits_excp_0_af_ld & canTriggerException;
        instMicroOp_uop_exceptionVec_7 <=
          io_dtlb_resp_bits_excp_0_af_st & canTriggerException;
      end
      else begin
        instMicroOp_uop_exceptionVec_5 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_5;
        instMicroOp_uop_exceptionVec_7 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_7;
      end
      instMicroOp_uop_exceptionVec_6 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_6;
    end
    if (_GEN_64) begin
      instMicroOp_uop_exceptionVec_13 <=
        io_dtlb_resp_bits_excp_0_pf_ld & canTriggerException;
      instMicroOp_uop_exceptionVec_15 <=
        io_dtlb_resp_bits_excp_0_pf_st & canTriggerException;
    end
    else begin
      instMicroOp_uop_exceptionVec_13 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_13;
      instMicroOp_uop_exceptionVec_15 <= ~_GEN_3 & instMicroOp_uop_exceptionVec_15;
    end
    if (_GEN_64 & ~io_dtlb_resp_bits_miss)
      instMicroOp_paddr <= io_dtlb_resp_bits_paddr_0;
    if (_GEN_1 & (exception_va | exception_pa) & canTriggerException)
      instMicroOp_exceptionVaddr <= _vaddr_T_3;
    if (_GEN_7 & splitPtr_value == 3'h0)
      data_0 <= mergedData;
    else if (_GEN_56)
      data_0 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h1)
      data_1 <= mergedData;
    else if (_GEN_57)
      data_1 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h2)
      data_2 <= mergedData;
    else if (_GEN_58)
      data_2 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h3)
      data_3 <= mergedData;
    else if (_GEN_59)
      data_3 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h4)
      data_4 <= mergedData;
    else if (_GEN_60)
      data_4 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h5)
      data_5 <= mergedData;
    else if (_GEN_61)
      data_5 <= io_in_bits_src_2;
    if (_GEN_7 & splitPtr_value == 3'h6)
      data_6 <= mergedData;
    else if (_GEN_62)
      data_6 <= io_in_bits_src_2;
    if (_GEN_7 & (&splitPtr_value))
      data_7 <= mergedData;
    else if (_GEN_63)
      data_7 <= io_in_bits_src_2;
    if (_GEN_56) begin
      uopq_0_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_0_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_0_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_0_uop_fuType <= io_in_bits_uop_fuType;
      uopq_0_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_0_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_0_uop_imm <= io_in_bits_uop_imm;
      uopq_0_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_0_uop_pdest <= io_in_bits_uop_pdest;
      uopq_0_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_0_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_0_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_0_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_0_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_0_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_0_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_0_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_0_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_0_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_0_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_0_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_0_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_0_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_0_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_0 <= io_in_bits_src_1;
    end
    if (_GEN_57) begin
      uopq_1_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_1_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_1_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_1_uop_fuType <= io_in_bits_uop_fuType;
      uopq_1_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_1_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_1_uop_imm <= io_in_bits_uop_imm;
      uopq_1_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_1_uop_pdest <= io_in_bits_uop_pdest;
      uopq_1_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_1_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_1_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_1_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_1_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_1_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_1_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_1_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_1_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_1_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_1_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_1_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_1_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_1_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_1_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_1 <= io_in_bits_src_1;
    end
    if (_GEN_58) begin
      uopq_2_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_2_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_2_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_2_uop_fuType <= io_in_bits_uop_fuType;
      uopq_2_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_2_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_2_uop_imm <= io_in_bits_uop_imm;
      uopq_2_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_2_uop_pdest <= io_in_bits_uop_pdest;
      uopq_2_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_2_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_2_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_2_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_2_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_2_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_2_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_2_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_2_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_2_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_2_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_2_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_2_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_2_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_2_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_2 <= io_in_bits_src_1;
    end
    if (_GEN_59) begin
      uopq_3_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_3_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_3_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_3_uop_fuType <= io_in_bits_uop_fuType;
      uopq_3_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_3_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_3_uop_imm <= io_in_bits_uop_imm;
      uopq_3_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_3_uop_pdest <= io_in_bits_uop_pdest;
      uopq_3_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_3_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_3_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_3_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_3_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_3_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_3_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_3_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_3_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_3_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_3_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_3_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_3_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_3_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_3_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_3 <= io_in_bits_src_1;
    end
    if (_GEN_60) begin
      uopq_4_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_4_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_4_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_4_uop_fuType <= io_in_bits_uop_fuType;
      uopq_4_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_4_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_4_uop_imm <= io_in_bits_uop_imm;
      uopq_4_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_4_uop_pdest <= io_in_bits_uop_pdest;
      uopq_4_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_4_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_4_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_4_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_4_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_4_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_4_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_4_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_4_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_4_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_4_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_4_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_4_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_4_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_4_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_4 <= io_in_bits_src_1;
    end
    if (_GEN_61) begin
      uopq_5_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_5_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_5_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_5_uop_fuType <= io_in_bits_uop_fuType;
      uopq_5_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_5_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_5_uop_imm <= io_in_bits_uop_imm;
      uopq_5_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_5_uop_pdest <= io_in_bits_uop_pdest;
      uopq_5_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_5_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_5_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_5_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_5_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_5_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_5_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_5_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_5_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_5_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_5_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_5_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_5_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_5_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_5_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_5 <= io_in_bits_src_1;
    end
    if (_GEN_62) begin
      uopq_6_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_6_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_6_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_6_uop_fuType <= io_in_bits_uop_fuType;
      uopq_6_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_6_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_6_uop_imm <= io_in_bits_uop_imm;
      uopq_6_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_6_uop_pdest <= io_in_bits_uop_pdest;
      uopq_6_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_6_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_6_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_6_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_6_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_6_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_6_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_6_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_6_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_6_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_6_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_6_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_6_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_6_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_6_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_6 <= io_in_bits_src_1;
    end
    if (_GEN_63) begin
      uopq_7_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      uopq_7_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      uopq_7_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      uopq_7_uop_fuType <= io_in_bits_uop_fuType;
      uopq_7_uop_vecWen <= io_in_bits_uop_vecWen;
      uopq_7_uop_v0Wen <= io_in_bits_uop_v0Wen;
      uopq_7_uop_imm <= io_in_bits_uop_imm;
      uopq_7_uop_vpu_vuopIdx <= io_in_bits_uop_vpu_vuopIdx;
      uopq_7_uop_pdest <= io_in_bits_uop_pdest;
      uopq_7_uop_debugInfo_eliminatedMove <= io_in_bits_uop_debugInfo_eliminatedMove;
      uopq_7_uop_debugInfo_renameTime <= io_in_bits_uop_debugInfo_renameTime;
      uopq_7_uop_debugInfo_dispatchTime <= io_in_bits_uop_debugInfo_dispatchTime;
      uopq_7_uop_debugInfo_enqRsTime <= io_in_bits_uop_debugInfo_enqRsTime;
      uopq_7_uop_debugInfo_selectTime <= io_in_bits_uop_debugInfo_selectTime;
      uopq_7_uop_debugInfo_issueTime <= io_in_bits_uop_debugInfo_issueTime;
      uopq_7_uop_debugInfo_writebackTime <= io_in_bits_uop_debugInfo_writebackTime;
      uopq_7_uop_debugInfo_runahead_checkpoint_id <=
        io_in_bits_uop_debugInfo_runahead_checkpoint_id;
      uopq_7_uop_debugInfo_tlbFirstReqTime <= io_in_bits_uop_debugInfo_tlbFirstReqTime;
      uopq_7_uop_debugInfo_tlbRespTime <= io_in_bits_uop_debugInfo_tlbRespTime;
      uopq_7_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      uopq_7_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      uopq_7_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      uopq_7_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      uopq_7_uop_numLsElem <= io_in_bits_uop_numLsElem;
      stride_7 <= io_in_bits_src_1;
    end
    io_uopwriteback_valid_REG <= writebackValid;
    if (writebackValid) begin
      io_uopwriteback_bits_r_uop_exceptionVec_0 <= writebackOut_uop_exceptionVec_0;
      io_uopwriteback_bits_r_uop_exceptionVec_1 <= writebackOut_uop_exceptionVec_1;
      io_uopwriteback_bits_r_uop_exceptionVec_2 <= writebackOut_uop_exceptionVec_2;
      io_uopwriteback_bits_r_uop_exceptionVec_3 <= writebackOut_uop_exceptionVec_3;
      io_uopwriteback_bits_r_uop_exceptionVec_4 <= writebackOut_uop_exceptionVec_4;
      io_uopwriteback_bits_r_uop_exceptionVec_5 <= writebackOut_uop_exceptionVec_5;
      io_uopwriteback_bits_r_uop_exceptionVec_6 <= writebackOut_uop_exceptionVec_6;
      io_uopwriteback_bits_r_uop_exceptionVec_7 <= writebackOut_uop_exceptionVec_7;
      io_uopwriteback_bits_r_uop_exceptionVec_8 <= writebackOut_uop_exceptionVec_8;
      io_uopwriteback_bits_r_uop_exceptionVec_9 <= writebackOut_uop_exceptionVec_9;
      io_uopwriteback_bits_r_uop_exceptionVec_10 <= writebackOut_uop_exceptionVec_10;
      io_uopwriteback_bits_r_uop_exceptionVec_11 <= writebackOut_uop_exceptionVec_11;
      io_uopwriteback_bits_r_uop_exceptionVec_12 <= writebackOut_uop_exceptionVec_12;
      io_uopwriteback_bits_r_uop_exceptionVec_13 <= writebackOut_uop_exceptionVec_13;
      io_uopwriteback_bits_r_uop_exceptionVec_14 <= writebackOut_uop_exceptionVec_14;
      io_uopwriteback_bits_r_uop_exceptionVec_15 <= writebackOut_uop_exceptionVec_15;
      io_uopwriteback_bits_r_uop_exceptionVec_16 <= writebackOut_uop_exceptionVec_16;
      io_uopwriteback_bits_r_uop_exceptionVec_17 <= writebackOut_uop_exceptionVec_17;
      io_uopwriteback_bits_r_uop_exceptionVec_18 <= writebackOut_uop_exceptionVec_18;
      io_uopwriteback_bits_r_uop_exceptionVec_19 <= writebackOut_uop_exceptionVec_19;
      io_uopwriteback_bits_r_uop_exceptionVec_20 <= writebackOut_uop_exceptionVec_20;
      io_uopwriteback_bits_r_uop_exceptionVec_21 <= writebackOut_uop_exceptionVec_21;
      io_uopwriteback_bits_r_uop_exceptionVec_22 <= writebackOut_uop_exceptionVec_22;
      io_uopwriteback_bits_r_uop_exceptionVec_23 <= writebackOut_uop_exceptionVec_23;
      io_uopwriteback_bits_r_uop_fuOpType <= writebackOut_uop_fuOpType;
      io_uopwriteback_bits_r_uop_vecWen <= writebackOut_uop_vecWen;
      io_uopwriteback_bits_r_uop_v0Wen <= writebackOut_uop_v0Wen;
      io_uopwriteback_bits_r_uop_flushPipe <= writebackOut_uop_flushPipe;
      io_uopwriteback_bits_r_uop_vpu_vma <= writebackOut_uop_vpu_vma;
      io_uopwriteback_bits_r_uop_vpu_vta <= writebackOut_uop_vpu_vta;
      io_uopwriteback_bits_r_uop_vpu_vsew <= writebackOut_uop_vpu_vsew;
      io_uopwriteback_bits_r_uop_vpu_vm <= writebackOut_uop_vpu_vm;
      io_uopwriteback_bits_r_uop_vpu_vstart <= writebackOut_uop_vpu_vstart;
      io_uopwriteback_bits_r_uop_vpu_vmask <= writebackOut_uop_vpu_vmask;
      io_uopwriteback_bits_r_uop_vpu_vl <= writebackOut_uop_vpu_vl;
      io_uopwriteback_bits_r_uop_vpu_veew <= writebackOut_uop_vpu_veew;
      io_uopwriteback_bits_r_uop_pdest <= writebackOut_uop_pdest;
      io_uopwriteback_bits_r_uop_robIdx_flag <= writebackOut_uop_robIdx_flag;
      io_uopwriteback_bits_r_uop_robIdx_value <= writebackOut_uop_robIdx_value;
      io_uopwriteback_bits_r_uop_replayInst <= writebackOut_uop_replayInst;
      io_uopwriteback_bits_r_data <= writebackOut_data;
      io_uopwriteback_bits_r_vdIdxInField <= writebackOut_vdIdxInField;
    end
    io_feedback_valid_REG <= feedbackValid;
    if (feedbackValid) begin
      io_feedback_bits_r_hit <= feedbackOut_hit;
      io_feedback_bits_r_sqIdx_flag <= feedbackOut_sqIdx_flag;
      io_feedback_bits_r_sqIdx_value <= feedbackOut_sqIdx_value;
      io_feedback_bits_r_lqIdx_flag <= feedbackOut_lqIdx_flag;
      io_feedback_bits_r_lqIdx_value <= feedbackOut_lqIdx_value;
    end
  end // always @(posedge)
  wire [3:0]        _enqPtr_new_ptr_T_1 = 4'({enqPtr_flag, enqPtr_value} + 4'h1);
  wire [3:0]        _deqPtr_new_ptr_T_1 = 4'(_GEN_36 + 4'h1);
  wire [7:0]        _maxSegIdx_T = 8'(instMicroOp_vl - 8'h1);
  wire              _GEN_77 = segmentIdx == _maxSegIdx_T;
  wire [3:0]        _GEN_78 =
    _GEN_77 & fieldIdx == _GEN_2 | _GEN_77 & ~segmentActive ? 4'hA : 4'h3;
  wire [3:0]        _GEN_79 =
    state != 4'hA
    | (enqPtr_flag == deqPtr_flag
         ? {1'h0, 3'(enqPtr_value - deqPtr_value)}
         : 4'(4'({1'h0, enqPtr_value} - 4'h8) - {1'h0, deqPtr_value})) == 4'h0
      ? 4'h0
      : 4'hA;
  wire [15:0][3:0]  _GEN_80 =
    {{_GEN_79},
     {_GEN_79},
     {_GEN_79},
     {_GEN_79},
     {_GEN_79},
     {_GEN_79},
     {~(io_sbuffer_ready & io_sbuffer_valid_0) & segmentActive ? 4'h9 : _GEN_78},
     {_GEN_78},
     {io_rdcache_resp_valid
        ? (io_rdcache_resp_bits_miss | io_rdcache_s2_bank_conflict
             ? 4'h6
             : {3'h4, ~(instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33])})
        : 4'h7},
     {{3'h3, io_rdcache_req_ready & io_rdcache_req_valid_0}},
     {exception_pa | exception_va
        ? 4'hA
        : instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33] ? 4'h6 : 4'h9},
     {io_dtlb_resp_valid ? (io_dtlb_resp_bits_miss ? 4'h3 : 4'h5) : 4'h4},
     {segmentActive
        ? 4'h4
        : {3'h4, ~(instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33])}},
     {{3'h1, io_flush_sbuffer_empty}},
     {{3'h1, io_flush_sbuffer_empty}},
     {{3'h0, enqPtr_flag ^ deqPtr_flag ^ enqPtr_value > deqPtr_value}}};
  wire [3:0]        stateNext = _GEN_80[state];
  wire              fieldActiveWirteFinish =
    io_sbuffer_ready & io_sbuffer_valid_0 & segmentActive;
  wire              segmentInactiveFinish =
    (_segmentInactiveFinish_T | _segmentInactiveFinish_T_1) & ~segmentActive;
  wire              _GEN_81 = _segmentInactiveFinish_T_1 & fieldActiveWirteFinish;
  wire              _GEN_82 = _fieldIdx_T & (_segmentInactiveFinish_T | _GEN_81);
  wire              _GEN_83 = segmentIdx != _maxSegIdx_T;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      instMicroOpValid <= 1'h0;
      enqPtr_flag <= 1'h0;
      enqPtr_value <= 3'h0;
      deqPtr_flag <= 1'h0;
      deqPtr_value <= 3'h0;
      segmentIdx <= 8'h0;
      fieldIdx <= 4'h0;
      segmentOffset <= 41'h0;
      splitPtr_flag <= 1'h0;
      splitPtr_value <= 3'h0;
      latchVaddr <= 41'h0;
      state <= 4'h0;
    end
    else begin
      instMicroOpValid <= (|stateNext) & (_GEN_3 | instMicroOpValid);
      if (io_in_valid) begin
        enqPtr_flag <= _enqPtr_new_ptr_T_1[3];
        enqPtr_value <= _enqPtr_new_ptr_T_1[2:0];
      end
      if (_io_exceptionInfo_valid_T
          & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5) begin
        deqPtr_flag <= _deqPtr_new_ptr_T_1[3];
        deqPtr_value <= _deqPtr_new_ptr_T_1[2:0];
      end
      if (_GEN_3) begin
        segmentIdx <= 8'h0;
        fieldIdx <= 4'h0;
      end
      else begin
        if (_GEN_82 & _GEN_83)
          segmentIdx <= _segmentIdx_T_2[7:0];
        else if (segmentInactiveFinish & _GEN_83)
          segmentIdx <= _segmentIdx_T_2[7:0];
        if (_GEN_7 | _GEN_81) begin
          if (_fieldIdx_T)
            fieldIdx <= 4'h0;
          else
            fieldIdx <= 4'(fieldIdx + 4'h1);
        end
        else if (segmentInactiveFinish)
          fieldIdx <= 4'h0;
      end
      if (_GEN_82 | segmentInactiveFinish)
        segmentOffset <=
          41'(segmentOffset
              + (instMicroOp_uop_fuOpType[6:5] == 2'h0
                   ? {34'h0, {3'h0, 4'(_GEN_2 + 4'h1)} << instMicroOp_uop_vpu_veew}
                   : _GEN_4[stridePtr_value][40:0]));
      else if (_GEN_3)
        segmentOffset <= 41'h0;
      if (_segmentInactiveFinish_T | _segmentInactiveFinish_T_1
          & (fieldActiveWirteFinish | ~segmentActive)) begin
        splitPtr_flag <= splitPtrNext_flag;
        splitPtr_value <= splitPtrNext_value;
      end
      else if (_GEN_3) begin
        splitPtr_flag <= deqPtr_flag;
        splitPtr_value <= deqPtr_value;
      end
      if (_io_dtlb_req_valid_T)
        latchVaddr <= _vaddr_T_3;
      state <= stateNext;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:469];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h1D6; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        instMicroOp_baseVaddr = {_RANDOM[9'h0], _RANDOM[9'h1][8:0]};
        instMicroOp_uop_exceptionVec_4 = _RANDOM[9'h4][0];
        instMicroOp_uop_exceptionVec_5 = _RANDOM[9'h4][1];
        instMicroOp_uop_exceptionVec_6 = _RANDOM[9'h4][2];
        instMicroOp_uop_exceptionVec_7 = _RANDOM[9'h4][3];
        instMicroOp_uop_exceptionVec_13 = _RANDOM[9'h4][9];
        instMicroOp_uop_exceptionVec_15 = _RANDOM[9'h4][11];
        instMicroOp_uop_fuType = {_RANDOM[9'h6][31:18], _RANDOM[9'h7][20:0]};
        instMicroOp_uop_fuOpType = _RANDOM[9'h7][29:21];
        instMicroOp_uop_vpu_vill = _RANDOM[9'h9][31];
        instMicroOp_uop_vpu_vma = _RANDOM[9'hA][0];
        instMicroOp_uop_vpu_vta = _RANDOM[9'hA][1];
        instMicroOp_uop_vpu_vsew = _RANDOM[9'hA][3:2];
        instMicroOp_uop_vpu_vlmul = _RANDOM[9'hA][6:4];
        instMicroOp_uop_vpu_specVill = _RANDOM[9'hA][7];
        instMicroOp_uop_vpu_specVma = _RANDOM[9'hA][8];
        instMicroOp_uop_vpu_specVta = _RANDOM[9'hA][9];
        instMicroOp_uop_vpu_specVsew = _RANDOM[9'hA][11:10];
        instMicroOp_uop_vpu_specVlmul = _RANDOM[9'hA][14:12];
        instMicroOp_uop_vpu_vm = _RANDOM[9'hA][15];
        instMicroOp_uop_vpu_vstart = _RANDOM[9'hA][23:16];
        instMicroOp_uop_vpu_frm = _RANDOM[9'hA][26:24];
        instMicroOp_uop_vpu_fpu_isFpToVecInst = _RANDOM[9'hA][27];
        instMicroOp_uop_vpu_fpu_isFP32Instr = _RANDOM[9'hA][28];
        instMicroOp_uop_vpu_fpu_isFP64Instr = _RANDOM[9'hA][29];
        instMicroOp_uop_vpu_fpu_isReduction = _RANDOM[9'hA][30];
        instMicroOp_uop_vpu_fpu_isFoldTo1_2 = _RANDOM[9'hA][31];
        instMicroOp_uop_vpu_fpu_isFoldTo1_4 = _RANDOM[9'hB][0];
        instMicroOp_uop_vpu_fpu_isFoldTo1_8 = _RANDOM[9'hB][1];
        instMicroOp_uop_vpu_vxrm = _RANDOM[9'hB][3:2];
        instMicroOp_uop_vpu_lastUop = _RANDOM[9'hB][11];
        instMicroOp_uop_vpu_nf = _RANDOM[9'hF][22:20];
        instMicroOp_uop_vpu_veew = _RANDOM[9'hF][24:23];
        instMicroOp_uop_vpu_isReverse = _RANDOM[9'hF][25];
        instMicroOp_uop_vpu_isExt = _RANDOM[9'hF][26];
        instMicroOp_uop_vpu_isNarrow = _RANDOM[9'hF][27];
        instMicroOp_uop_vpu_isDstMask = _RANDOM[9'hF][28];
        instMicroOp_uop_vpu_isOpMask = _RANDOM[9'hF][29];
        instMicroOp_uop_vpu_isMove = _RANDOM[9'hF][30];
        instMicroOp_uop_vpu_isDependOldvd = _RANDOM[9'hF][31];
        instMicroOp_uop_vpu_isWritePartVd = _RANDOM[9'h10][0];
        instMicroOp_uop_robIdx_flag = _RANDOM[9'h13][18];
        instMicroOp_uop_robIdx_value = _RANDOM[9'h13][26:19];
        instMicroOp_paddr = {_RANDOM[9'h27][31:10], _RANDOM[9'h28][13:0]};
        instMicroOp_mask =
          {_RANDOM[9'h28][31:14],
           _RANDOM[9'h29],
           _RANDOM[9'h2A],
           _RANDOM[9'h2B],
           _RANDOM[9'h2C][13:0]};
        instMicroOp_alignedType = _RANDOM[9'h2C][16:14];
        instMicroOp_vl = _RANDOM[9'h2C][24:17];
        instMicroOp_uopFlowNumMask = _RANDOM[9'h2D][8:1];
        instMicroOp_exceptionVaddr = {_RANDOM[9'h2D][31:17], _RANDOM[9'h2E][25:0]};
        instMicroOp_isFof = _RANDOM[9'h2F][12];
        instMicroOpValid = _RANDOM[9'h2F][13];
        data_0 =
          {_RANDOM[9'h2F][31:14],
           _RANDOM[9'h30],
           _RANDOM[9'h31],
           _RANDOM[9'h32],
           _RANDOM[9'h33][13:0]};
        data_1 =
          {_RANDOM[9'h33][31:14],
           _RANDOM[9'h34],
           _RANDOM[9'h35],
           _RANDOM[9'h36],
           _RANDOM[9'h37][13:0]};
        data_2 =
          {_RANDOM[9'h37][31:14],
           _RANDOM[9'h38],
           _RANDOM[9'h39],
           _RANDOM[9'h3A],
           _RANDOM[9'h3B][13:0]};
        data_3 =
          {_RANDOM[9'h3B][31:14],
           _RANDOM[9'h3C],
           _RANDOM[9'h3D],
           _RANDOM[9'h3E],
           _RANDOM[9'h3F][13:0]};
        data_4 =
          {_RANDOM[9'h3F][31:14],
           _RANDOM[9'h40],
           _RANDOM[9'h41],
           _RANDOM[9'h42],
           _RANDOM[9'h43][13:0]};
        data_5 =
          {_RANDOM[9'h43][31:14],
           _RANDOM[9'h44],
           _RANDOM[9'h45],
           _RANDOM[9'h46],
           _RANDOM[9'h47][13:0]};
        data_6 =
          {_RANDOM[9'h47][31:14],
           _RANDOM[9'h48],
           _RANDOM[9'h49],
           _RANDOM[9'h4A],
           _RANDOM[9'h4B][13:0]};
        data_7 =
          {_RANDOM[9'h4B][31:14],
           _RANDOM[9'h4C],
           _RANDOM[9'h4D],
           _RANDOM[9'h4E],
           _RANDOM[9'h4F][13:0]};
        uopq_0_uop_ftqPtr_flag = _RANDOM[9'h53][18];
        uopq_0_uop_ftqPtr_value = _RANDOM[9'h53][24:19];
        uopq_0_uop_ftqOffset = _RANDOM[9'h53][28:25];
        uopq_0_uop_fuType = {_RANDOM[9'h54][31:23], _RANDOM[9'h55][25:0]};
        uopq_0_uop_vecWen = _RANDOM[9'h56][5];
        uopq_0_uop_v0Wen = _RANDOM[9'h56][6];
        uopq_0_uop_imm = {_RANDOM[9'h56][31:17], _RANDOM[9'h57][16:0]};
        uopq_0_uop_vpu_vuopIdx = _RANDOM[9'h59][15:9];
        uopq_0_uop_pdest = _RANDOM[9'h61][22:15];
        uopq_0_uop_debugInfo_eliminatedMove = _RANDOM[9'h62][7];
        uopq_0_uop_debugInfo_renameTime =
          {_RANDOM[9'h62][31:8], _RANDOM[9'h63], _RANDOM[9'h64][7:0]};
        uopq_0_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h64][31:8], _RANDOM[9'h65], _RANDOM[9'h66][7:0]};
        uopq_0_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h66][31:8], _RANDOM[9'h67], _RANDOM[9'h68][7:0]};
        uopq_0_uop_debugInfo_selectTime =
          {_RANDOM[9'h68][31:8], _RANDOM[9'h69], _RANDOM[9'h6A][7:0]};
        uopq_0_uop_debugInfo_issueTime =
          {_RANDOM[9'h6A][31:8], _RANDOM[9'h6B], _RANDOM[9'h6C][7:0]};
        uopq_0_uop_debugInfo_writebackTime =
          {_RANDOM[9'h6C][31:8], _RANDOM[9'h6D], _RANDOM[9'h6E][7:0]};
        uopq_0_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h6E][31:8], _RANDOM[9'h6F], _RANDOM[9'h70][7:0]};
        uopq_0_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h70][31:8], _RANDOM[9'h71], _RANDOM[9'h72][7:0]};
        uopq_0_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h72][31:8], _RANDOM[9'h73], _RANDOM[9'h74][7:0]};
        uopq_0_uop_lqIdx_flag = _RANDOM[9'h74][25];
        uopq_0_uop_lqIdx_value = {_RANDOM[9'h74][31:26], _RANDOM[9'h75][0]};
        uopq_0_uop_sqIdx_flag = _RANDOM[9'h75][1];
        uopq_0_uop_sqIdx_value = _RANDOM[9'h75][7:2];
        uopq_0_uop_numLsElem = _RANDOM[9'h75][14:10];
        uopq_1_uop_ftqPtr_flag = _RANDOM[9'h79][19];
        uopq_1_uop_ftqPtr_value = _RANDOM[9'h79][25:20];
        uopq_1_uop_ftqOffset = _RANDOM[9'h79][29:26];
        uopq_1_uop_fuType = {_RANDOM[9'h7A][31:24], _RANDOM[9'h7B][26:0]};
        uopq_1_uop_vecWen = _RANDOM[9'h7C][6];
        uopq_1_uop_v0Wen = _RANDOM[9'h7C][7];
        uopq_1_uop_imm = {_RANDOM[9'h7C][31:18], _RANDOM[9'h7D][17:0]};
        uopq_1_uop_vpu_vuopIdx = _RANDOM[9'h7F][16:10];
        uopq_1_uop_pdest = _RANDOM[9'h87][23:16];
        uopq_1_uop_debugInfo_eliminatedMove = _RANDOM[9'h88][8];
        uopq_1_uop_debugInfo_renameTime =
          {_RANDOM[9'h88][31:9], _RANDOM[9'h89], _RANDOM[9'h8A][8:0]};
        uopq_1_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h8A][31:9], _RANDOM[9'h8B], _RANDOM[9'h8C][8:0]};
        uopq_1_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h8C][31:9], _RANDOM[9'h8D], _RANDOM[9'h8E][8:0]};
        uopq_1_uop_debugInfo_selectTime =
          {_RANDOM[9'h8E][31:9], _RANDOM[9'h8F], _RANDOM[9'h90][8:0]};
        uopq_1_uop_debugInfo_issueTime =
          {_RANDOM[9'h90][31:9], _RANDOM[9'h91], _RANDOM[9'h92][8:0]};
        uopq_1_uop_debugInfo_writebackTime =
          {_RANDOM[9'h92][31:9], _RANDOM[9'h93], _RANDOM[9'h94][8:0]};
        uopq_1_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h94][31:9], _RANDOM[9'h95], _RANDOM[9'h96][8:0]};
        uopq_1_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h96][31:9], _RANDOM[9'h97], _RANDOM[9'h98][8:0]};
        uopq_1_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h98][31:9], _RANDOM[9'h99], _RANDOM[9'h9A][8:0]};
        uopq_1_uop_lqIdx_flag = _RANDOM[9'h9A][26];
        uopq_1_uop_lqIdx_value = {_RANDOM[9'h9A][31:27], _RANDOM[9'h9B][1:0]};
        uopq_1_uop_sqIdx_flag = _RANDOM[9'h9B][2];
        uopq_1_uop_sqIdx_value = _RANDOM[9'h9B][8:3];
        uopq_1_uop_numLsElem = _RANDOM[9'h9B][15:11];
        uopq_2_uop_ftqPtr_flag = _RANDOM[9'h9F][20];
        uopq_2_uop_ftqPtr_value = _RANDOM[9'h9F][26:21];
        uopq_2_uop_ftqOffset = _RANDOM[9'h9F][30:27];
        uopq_2_uop_fuType = {_RANDOM[9'hA0][31:25], _RANDOM[9'hA1][27:0]};
        uopq_2_uop_vecWen = _RANDOM[9'hA2][7];
        uopq_2_uop_v0Wen = _RANDOM[9'hA2][8];
        uopq_2_uop_imm = {_RANDOM[9'hA2][31:19], _RANDOM[9'hA3][18:0]};
        uopq_2_uop_vpu_vuopIdx = _RANDOM[9'hA5][17:11];
        uopq_2_uop_pdest = _RANDOM[9'hAD][24:17];
        uopq_2_uop_debugInfo_eliminatedMove = _RANDOM[9'hAE][9];
        uopq_2_uop_debugInfo_renameTime =
          {_RANDOM[9'hAE][31:10], _RANDOM[9'hAF], _RANDOM[9'hB0][9:0]};
        uopq_2_uop_debugInfo_dispatchTime =
          {_RANDOM[9'hB0][31:10], _RANDOM[9'hB1], _RANDOM[9'hB2][9:0]};
        uopq_2_uop_debugInfo_enqRsTime =
          {_RANDOM[9'hB2][31:10], _RANDOM[9'hB3], _RANDOM[9'hB4][9:0]};
        uopq_2_uop_debugInfo_selectTime =
          {_RANDOM[9'hB4][31:10], _RANDOM[9'hB5], _RANDOM[9'hB6][9:0]};
        uopq_2_uop_debugInfo_issueTime =
          {_RANDOM[9'hB6][31:10], _RANDOM[9'hB7], _RANDOM[9'hB8][9:0]};
        uopq_2_uop_debugInfo_writebackTime =
          {_RANDOM[9'hB8][31:10], _RANDOM[9'hB9], _RANDOM[9'hBA][9:0]};
        uopq_2_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'hBA][31:10], _RANDOM[9'hBB], _RANDOM[9'hBC][9:0]};
        uopq_2_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'hBC][31:10], _RANDOM[9'hBD], _RANDOM[9'hBE][9:0]};
        uopq_2_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'hBE][31:10], _RANDOM[9'hBF], _RANDOM[9'hC0][9:0]};
        uopq_2_uop_lqIdx_flag = _RANDOM[9'hC0][27];
        uopq_2_uop_lqIdx_value = {_RANDOM[9'hC0][31:28], _RANDOM[9'hC1][2:0]};
        uopq_2_uop_sqIdx_flag = _RANDOM[9'hC1][3];
        uopq_2_uop_sqIdx_value = _RANDOM[9'hC1][9:4];
        uopq_2_uop_numLsElem = _RANDOM[9'hC1][16:12];
        uopq_3_uop_ftqPtr_flag = _RANDOM[9'hC5][21];
        uopq_3_uop_ftqPtr_value = _RANDOM[9'hC5][27:22];
        uopq_3_uop_ftqOffset = _RANDOM[9'hC5][31:28];
        uopq_3_uop_fuType = {_RANDOM[9'hC6][31:26], _RANDOM[9'hC7][28:0]};
        uopq_3_uop_vecWen = _RANDOM[9'hC8][8];
        uopq_3_uop_v0Wen = _RANDOM[9'hC8][9];
        uopq_3_uop_imm = {_RANDOM[9'hC8][31:20], _RANDOM[9'hC9][19:0]};
        uopq_3_uop_vpu_vuopIdx = _RANDOM[9'hCB][18:12];
        uopq_3_uop_pdest = _RANDOM[9'hD3][25:18];
        uopq_3_uop_debugInfo_eliminatedMove = _RANDOM[9'hD4][10];
        uopq_3_uop_debugInfo_renameTime =
          {_RANDOM[9'hD4][31:11], _RANDOM[9'hD5], _RANDOM[9'hD6][10:0]};
        uopq_3_uop_debugInfo_dispatchTime =
          {_RANDOM[9'hD6][31:11], _RANDOM[9'hD7], _RANDOM[9'hD8][10:0]};
        uopq_3_uop_debugInfo_enqRsTime =
          {_RANDOM[9'hD8][31:11], _RANDOM[9'hD9], _RANDOM[9'hDA][10:0]};
        uopq_3_uop_debugInfo_selectTime =
          {_RANDOM[9'hDA][31:11], _RANDOM[9'hDB], _RANDOM[9'hDC][10:0]};
        uopq_3_uop_debugInfo_issueTime =
          {_RANDOM[9'hDC][31:11], _RANDOM[9'hDD], _RANDOM[9'hDE][10:0]};
        uopq_3_uop_debugInfo_writebackTime =
          {_RANDOM[9'hDE][31:11], _RANDOM[9'hDF], _RANDOM[9'hE0][10:0]};
        uopq_3_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'hE0][31:11], _RANDOM[9'hE1], _RANDOM[9'hE2][10:0]};
        uopq_3_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'hE2][31:11], _RANDOM[9'hE3], _RANDOM[9'hE4][10:0]};
        uopq_3_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'hE4][31:11], _RANDOM[9'hE5], _RANDOM[9'hE6][10:0]};
        uopq_3_uop_lqIdx_flag = _RANDOM[9'hE6][28];
        uopq_3_uop_lqIdx_value = {_RANDOM[9'hE6][31:29], _RANDOM[9'hE7][3:0]};
        uopq_3_uop_sqIdx_flag = _RANDOM[9'hE7][4];
        uopq_3_uop_sqIdx_value = _RANDOM[9'hE7][10:5];
        uopq_3_uop_numLsElem = _RANDOM[9'hE7][17:13];
        uopq_4_uop_ftqPtr_flag = _RANDOM[9'hEB][22];
        uopq_4_uop_ftqPtr_value = _RANDOM[9'hEB][28:23];
        uopq_4_uop_ftqOffset = {_RANDOM[9'hEB][31:29], _RANDOM[9'hEC][0]};
        uopq_4_uop_fuType = {_RANDOM[9'hEC][31:27], _RANDOM[9'hED][29:0]};
        uopq_4_uop_vecWen = _RANDOM[9'hEE][9];
        uopq_4_uop_v0Wen = _RANDOM[9'hEE][10];
        uopq_4_uop_imm = {_RANDOM[9'hEE][31:21], _RANDOM[9'hEF][20:0]};
        uopq_4_uop_vpu_vuopIdx = _RANDOM[9'hF1][19:13];
        uopq_4_uop_pdest = _RANDOM[9'hF9][26:19];
        uopq_4_uop_debugInfo_eliminatedMove = _RANDOM[9'hFA][11];
        uopq_4_uop_debugInfo_renameTime =
          {_RANDOM[9'hFA][31:12], _RANDOM[9'hFB], _RANDOM[9'hFC][11:0]};
        uopq_4_uop_debugInfo_dispatchTime =
          {_RANDOM[9'hFC][31:12], _RANDOM[9'hFD], _RANDOM[9'hFE][11:0]};
        uopq_4_uop_debugInfo_enqRsTime =
          {_RANDOM[9'hFE][31:12], _RANDOM[9'hFF], _RANDOM[9'h100][11:0]};
        uopq_4_uop_debugInfo_selectTime =
          {_RANDOM[9'h100][31:12], _RANDOM[9'h101], _RANDOM[9'h102][11:0]};
        uopq_4_uop_debugInfo_issueTime =
          {_RANDOM[9'h102][31:12], _RANDOM[9'h103], _RANDOM[9'h104][11:0]};
        uopq_4_uop_debugInfo_writebackTime =
          {_RANDOM[9'h104][31:12], _RANDOM[9'h105], _RANDOM[9'h106][11:0]};
        uopq_4_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h106][31:12], _RANDOM[9'h107], _RANDOM[9'h108][11:0]};
        uopq_4_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h108][31:12], _RANDOM[9'h109], _RANDOM[9'h10A][11:0]};
        uopq_4_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h10A][31:12], _RANDOM[9'h10B], _RANDOM[9'h10C][11:0]};
        uopq_4_uop_lqIdx_flag = _RANDOM[9'h10C][29];
        uopq_4_uop_lqIdx_value = {_RANDOM[9'h10C][31:30], _RANDOM[9'h10D][4:0]};
        uopq_4_uop_sqIdx_flag = _RANDOM[9'h10D][5];
        uopq_4_uop_sqIdx_value = _RANDOM[9'h10D][11:6];
        uopq_4_uop_numLsElem = _RANDOM[9'h10D][18:14];
        uopq_5_uop_ftqPtr_flag = _RANDOM[9'h111][23];
        uopq_5_uop_ftqPtr_value = _RANDOM[9'h111][29:24];
        uopq_5_uop_ftqOffset = {_RANDOM[9'h111][31:30], _RANDOM[9'h112][1:0]};
        uopq_5_uop_fuType = {_RANDOM[9'h112][31:28], _RANDOM[9'h113][30:0]};
        uopq_5_uop_vecWen = _RANDOM[9'h114][10];
        uopq_5_uop_v0Wen = _RANDOM[9'h114][11];
        uopq_5_uop_imm = {_RANDOM[9'h114][31:22], _RANDOM[9'h115][21:0]};
        uopq_5_uop_vpu_vuopIdx = _RANDOM[9'h117][20:14];
        uopq_5_uop_pdest = _RANDOM[9'h11F][27:20];
        uopq_5_uop_debugInfo_eliminatedMove = _RANDOM[9'h120][12];
        uopq_5_uop_debugInfo_renameTime =
          {_RANDOM[9'h120][31:13], _RANDOM[9'h121], _RANDOM[9'h122][12:0]};
        uopq_5_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h122][31:13], _RANDOM[9'h123], _RANDOM[9'h124][12:0]};
        uopq_5_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h124][31:13], _RANDOM[9'h125], _RANDOM[9'h126][12:0]};
        uopq_5_uop_debugInfo_selectTime =
          {_RANDOM[9'h126][31:13], _RANDOM[9'h127], _RANDOM[9'h128][12:0]};
        uopq_5_uop_debugInfo_issueTime =
          {_RANDOM[9'h128][31:13], _RANDOM[9'h129], _RANDOM[9'h12A][12:0]};
        uopq_5_uop_debugInfo_writebackTime =
          {_RANDOM[9'h12A][31:13], _RANDOM[9'h12B], _RANDOM[9'h12C][12:0]};
        uopq_5_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h12C][31:13], _RANDOM[9'h12D], _RANDOM[9'h12E][12:0]};
        uopq_5_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h12E][31:13], _RANDOM[9'h12F], _RANDOM[9'h130][12:0]};
        uopq_5_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h130][31:13], _RANDOM[9'h131], _RANDOM[9'h132][12:0]};
        uopq_5_uop_lqIdx_flag = _RANDOM[9'h132][30];
        uopq_5_uop_lqIdx_value = {_RANDOM[9'h132][31], _RANDOM[9'h133][5:0]};
        uopq_5_uop_sqIdx_flag = _RANDOM[9'h133][6];
        uopq_5_uop_sqIdx_value = _RANDOM[9'h133][12:7];
        uopq_5_uop_numLsElem = _RANDOM[9'h133][19:15];
        uopq_6_uop_ftqPtr_flag = _RANDOM[9'h137][24];
        uopq_6_uop_ftqPtr_value = _RANDOM[9'h137][30:25];
        uopq_6_uop_ftqOffset = {_RANDOM[9'h137][31], _RANDOM[9'h138][2:0]};
        uopq_6_uop_fuType = {_RANDOM[9'h138][31:29], _RANDOM[9'h139]};
        uopq_6_uop_vecWen = _RANDOM[9'h13A][11];
        uopq_6_uop_v0Wen = _RANDOM[9'h13A][12];
        uopq_6_uop_imm = {_RANDOM[9'h13A][31:23], _RANDOM[9'h13B][22:0]};
        uopq_6_uop_vpu_vuopIdx = _RANDOM[9'h13D][21:15];
        uopq_6_uop_pdest = _RANDOM[9'h145][28:21];
        uopq_6_uop_debugInfo_eliminatedMove = _RANDOM[9'h146][13];
        uopq_6_uop_debugInfo_renameTime =
          {_RANDOM[9'h146][31:14], _RANDOM[9'h147], _RANDOM[9'h148][13:0]};
        uopq_6_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h148][31:14], _RANDOM[9'h149], _RANDOM[9'h14A][13:0]};
        uopq_6_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h14A][31:14], _RANDOM[9'h14B], _RANDOM[9'h14C][13:0]};
        uopq_6_uop_debugInfo_selectTime =
          {_RANDOM[9'h14C][31:14], _RANDOM[9'h14D], _RANDOM[9'h14E][13:0]};
        uopq_6_uop_debugInfo_issueTime =
          {_RANDOM[9'h14E][31:14], _RANDOM[9'h14F], _RANDOM[9'h150][13:0]};
        uopq_6_uop_debugInfo_writebackTime =
          {_RANDOM[9'h150][31:14], _RANDOM[9'h151], _RANDOM[9'h152][13:0]};
        uopq_6_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h152][31:14], _RANDOM[9'h153], _RANDOM[9'h154][13:0]};
        uopq_6_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h154][31:14], _RANDOM[9'h155], _RANDOM[9'h156][13:0]};
        uopq_6_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h156][31:14], _RANDOM[9'h157], _RANDOM[9'h158][13:0]};
        uopq_6_uop_lqIdx_flag = _RANDOM[9'h158][31];
        uopq_6_uop_lqIdx_value = _RANDOM[9'h159][6:0];
        uopq_6_uop_sqIdx_flag = _RANDOM[9'h159][7];
        uopq_6_uop_sqIdx_value = _RANDOM[9'h159][13:8];
        uopq_6_uop_numLsElem = _RANDOM[9'h159][20:16];
        uopq_7_uop_ftqPtr_flag = _RANDOM[9'h15D][25];
        uopq_7_uop_ftqPtr_value = _RANDOM[9'h15D][31:26];
        uopq_7_uop_ftqOffset = _RANDOM[9'h15E][3:0];
        uopq_7_uop_fuType = {_RANDOM[9'h15E][31:30], _RANDOM[9'h15F], _RANDOM[9'h160][0]};
        uopq_7_uop_vecWen = _RANDOM[9'h160][12];
        uopq_7_uop_v0Wen = _RANDOM[9'h160][13];
        uopq_7_uop_imm = {_RANDOM[9'h160][31:24], _RANDOM[9'h161][23:0]};
        uopq_7_uop_vpu_vuopIdx = _RANDOM[9'h163][22:16];
        uopq_7_uop_pdest = _RANDOM[9'h16B][29:22];
        uopq_7_uop_debugInfo_eliminatedMove = _RANDOM[9'h16C][14];
        uopq_7_uop_debugInfo_renameTime =
          {_RANDOM[9'h16C][31:15], _RANDOM[9'h16D], _RANDOM[9'h16E][14:0]};
        uopq_7_uop_debugInfo_dispatchTime =
          {_RANDOM[9'h16E][31:15], _RANDOM[9'h16F], _RANDOM[9'h170][14:0]};
        uopq_7_uop_debugInfo_enqRsTime =
          {_RANDOM[9'h170][31:15], _RANDOM[9'h171], _RANDOM[9'h172][14:0]};
        uopq_7_uop_debugInfo_selectTime =
          {_RANDOM[9'h172][31:15], _RANDOM[9'h173], _RANDOM[9'h174][14:0]};
        uopq_7_uop_debugInfo_issueTime =
          {_RANDOM[9'h174][31:15], _RANDOM[9'h175], _RANDOM[9'h176][14:0]};
        uopq_7_uop_debugInfo_writebackTime =
          {_RANDOM[9'h176][31:15], _RANDOM[9'h177], _RANDOM[9'h178][14:0]};
        uopq_7_uop_debugInfo_runahead_checkpoint_id =
          {_RANDOM[9'h178][31:15], _RANDOM[9'h179], _RANDOM[9'h17A][14:0]};
        uopq_7_uop_debugInfo_tlbFirstReqTime =
          {_RANDOM[9'h17A][31:15], _RANDOM[9'h17B], _RANDOM[9'h17C][14:0]};
        uopq_7_uop_debugInfo_tlbRespTime =
          {_RANDOM[9'h17C][31:15], _RANDOM[9'h17D], _RANDOM[9'h17E][14:0]};
        uopq_7_uop_lqIdx_flag = _RANDOM[9'h17F][0];
        uopq_7_uop_lqIdx_value = _RANDOM[9'h17F][7:1];
        uopq_7_uop_sqIdx_flag = _RANDOM[9'h17F][8];
        uopq_7_uop_sqIdx_value = _RANDOM[9'h17F][14:9];
        uopq_7_uop_numLsElem = _RANDOM[9'h17F][21:17];
        stride_0 =
          {_RANDOM[9'h17F][31:22],
           _RANDOM[9'h180],
           _RANDOM[9'h181],
           _RANDOM[9'h182],
           _RANDOM[9'h183][21:0]};
        stride_1 =
          {_RANDOM[9'h183][31:22],
           _RANDOM[9'h184],
           _RANDOM[9'h185],
           _RANDOM[9'h186],
           _RANDOM[9'h187][21:0]};
        stride_2 =
          {_RANDOM[9'h187][31:22],
           _RANDOM[9'h188],
           _RANDOM[9'h189],
           _RANDOM[9'h18A],
           _RANDOM[9'h18B][21:0]};
        stride_3 =
          {_RANDOM[9'h18B][31:22],
           _RANDOM[9'h18C],
           _RANDOM[9'h18D],
           _RANDOM[9'h18E],
           _RANDOM[9'h18F][21:0]};
        stride_4 =
          {_RANDOM[9'h18F][31:22],
           _RANDOM[9'h190],
           _RANDOM[9'h191],
           _RANDOM[9'h192],
           _RANDOM[9'h193][21:0]};
        stride_5 =
          {_RANDOM[9'h193][31:22],
           _RANDOM[9'h194],
           _RANDOM[9'h195],
           _RANDOM[9'h196],
           _RANDOM[9'h197][21:0]};
        stride_6 =
          {_RANDOM[9'h197][31:22],
           _RANDOM[9'h198],
           _RANDOM[9'h199],
           _RANDOM[9'h19A],
           _RANDOM[9'h19B][21:0]};
        stride_7 =
          {_RANDOM[9'h19B][31:22],
           _RANDOM[9'h19C],
           _RANDOM[9'h19D],
           _RANDOM[9'h19E],
           _RANDOM[9'h19F][21:0]};
        enqPtr_flag = _RANDOM[9'h19F][30];
        enqPtr_value = {_RANDOM[9'h19F][31], _RANDOM[9'h1A0][1:0]};
        deqPtr_flag = _RANDOM[9'h1A0][2];
        deqPtr_value = _RANDOM[9'h1A0][5:3];
        segmentIdx = _RANDOM[9'h1A0][13:6];
        fieldIdx = _RANDOM[9'h1A0][17:14];
        segmentOffset = {_RANDOM[9'h1A0][31:18], _RANDOM[9'h1A1][26:0]};
        splitPtr_flag = _RANDOM[9'h1A1][27];
        splitPtr_value = _RANDOM[9'h1A1][30:28];
        latchVaddr = {_RANDOM[9'h1A1][31], _RANDOM[9'h1A2], _RANDOM[9'h1A3][7:0]};
        state = _RANDOM[9'h1A3][11:8];
        io_uopwriteback_valid_REG = _RANDOM[9'h1A3][12];
        io_uopwriteback_bits_r_uop_exceptionVec_0 = _RANDOM[9'h1A6][0];
        io_uopwriteback_bits_r_uop_exceptionVec_1 = _RANDOM[9'h1A6][1];
        io_uopwriteback_bits_r_uop_exceptionVec_2 = _RANDOM[9'h1A6][2];
        io_uopwriteback_bits_r_uop_exceptionVec_3 = _RANDOM[9'h1A6][3];
        io_uopwriteback_bits_r_uop_exceptionVec_4 = _RANDOM[9'h1A6][4];
        io_uopwriteback_bits_r_uop_exceptionVec_5 = _RANDOM[9'h1A6][5];
        io_uopwriteback_bits_r_uop_exceptionVec_6 = _RANDOM[9'h1A6][6];
        io_uopwriteback_bits_r_uop_exceptionVec_7 = _RANDOM[9'h1A6][7];
        io_uopwriteback_bits_r_uop_exceptionVec_8 = _RANDOM[9'h1A6][8];
        io_uopwriteback_bits_r_uop_exceptionVec_9 = _RANDOM[9'h1A6][9];
        io_uopwriteback_bits_r_uop_exceptionVec_10 = _RANDOM[9'h1A6][10];
        io_uopwriteback_bits_r_uop_exceptionVec_11 = _RANDOM[9'h1A6][11];
        io_uopwriteback_bits_r_uop_exceptionVec_12 = _RANDOM[9'h1A6][12];
        io_uopwriteback_bits_r_uop_exceptionVec_13 = _RANDOM[9'h1A6][13];
        io_uopwriteback_bits_r_uop_exceptionVec_14 = _RANDOM[9'h1A6][14];
        io_uopwriteback_bits_r_uop_exceptionVec_15 = _RANDOM[9'h1A6][15];
        io_uopwriteback_bits_r_uop_exceptionVec_16 = _RANDOM[9'h1A6][16];
        io_uopwriteback_bits_r_uop_exceptionVec_17 = _RANDOM[9'h1A6][17];
        io_uopwriteback_bits_r_uop_exceptionVec_18 = _RANDOM[9'h1A6][18];
        io_uopwriteback_bits_r_uop_exceptionVec_19 = _RANDOM[9'h1A6][19];
        io_uopwriteback_bits_r_uop_exceptionVec_20 = _RANDOM[9'h1A6][20];
        io_uopwriteback_bits_r_uop_exceptionVec_21 = _RANDOM[9'h1A6][21];
        io_uopwriteback_bits_r_uop_exceptionVec_22 = _RANDOM[9'h1A6][22];
        io_uopwriteback_bits_r_uop_exceptionVec_23 = _RANDOM[9'h1A6][23];
        io_uopwriteback_bits_r_uop_fuOpType =
          {_RANDOM[9'h1A9][31:25], _RANDOM[9'h1AA][1:0]};
        io_uopwriteback_bits_r_uop_vecWen = _RANDOM[9'h1AA][4];
        io_uopwriteback_bits_r_uop_v0Wen = _RANDOM[9'h1AA][5];
        io_uopwriteback_bits_r_uop_flushPipe = _RANDOM[9'h1AA][10];
        io_uopwriteback_bits_r_uop_vpu_vma = _RANDOM[9'h1AC][4];
        io_uopwriteback_bits_r_uop_vpu_vta = _RANDOM[9'h1AC][5];
        io_uopwriteback_bits_r_uop_vpu_vsew = _RANDOM[9'h1AC][7:6];
        io_uopwriteback_bits_r_uop_vpu_vm = _RANDOM[9'h1AC][19];
        io_uopwriteback_bits_r_uop_vpu_vstart = _RANDOM[9'h1AC][27:20];
        io_uopwriteback_bits_r_uop_vpu_vmask =
          {_RANDOM[9'h1AD][31:16],
           _RANDOM[9'h1AE],
           _RANDOM[9'h1AF],
           _RANDOM[9'h1B0],
           _RANDOM[9'h1B1][15:0]};
        io_uopwriteback_bits_r_uop_vpu_vl = _RANDOM[9'h1B1][23:16];
        io_uopwriteback_bits_r_uop_vpu_veew = _RANDOM[9'h1B1][28:27];
        io_uopwriteback_bits_r_uop_pdest = _RANDOM[9'h1B5][21:14];
        io_uopwriteback_bits_r_uop_robIdx_flag = _RANDOM[9'h1B5][22];
        io_uopwriteback_bits_r_uop_robIdx_value = _RANDOM[9'h1B5][30:23];
        io_uopwriteback_bits_r_uop_replayInst = _RANDOM[9'h1C9][8];
        io_uopwriteback_bits_r_data =
          {_RANDOM[9'h1C9][31:14],
           _RANDOM[9'h1CA],
           _RANDOM[9'h1CB],
           _RANDOM[9'h1CC],
           _RANDOM[9'h1CD][13:0]};
        io_uopwriteback_bits_r_vdIdxInField = _RANDOM[9'h1D1][19:17];
        io_feedback_valid_REG = _RANDOM[9'h1D4][3];
        io_feedback_bits_r_hit = _RANDOM[9'h1D4][13];
        io_feedback_bits_r_sqIdx_flag = _RANDOM[9'h1D4][26];
        io_feedback_bits_r_sqIdx_value = {_RANDOM[9'h1D4][31:27], _RANDOM[9'h1D5][0]};
        io_feedback_bits_r_lqIdx_flag = _RANDOM[9'h1D5][1];
        io_feedback_bits_r_lqIdx_value = _RANDOM[9'h1D5][8:2];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        instMicroOpValid = 1'h0;
        enqPtr_flag = 1'h0;
        enqPtr_value = 3'h0;
        deqPtr_flag = 1'h0;
        deqPtr_value = 3'h0;
        segmentIdx = 8'h0;
        fieldIdx = 4'h0;
        segmentOffset = 41'h0;
        splitPtr_flag = 1'h0;
        splitPtr_value = 3'h0;
        latchVaddr = 41'h0;
        state = 4'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_uopwriteback_valid = io_uopwriteback_valid_REG;
  assign io_uopwriteback_bits_uop_exceptionVec_0 =
    io_uopwriteback_bits_r_uop_exceptionVec_0;
  assign io_uopwriteback_bits_uop_exceptionVec_1 =
    io_uopwriteback_bits_r_uop_exceptionVec_1;
  assign io_uopwriteback_bits_uop_exceptionVec_2 =
    io_uopwriteback_bits_r_uop_exceptionVec_2;
  assign io_uopwriteback_bits_uop_exceptionVec_3 =
    io_uopwriteback_bits_r_uop_exceptionVec_3;
  assign io_uopwriteback_bits_uop_exceptionVec_4 =
    io_uopwriteback_bits_r_uop_exceptionVec_4;
  assign io_uopwriteback_bits_uop_exceptionVec_5 =
    io_uopwriteback_bits_r_uop_exceptionVec_5;
  assign io_uopwriteback_bits_uop_exceptionVec_6 =
    io_uopwriteback_bits_r_uop_exceptionVec_6;
  assign io_uopwriteback_bits_uop_exceptionVec_7 =
    io_uopwriteback_bits_r_uop_exceptionVec_7;
  assign io_uopwriteback_bits_uop_exceptionVec_8 =
    io_uopwriteback_bits_r_uop_exceptionVec_8;
  assign io_uopwriteback_bits_uop_exceptionVec_9 =
    io_uopwriteback_bits_r_uop_exceptionVec_9;
  assign io_uopwriteback_bits_uop_exceptionVec_10 =
    io_uopwriteback_bits_r_uop_exceptionVec_10;
  assign io_uopwriteback_bits_uop_exceptionVec_11 =
    io_uopwriteback_bits_r_uop_exceptionVec_11;
  assign io_uopwriteback_bits_uop_exceptionVec_12 =
    io_uopwriteback_bits_r_uop_exceptionVec_12;
  assign io_uopwriteback_bits_uop_exceptionVec_13 =
    io_uopwriteback_bits_r_uop_exceptionVec_13;
  assign io_uopwriteback_bits_uop_exceptionVec_14 =
    io_uopwriteback_bits_r_uop_exceptionVec_14;
  assign io_uopwriteback_bits_uop_exceptionVec_15 =
    io_uopwriteback_bits_r_uop_exceptionVec_15;
  assign io_uopwriteback_bits_uop_exceptionVec_16 =
    io_uopwriteback_bits_r_uop_exceptionVec_16;
  assign io_uopwriteback_bits_uop_exceptionVec_17 =
    io_uopwriteback_bits_r_uop_exceptionVec_17;
  assign io_uopwriteback_bits_uop_exceptionVec_18 =
    io_uopwriteback_bits_r_uop_exceptionVec_18;
  assign io_uopwriteback_bits_uop_exceptionVec_19 =
    io_uopwriteback_bits_r_uop_exceptionVec_19;
  assign io_uopwriteback_bits_uop_exceptionVec_20 =
    io_uopwriteback_bits_r_uop_exceptionVec_20;
  assign io_uopwriteback_bits_uop_exceptionVec_21 =
    io_uopwriteback_bits_r_uop_exceptionVec_21;
  assign io_uopwriteback_bits_uop_exceptionVec_22 =
    io_uopwriteback_bits_r_uop_exceptionVec_22;
  assign io_uopwriteback_bits_uop_exceptionVec_23 =
    io_uopwriteback_bits_r_uop_exceptionVec_23;
  assign io_uopwriteback_bits_uop_fuOpType = io_uopwriteback_bits_r_uop_fuOpType;
  assign io_uopwriteback_bits_uop_vecWen = io_uopwriteback_bits_r_uop_vecWen;
  assign io_uopwriteback_bits_uop_v0Wen = io_uopwriteback_bits_r_uop_v0Wen;
  assign io_uopwriteback_bits_uop_flushPipe = io_uopwriteback_bits_r_uop_flushPipe;
  assign io_uopwriteback_bits_uop_vpu_vma = io_uopwriteback_bits_r_uop_vpu_vma;
  assign io_uopwriteback_bits_uop_vpu_vta = io_uopwriteback_bits_r_uop_vpu_vta;
  assign io_uopwriteback_bits_uop_vpu_vsew = io_uopwriteback_bits_r_uop_vpu_vsew;
  assign io_uopwriteback_bits_uop_vpu_vm = io_uopwriteback_bits_r_uop_vpu_vm;
  assign io_uopwriteback_bits_uop_vpu_vstart = io_uopwriteback_bits_r_uop_vpu_vstart;
  assign io_uopwriteback_bits_uop_vpu_vmask = io_uopwriteback_bits_r_uop_vpu_vmask;
  assign io_uopwriteback_bits_uop_vpu_vl = io_uopwriteback_bits_r_uop_vpu_vl;
  assign io_uopwriteback_bits_uop_vpu_veew = io_uopwriteback_bits_r_uop_vpu_veew;
  assign io_uopwriteback_bits_uop_pdest = io_uopwriteback_bits_r_uop_pdest;
  assign io_uopwriteback_bits_uop_robIdx_flag = io_uopwriteback_bits_r_uop_robIdx_flag;
  assign io_uopwriteback_bits_uop_robIdx_value = io_uopwriteback_bits_r_uop_robIdx_value;
  assign io_uopwriteback_bits_uop_replayInst = io_uopwriteback_bits_r_uop_replayInst;
  assign io_uopwriteback_bits_data = io_uopwriteback_bits_r_data;
  assign io_uopwriteback_bits_vdIdxInField = io_uopwriteback_bits_r_vdIdxInField;
  assign io_rdcache_req_valid = io_rdcache_req_valid_0;
  assign io_rdcache_req_bits_vaddr = latchVaddr;
  assign io_rdcache_s1_paddr_dup_lsu = instMicroOp_paddr;
  assign io_rdcache_s1_paddr_dup_dcache = instMicroOp_paddr;
  assign io_sbuffer_valid = io_sbuffer_valid_0;
  assign io_sbuffer_bits_vaddr = latchVaddr;
  assign io_sbuffer_bits_data =
    (_flowData_T_15 ? {2{{2{{2{{2{splitData[7:0]}}}}}}}} : 128'h0)
    | (_flowData_T_16 ? {2{{2{{2{splitData[15:0]}}}}}} : 128'h0)
    | (_flowData_T_17 ? {2{{2{splitData[31:0]}}}} : 128'h0)
    | (_flowData_T_18 ? {2{splitData[63:0]}} : 128'h0)
    | (_flowData_T_19 ? splitData : 128'h0);
  assign io_sbuffer_bits_mask = _wmask_T_13[15:0] & {16{segmentActive}};
  assign io_sbuffer_bits_addr = instMicroOp_paddr;
  assign io_sbuffer_bits_vecValid = _segmentInactiveFinish_T_1 & segmentActive;
  assign io_dtlb_req_valid = _io_dtlb_req_valid_T & segmentActive;
  assign io_dtlb_req_bits_vaddr = _vaddr_T_3;
  assign io_dtlb_req_bits_cmd =
    {2'h0, ~(instMicroOp_uop_fuType[31] | instMicroOp_uop_fuType[33])};
  assign io_dtlb_req_bits_debug_robIdx_flag = instMicroOp_uop_robIdx_flag;
  assign io_dtlb_req_bits_debug_robIdx_value = instMicroOp_uop_robIdx_value;
  assign io_flush_sbuffer_valid = ~io_flush_sbuffer_empty & state == 4'h1;
  assign io_feedback_valid = io_feedback_valid_REG;
  assign io_feedback_bits_hit = io_feedback_bits_r_hit;
  assign io_feedback_bits_sqIdx_flag = io_feedback_bits_r_sqIdx_flag;
  assign io_feedback_bits_sqIdx_value = io_feedback_bits_r_sqIdx_value;
  assign io_feedback_bits_lqIdx_flag = io_feedback_bits_r_lqIdx_flag;
  assign io_feedback_bits_lqIdx_value = io_feedback_bits_r_lqIdx_value;
  assign io_exceptionInfo_valid =
    _io_exceptionInfo_valid_T
    & (|{instMicroOp_uop_exceptionVec_15,
         instMicroOp_uop_exceptionVec_13,
         instMicroOp_uop_exceptionVec_7,
         instMicroOp_uop_exceptionVec_6,
         instMicroOp_uop_exceptionVec_5,
         instMicroOp_uop_exceptionVec_4})
    & _io_exceptionInfo_valid_T_4 != _io_exceptionInfo_valid_T_5;
  assign io_exceptionInfo_bits_vaddr = instMicroOp_exceptionVaddr;
endmodule

