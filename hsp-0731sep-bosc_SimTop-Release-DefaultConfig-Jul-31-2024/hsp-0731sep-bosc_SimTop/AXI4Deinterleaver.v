// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module AXI4Deinterleaver(
  input          clock,
  input          reset,
  output         auto_in_aw_ready,
  input          auto_in_aw_valid,
  input  [35:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [3:0]   auto_in_aw_bits_cache,
  output         auto_in_w_ready,
  input          auto_in_w_valid,
  input  [255:0] auto_in_w_bits_data,
  input  [31:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output         auto_in_ar_ready,
  input          auto_in_ar_valid,
  input  [35:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [3:0]   auto_in_ar_bits_cache,
  input          auto_in_r_ready,
  output         auto_in_r_valid,
  output [255:0] auto_in_r_bits_data,
  output         auto_in_r_bits_last,
  input          auto_out_aw_ready,
  output         auto_out_aw_valid,
  output [35:0]  auto_out_aw_bits_addr,
  output [7:0]   auto_out_aw_bits_len,
  output [2:0]   auto_out_aw_bits_size,
  output [3:0]   auto_out_aw_bits_cache,
  input          auto_out_w_ready,
  output         auto_out_w_valid,
  output [255:0] auto_out_w_bits_data,
  output [31:0]  auto_out_w_bits_strb,
  output         auto_out_w_bits_last,
  output         auto_out_b_ready,
  input          auto_out_b_valid,
  input          auto_out_ar_ready,
  output         auto_out_ar_valid,
  output [35:0]  auto_out_ar_bits_addr,
  output [7:0]   auto_out_ar_bits_len,
  output [2:0]   auto_out_ar_bits_size,
  output [3:0]   auto_out_ar_bits_cache,
  output         auto_out_r_ready,
  input          auto_out_r_valid,
  input  [3:0]   auto_out_r_bits_id,
  input  [255:0] auto_out_r_bits_data,
  input  [1:0]   auto_out_r_bits_resp,
  input          auto_out_r_bits_last
);

  wire               nodeOut_r_ready;
  wire               nodeIn_r_bits_last;
  wire               _qs_queue_15_io_enq_ready;
  wire [255:0]       _qs_queue_15_io_deq_bits_data;
  wire               _qs_queue_15_io_deq_bits_last;
  wire               _qs_queue_14_io_enq_ready;
  wire [255:0]       _qs_queue_14_io_deq_bits_data;
  wire               _qs_queue_14_io_deq_bits_last;
  wire               _qs_queue_13_io_enq_ready;
  wire [255:0]       _qs_queue_13_io_deq_bits_data;
  wire               _qs_queue_13_io_deq_bits_last;
  wire               _qs_queue_12_io_enq_ready;
  wire [255:0]       _qs_queue_12_io_deq_bits_data;
  wire               _qs_queue_12_io_deq_bits_last;
  wire               _qs_queue_11_io_enq_ready;
  wire [255:0]       _qs_queue_11_io_deq_bits_data;
  wire               _qs_queue_11_io_deq_bits_last;
  wire               _qs_queue_10_io_enq_ready;
  wire [255:0]       _qs_queue_10_io_deq_bits_data;
  wire               _qs_queue_10_io_deq_bits_last;
  wire               _qs_queue_9_io_enq_ready;
  wire [255:0]       _qs_queue_9_io_deq_bits_data;
  wire               _qs_queue_9_io_deq_bits_last;
  wire               _qs_queue_8_io_enq_ready;
  wire [255:0]       _qs_queue_8_io_deq_bits_data;
  wire               _qs_queue_8_io_deq_bits_last;
  wire               _qs_queue_7_io_enq_ready;
  wire [255:0]       _qs_queue_7_io_deq_bits_data;
  wire               _qs_queue_7_io_deq_bits_last;
  wire               _qs_queue_6_io_enq_ready;
  wire [255:0]       _qs_queue_6_io_deq_bits_data;
  wire               _qs_queue_6_io_deq_bits_last;
  wire               _qs_queue_5_io_enq_ready;
  wire [255:0]       _qs_queue_5_io_deq_bits_data;
  wire               _qs_queue_5_io_deq_bits_last;
  wire               _qs_queue_4_io_enq_ready;
  wire [255:0]       _qs_queue_4_io_deq_bits_data;
  wire               _qs_queue_4_io_deq_bits_last;
  wire               _qs_queue_3_io_enq_ready;
  wire [255:0]       _qs_queue_3_io_deq_bits_data;
  wire               _qs_queue_3_io_deq_bits_last;
  wire               _qs_queue_2_io_enq_ready;
  wire [255:0]       _qs_queue_2_io_deq_bits_data;
  wire               _qs_queue_2_io_deq_bits_last;
  wire               _qs_queue_1_io_enq_ready;
  wire [255:0]       _qs_queue_1_io_deq_bits_data;
  wire               _qs_queue_1_io_deq_bits_last;
  wire               _qs_queue_0_io_enq_ready;
  wire [255:0]       _qs_queue_0_io_deq_bits_data;
  wire               _qs_queue_0_io_deq_bits_last;
  reg                locked;
  reg  [3:0]         deq_id;
  reg  [1:0]         pending_count;
  wire               enq_OH_bools_0 = auto_out_r_bits_id == 4'h0;
  wire               _pending_inc_T_46 = nodeOut_r_ready & auto_out_r_valid;
  wire               deq_OH_bools_0 = deq_id == 4'h0;
  wire               _queue_15_qs_15_deq_ready_T = auto_in_r_ready & locked;
  wire [1:0]         _pending_next_T_2 =
    2'(2'(pending_count
          + {1'h0, enq_OH_bools_0 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_0 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_1;
  wire               enq_OH_bools_1 = auto_out_r_bits_id == 4'h1;
  wire               deq_OH_bools_1 = deq_id == 4'h1;
  wire [1:0]         _pending_next_T_6 =
    2'(2'(pending_count_1
          + {1'h0, enq_OH_bools_1 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_1 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_2;
  wire               enq_OH_bools_2 = auto_out_r_bits_id == 4'h2;
  wire               deq_OH_bools_2 = deq_id == 4'h2;
  wire [1:0]         _pending_next_T_10 =
    2'(2'(pending_count_2
          + {1'h0, enq_OH_bools_2 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_2 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_3;
  wire               enq_OH_bools_3 = auto_out_r_bits_id == 4'h3;
  wire               deq_OH_bools_3 = deq_id == 4'h3;
  wire [1:0]         _pending_next_T_14 =
    2'(2'(pending_count_3
          + {1'h0, enq_OH_bools_3 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_3 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_4;
  wire               enq_OH_bools_4 = auto_out_r_bits_id == 4'h4;
  wire               deq_OH_bools_4 = deq_id == 4'h4;
  wire [1:0]         _pending_next_T_18 =
    2'(2'(pending_count_4
          + {1'h0, enq_OH_bools_4 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_4 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_5;
  wire               enq_OH_bools_5 = auto_out_r_bits_id == 4'h5;
  wire               deq_OH_bools_5 = deq_id == 4'h5;
  wire [1:0]         _pending_next_T_22 =
    2'(2'(pending_count_5
          + {1'h0, enq_OH_bools_5 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_5 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_6;
  wire               enq_OH_bools_6 = auto_out_r_bits_id == 4'h6;
  wire               deq_OH_bools_6 = deq_id == 4'h6;
  wire [1:0]         _pending_next_T_26 =
    2'(2'(pending_count_6
          + {1'h0, enq_OH_bools_6 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_6 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_7;
  wire               enq_OH_bools_7 = auto_out_r_bits_id == 4'h7;
  wire               deq_OH_bools_7 = deq_id == 4'h7;
  wire [1:0]         _pending_next_T_30 =
    2'(2'(pending_count_7
          + {1'h0, enq_OH_bools_7 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_7 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_8;
  wire               enq_OH_bools_8 = auto_out_r_bits_id == 4'h8;
  wire               deq_OH_bools_8 = deq_id == 4'h8;
  wire [1:0]         _pending_next_T_34 =
    2'(2'(pending_count_8
          + {1'h0, enq_OH_bools_8 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_8 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_9;
  wire               enq_OH_bools_9 = auto_out_r_bits_id == 4'h9;
  wire               deq_OH_bools_9 = deq_id == 4'h9;
  wire [1:0]         _pending_next_T_38 =
    2'(2'(pending_count_9
          + {1'h0, enq_OH_bools_9 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_9 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_10;
  wire               enq_OH_bools_10 = auto_out_r_bits_id == 4'hA;
  wire               deq_OH_bools_10 = deq_id == 4'hA;
  wire [1:0]         _pending_next_T_42 =
    2'(2'(pending_count_10
          + {1'h0, enq_OH_bools_10 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_10 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_11;
  wire               enq_OH_bools_11 = auto_out_r_bits_id == 4'hB;
  wire               deq_OH_bools_11 = deq_id == 4'hB;
  wire [1:0]         _pending_next_T_46 =
    2'(2'(pending_count_11
          + {1'h0, enq_OH_bools_11 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_11 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_12;
  wire               enq_OH_bools_12 = auto_out_r_bits_id == 4'hC;
  wire               deq_OH_bools_12 = deq_id == 4'hC;
  wire [1:0]         _pending_next_T_50 =
    2'(2'(pending_count_12
          + {1'h0, enq_OH_bools_12 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_12 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_13;
  wire               enq_OH_bools_13 = auto_out_r_bits_id == 4'hD;
  wire               deq_OH_bools_13 = deq_id == 4'hD;
  wire [1:0]         _pending_next_T_54 =
    2'(2'(pending_count_13
          + {1'h0, enq_OH_bools_13 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_13 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_14;
  wire               enq_OH_bools_14 = auto_out_r_bits_id == 4'hE;
  wire               deq_OH_bools_14 = deq_id == 4'hE;
  wire [1:0]         _pending_next_T_58 =
    2'(2'(pending_count_14
          + {1'h0, enq_OH_bools_14 & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, deq_OH_bools_14 & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  reg  [1:0]         pending_count_15;
  wire [1:0]         _pending_next_T_62 =
    2'(2'(pending_count_15
          + {1'h0, (&auto_out_r_bits_id) & _pending_inc_T_46 & auto_out_r_bits_last})
       - {1'h0, (&deq_id) & _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last});
  wire               _GEN = ~locked | _queue_15_qs_15_deq_ready_T & nodeIn_r_bits_last;
  wire [15:0][255:0] _GEN_0 =
    {{_qs_queue_15_io_deq_bits_data},
     {_qs_queue_14_io_deq_bits_data},
     {_qs_queue_13_io_deq_bits_data},
     {_qs_queue_12_io_deq_bits_data},
     {_qs_queue_11_io_deq_bits_data},
     {_qs_queue_10_io_deq_bits_data},
     {_qs_queue_9_io_deq_bits_data},
     {_qs_queue_8_io_deq_bits_data},
     {_qs_queue_7_io_deq_bits_data},
     {_qs_queue_6_io_deq_bits_data},
     {_qs_queue_5_io_deq_bits_data},
     {_qs_queue_4_io_deq_bits_data},
     {_qs_queue_3_io_deq_bits_data},
     {_qs_queue_2_io_deq_bits_data},
     {_qs_queue_1_io_deq_bits_data},
     {_qs_queue_0_io_deq_bits_data}};
  wire [15:0]        _GEN_1 =
    {{_qs_queue_15_io_deq_bits_last},
     {_qs_queue_14_io_deq_bits_last},
     {_qs_queue_13_io_deq_bits_last},
     {_qs_queue_12_io_deq_bits_last},
     {_qs_queue_11_io_deq_bits_last},
     {_qs_queue_10_io_deq_bits_last},
     {_qs_queue_9_io_deq_bits_last},
     {_qs_queue_8_io_deq_bits_last},
     {_qs_queue_7_io_deq_bits_last},
     {_qs_queue_6_io_deq_bits_last},
     {_qs_queue_5_io_deq_bits_last},
     {_qs_queue_4_io_deq_bits_last},
     {_qs_queue_3_io_deq_bits_last},
     {_qs_queue_2_io_deq_bits_last},
     {_qs_queue_1_io_deq_bits_last},
     {_qs_queue_0_io_deq_bits_last}};
  assign nodeIn_r_bits_last = _GEN_1[deq_id];
  wire [15:0]        _GEN_2 =
    {{_qs_queue_15_io_enq_ready},
     {_qs_queue_14_io_enq_ready},
     {_qs_queue_13_io_enq_ready},
     {_qs_queue_12_io_enq_ready},
     {_qs_queue_11_io_enq_ready},
     {_qs_queue_10_io_enq_ready},
     {_qs_queue_9_io_enq_ready},
     {_qs_queue_8_io_enq_ready},
     {_qs_queue_7_io_enq_ready},
     {_qs_queue_6_io_enq_ready},
     {_qs_queue_5_io_enq_ready},
     {_qs_queue_4_io_enq_ready},
     {_qs_queue_3_io_enq_ready},
     {_qs_queue_2_io_enq_ready},
     {_qs_queue_1_io_enq_ready},
     {_qs_queue_0_io_enq_ready}};
  assign nodeOut_r_ready = _GEN_2[auto_out_r_bits_id];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      locked <= 1'h0;
      pending_count <= 2'h0;
      pending_count_1 <= 2'h0;
      pending_count_2 <= 2'h0;
      pending_count_3 <= 2'h0;
      pending_count_4 <= 2'h0;
      pending_count_5 <= 2'h0;
      pending_count_6 <= 2'h0;
      pending_count_7 <= 2'h0;
      pending_count_8 <= 2'h0;
      pending_count_9 <= 2'h0;
      pending_count_10 <= 2'h0;
      pending_count_11 <= 2'h0;
      pending_count_12 <= 2'h0;
      pending_count_13 <= 2'h0;
      pending_count_14 <= 2'h0;
      pending_count_15 <= 2'h0;
    end
    else begin
      if (_GEN)
        locked <=
          |{|_pending_next_T_62,
            |_pending_next_T_58,
            |_pending_next_T_54,
            |_pending_next_T_50,
            |_pending_next_T_46,
            |_pending_next_T_42,
            |_pending_next_T_38,
            |_pending_next_T_34,
            |_pending_next_T_30,
            |_pending_next_T_26,
            |_pending_next_T_22,
            |_pending_next_T_18,
            |_pending_next_T_14,
            |_pending_next_T_10,
            |_pending_next_T_6,
            |_pending_next_T_2};
      pending_count <= _pending_next_T_2;
      pending_count_1 <= _pending_next_T_6;
      pending_count_2 <= _pending_next_T_10;
      pending_count_3 <= _pending_next_T_14;
      pending_count_4 <= _pending_next_T_18;
      pending_count_5 <= _pending_next_T_22;
      pending_count_6 <= _pending_next_T_26;
      pending_count_7 <= _pending_next_T_30;
      pending_count_8 <= _pending_next_T_34;
      pending_count_9 <= _pending_next_T_38;
      pending_count_10 <= _pending_next_T_42;
      pending_count_11 <= _pending_next_T_46;
      pending_count_12 <= _pending_next_T_50;
      pending_count_13 <= _pending_next_T_54;
      pending_count_14 <= _pending_next_T_58;
      pending_count_15 <= _pending_next_T_62;
    end
  end // always @(posedge, posedge)
  wire               _GEN_3 = (|_pending_next_T_50) | (|_pending_next_T_46);
  wire               _GEN_4 = (|_pending_next_T_46) | (|_pending_next_T_42);
  wire               _GEN_5 = (|_pending_next_T_42) | (|_pending_next_T_38);
  wire               _GEN_6 = (|_pending_next_T_38) | (|_pending_next_T_34);
  wire               _GEN_7 = (|_pending_next_T_34) | (|_pending_next_T_30);
  wire               _GEN_8 = (|_pending_next_T_30) | (|_pending_next_T_26);
  wire               _GEN_9 = (|_pending_next_T_26) | (|_pending_next_T_22);
  wire               _GEN_10 = (|_pending_next_T_22) | (|_pending_next_T_18);
  wire               _GEN_11 = (|_pending_next_T_18) | (|_pending_next_T_14);
  wire               _GEN_12 = (|_pending_next_T_14) | (|_pending_next_T_10);
  wire               _GEN_13 = (|_pending_next_T_10) | (|_pending_next_T_6);
  wire               _GEN_14 = (|_pending_next_T_6) | (|_pending_next_T_2);
  wire               _GEN_15 = _GEN_5 | _GEN_7;
  wire               _GEN_16 = _GEN_6 | _GEN_8;
  wire               _GEN_17 = _GEN_7 | _GEN_9;
  wire               _GEN_18 = _GEN_8 | _GEN_10;
  wire               _GEN_19 = _GEN_9 | _GEN_11;
  wire               _GEN_20 = _GEN_10 | _GEN_12;
  wire               _GEN_21 = _GEN_11 | _GEN_13;
  wire               _GEN_22 = _GEN_12 | _GEN_14;
  wire               _GEN_23 = _GEN_13 | (|_pending_next_T_2);
  wire               _GEN_24 = _GEN_19 | _GEN_23;
  wire               _GEN_25 = _GEN_20 | _GEN_14;
  wire               _GEN_26 = _GEN_21 | (|_pending_next_T_2);
  wire [14:0]        deq_id_lo =
    {~((|_pending_next_T_58) | (|_pending_next_T_54) | _GEN_3 | _GEN_15 | _GEN_24),
     ~((|_pending_next_T_54) | (|_pending_next_T_50) | _GEN_4 | _GEN_16 | _GEN_25),
     ~(_GEN_3 | _GEN_5 | _GEN_17 | _GEN_26),
     ~(_GEN_4 | _GEN_6 | _GEN_18 | _GEN_22),
     ~(_GEN_15 | _GEN_19 | _GEN_23),
     ~(_GEN_16 | _GEN_20 | _GEN_14),
     ~(_GEN_17 | _GEN_21 | (|_pending_next_T_2)),
     ~(_GEN_18 | _GEN_22),
     ~_GEN_24,
     ~_GEN_25,
     ~_GEN_26,
     ~_GEN_22,
     ~_GEN_23,
     ~_GEN_14,
     ~(|_pending_next_T_2)}
    & {|_pending_next_T_62,
       |_pending_next_T_58,
       |_pending_next_T_54,
       |_pending_next_T_50,
       |_pending_next_T_46,
       |_pending_next_T_42,
       |_pending_next_T_38,
       |_pending_next_T_34,
       |_pending_next_T_30,
       |_pending_next_T_26,
       |_pending_next_T_22,
       |_pending_next_T_18,
       |_pending_next_T_14,
       |_pending_next_T_10,
       |_pending_next_T_6};
  wire [6:0]         _deq_id_T_3 = deq_id_lo[14:8] | deq_id_lo[6:0];
  wire [2:0]         _deq_id_T_5 = _deq_id_T_3[6:4] | _deq_id_T_3[2:0];
  always @(posedge clock) begin
    if (_GEN)
      deq_id <=
        {|(deq_id_lo[14:7]),
         |(_deq_id_T_3[6:3]),
         |(_deq_id_T_5[2:1]),
         _deq_id_T_5[2] | _deq_id_T_5[0]};
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        locked = _RANDOM[1'h0][0];
        deq_id = _RANDOM[1'h0][4:1];
        pending_count = _RANDOM[1'h0][6:5];
        pending_count_1 = _RANDOM[1'h0][8:7];
        pending_count_2 = _RANDOM[1'h0][10:9];
        pending_count_3 = _RANDOM[1'h0][12:11];
        pending_count_4 = _RANDOM[1'h0][14:13];
        pending_count_5 = _RANDOM[1'h0][16:15];
        pending_count_6 = _RANDOM[1'h0][18:17];
        pending_count_7 = _RANDOM[1'h0][20:19];
        pending_count_8 = _RANDOM[1'h0][22:21];
        pending_count_9 = _RANDOM[1'h0][24:23];
        pending_count_10 = _RANDOM[1'h0][26:25];
        pending_count_11 = _RANDOM[1'h0][28:27];
        pending_count_12 = _RANDOM[1'h0][30:29];
        pending_count_13 = {_RANDOM[1'h0][31], _RANDOM[1'h1][0]};
        pending_count_14 = _RANDOM[1'h1][2:1];
        pending_count_15 = _RANDOM[1'h1][4:3];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        locked = 1'h0;
        pending_count = 2'h0;
        pending_count_1 = 2'h0;
        pending_count_2 = 2'h0;
        pending_count_3 = 2'h0;
        pending_count_4 = 2'h0;
        pending_count_5 = 2'h0;
        pending_count_6 = 2'h0;
        pending_count_7 = 2'h0;
        pending_count_8 = 2'h0;
        pending_count_9 = 2'h0;
        pending_count_10 = 2'h0;
        pending_count_11 = 2'h0;
        pending_count_12 = 2'h0;
        pending_count_13 = 2'h0;
        pending_count_14 = 2'h0;
        pending_count_15 = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue2_AXI4BundleR_3 qs_queue_0 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_0_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_0 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_0 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_0_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_0_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_1 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_1_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_1 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_1 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_1_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_1_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_2 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_2_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_2 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_2 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_2_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_2_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_3 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_3_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_3 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_3 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_3_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_3_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_4 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_4_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_4 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_4 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_4_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_4_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_5 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_5_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_5 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_5 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_5_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_5_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_6 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_6_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_6 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_6 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_6_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_6_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_7 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_7_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_7 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_7 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_7_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_7_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_8 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_8_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_8 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_8 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_8_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_8_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_9 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_9_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_9 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_9 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_9_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_9_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_10 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_10_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_10 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_10 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_10_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_10_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_11 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_11_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_11 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_11 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_11_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_11_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_12 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_12_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_12 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_12 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_12_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_12_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_13 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_13_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_13 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_13 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_13_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_13_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_14 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_14_io_enq_ready),
    .io_enq_valid     (enq_OH_bools_14 & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (deq_OH_bools_14 & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_14_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_14_io_deq_bits_last)
  );
  Queue2_AXI4BundleR_3 qs_queue_15 (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_qs_queue_15_io_enq_ready),
    .io_enq_valid     ((&auto_out_r_bits_id) & auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     ((&deq_id) & _queue_15_qs_15_deq_ready_T),
    .io_deq_bits_data (_qs_queue_15_io_deq_bits_data),
    .io_deq_bits_last (_qs_queue_15_io_deq_bits_last)
  );
  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = locked;
  assign auto_in_r_bits_data = _GEN_0[deq_id];
  assign auto_in_r_bits_last = nodeIn_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

