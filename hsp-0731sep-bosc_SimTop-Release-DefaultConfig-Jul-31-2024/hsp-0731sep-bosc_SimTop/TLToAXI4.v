// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS
module TLToAXI4(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [30:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
  input         auto_in_a_bits_user_amba_prot_modifiable,
  input         auto_in_a_bits_user_amba_prot_readalloc,
  input         auto_in_a_bits_user_amba_prot_writealloc,
  input         auto_in_a_bits_user_amba_prot_privileged,
  input         auto_in_a_bits_user_amba_prot_secure,
  input         auto_in_a_bits_user_amba_prot_fetch,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_aw_ready,
  output        auto_out_aw_valid,
  output [4:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output [3:0]  auto_out_aw_bits_echo_tl_state_size,
  output [5:0]  auto_out_aw_bits_echo_tl_state_source,
  input         auto_out_w_ready,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
  output        auto_out_b_ready,
  input         auto_out_b_valid,
  input  [4:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [5:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
  output        auto_out_ar_valid,
  output [4:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output [3:0]  auto_out_ar_bits_echo_tl_state_size,
  output [5:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready,
  input         auto_out_r_valid,
  input  [4:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [5:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last
);

  wire             idStall_16;
  wire             idStall_15;
  wire             idStall_14;
  wire             idStall_13;
  wire             idStall_12;
  wire             idStall_11;
  wire             idStall_10;
  wire             idStall_9;
  wire             idStall_8;
  wire             idStall_7;
  wire             idStall_6;
  wire             idStall_5;
  wire             idStall_4;
  wire             idStall_3;
  wire             idStall_2;
  wire             idStall_1;
  reg              count;
  wire             _queue_arw_deq_q_io_enq_ready;
  wire             _queue_arw_deq_q_io_deq_valid;
  wire [4:0]       _queue_arw_deq_q_io_deq_bits_id;
  wire [30:0]      _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]       _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]       _queue_arw_deq_q_io_deq_bits_burst;
  wire             _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]       _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [5:0]       _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire             _queue_arw_deq_q_io_deq_bits_wen;
  wire             _nodeOut_w_deq_q_io_enq_ready;
  wire [63:0][4:0] _GEN =
    '{5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h1,
      5'h0,
      5'h10,
      5'h10,
      5'hF,
      5'hF,
      5'hE,
      5'hE,
      5'hD,
      5'hD,
      5'hC,
      5'hC,
      5'hB,
      5'hB,
      5'hA,
      5'hA,
      5'h9,
      5'h9,
      5'h8,
      5'h8,
      5'h7,
      5'h7,
      5'h6,
      5'h6,
      5'h5,
      5'h5,
      5'h4,
      5'h4,
      5'h3,
      5'h3,
      5'h2,
      5'h2,
      5'h1,
      5'h1};
  wire [11:0]      _r_beats1_decode_T = 12'h1F << auto_in_a_bits_size;
  wire [1:0]       r_beats1 =
    auto_in_a_bits_opcode[2] ? 2'h0 : ~(_r_beats1_decode_T[4:3]);
  reg  [1:0]       r_counter;
  wire             a_first = r_counter == 2'h0;
  wire             a_last = r_counter == 2'h1 | r_beats1 == 2'h0;
  reg              doneAW;
  wire [17:0]      _out_arw_bits_len_T = 18'h7FF << auto_in_a_bits_size;
  wire [63:0]      _GEN_0 =
    {{idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {idStall_1},
     {count},
     {idStall_16},
     {idStall_16},
     {idStall_15},
     {idStall_15},
     {idStall_14},
     {idStall_14},
     {idStall_13},
     {idStall_13},
     {idStall_12},
     {idStall_12},
     {idStall_11},
     {idStall_11},
     {idStall_10},
     {idStall_10},
     {idStall_9},
     {idStall_9},
     {idStall_8},
     {idStall_8},
     {idStall_7},
     {idStall_7},
     {idStall_6},
     {idStall_6},
     {idStall_5},
     {idStall_5},
     {idStall_4},
     {idStall_4},
     {idStall_3},
     {idStall_3},
     {idStall_2},
     {idStall_2},
     {idStall_1},
     {idStall_1}};
  wire             stall = _GEN_0[auto_in_a_bits_source] & a_first;
  wire             _out_w_valid_T_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire             nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _out_w_valid_T_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire             out_arw_valid =
    ~stall & auto_in_a_valid
    & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg              r_holds_d;
  reg  [2:0]       b_delay;
  wire             r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire             nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire             nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire             nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg              r_first;
  reg              r_denied_r;
  wire             r_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire             _inc_T_16 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  reg  [1:0]       count_1;
  reg              write_1;
  wire             inc_1 = _GEN[auto_in_a_bits_source] == 5'h1 & _inc_T_16;
  assign idStall_1 =
    (|count_1) & write_1 != ~(auto_in_a_bits_opcode[2]) | count_1 == 2'h2;
  reg  [1:0]       count_2;
  reg              write_2;
  wire             inc_2 = _GEN[auto_in_a_bits_source] == 5'h2 & _inc_T_16;
  assign idStall_2 =
    (|count_2) & write_2 != ~(auto_in_a_bits_opcode[2]) | count_2 == 2'h2;
  reg  [1:0]       count_3;
  reg              write_3;
  wire             inc_3 = _GEN[auto_in_a_bits_source] == 5'h3 & _inc_T_16;
  assign idStall_3 =
    (|count_3) & write_3 != ~(auto_in_a_bits_opcode[2]) | count_3 == 2'h2;
  reg  [1:0]       count_4;
  reg              write_4;
  wire             inc_4 = _GEN[auto_in_a_bits_source] == 5'h4 & _inc_T_16;
  assign idStall_4 =
    (|count_4) & write_4 != ~(auto_in_a_bits_opcode[2]) | count_4 == 2'h2;
  reg  [1:0]       count_5;
  reg              write_5;
  wire             inc_5 = _GEN[auto_in_a_bits_source] == 5'h5 & _inc_T_16;
  assign idStall_5 =
    (|count_5) & write_5 != ~(auto_in_a_bits_opcode[2]) | count_5 == 2'h2;
  reg  [1:0]       count_6;
  reg              write_6;
  wire             inc_6 = _GEN[auto_in_a_bits_source] == 5'h6 & _inc_T_16;
  assign idStall_6 =
    (|count_6) & write_6 != ~(auto_in_a_bits_opcode[2]) | count_6 == 2'h2;
  reg  [1:0]       count_7;
  reg              write_7;
  wire             inc_7 = _GEN[auto_in_a_bits_source] == 5'h7 & _inc_T_16;
  assign idStall_7 =
    (|count_7) & write_7 != ~(auto_in_a_bits_opcode[2]) | count_7 == 2'h2;
  reg  [1:0]       count_8;
  reg              write_8;
  wire             inc_8 = _GEN[auto_in_a_bits_source] == 5'h8 & _inc_T_16;
  assign idStall_8 =
    (|count_8) & write_8 != ~(auto_in_a_bits_opcode[2]) | count_8 == 2'h2;
  reg  [1:0]       count_9;
  reg              write_9;
  wire             inc_9 = _GEN[auto_in_a_bits_source] == 5'h9 & _inc_T_16;
  assign idStall_9 =
    (|count_9) & write_9 != ~(auto_in_a_bits_opcode[2]) | count_9 == 2'h2;
  reg  [1:0]       count_10;
  reg              write_10;
  wire             inc_10 = _GEN[auto_in_a_bits_source] == 5'hA & _inc_T_16;
  assign idStall_10 =
    (|count_10) & write_10 != ~(auto_in_a_bits_opcode[2]) | count_10 == 2'h2;
  reg  [1:0]       count_11;
  reg              write_11;
  wire             inc_11 = _GEN[auto_in_a_bits_source] == 5'hB & _inc_T_16;
  assign idStall_11 =
    (|count_11) & write_11 != ~(auto_in_a_bits_opcode[2]) | count_11 == 2'h2;
  reg  [1:0]       count_12;
  reg              write_12;
  wire             inc_12 = _GEN[auto_in_a_bits_source] == 5'hC & _inc_T_16;
  assign idStall_12 =
    (|count_12) & write_12 != ~(auto_in_a_bits_opcode[2]) | count_12 == 2'h2;
  reg  [1:0]       count_13;
  reg              write_13;
  wire             inc_13 = _GEN[auto_in_a_bits_source] == 5'hD & _inc_T_16;
  assign idStall_13 =
    (|count_13) & write_13 != ~(auto_in_a_bits_opcode[2]) | count_13 == 2'h2;
  reg  [1:0]       count_14;
  reg              write_14;
  wire             inc_14 = _GEN[auto_in_a_bits_source] == 5'hE & _inc_T_16;
  assign idStall_14 =
    (|count_14) & write_14 != ~(auto_in_a_bits_opcode[2]) | count_14 == 2'h2;
  reg  [1:0]       count_15;
  reg              write_15;
  wire             inc_15 = _GEN[auto_in_a_bits_source] == 5'hF & _inc_T_16;
  assign idStall_15 =
    (|count_15) & write_15 != ~(auto_in_a_bits_opcode[2]) | count_15 == 2'h2;
  reg  [1:0]       count_16;
  reg              write_16;
  wire             inc_16 = _GEN[auto_in_a_bits_source] == 5'h10 & _inc_T_16;
  assign idStall_16 =
    (|count_16) & write_16 != ~(auto_in_a_bits_opcode[2]) | count_16 == 2'h2;
  wire [4:0]       d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire             d_last = ~r_wins | auto_out_r_bits_last;
  wire             _dec_T_33 = auto_in_d_ready & nodeIn_d_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      r_counter <= 2'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count <= 1'h0;
      count_1 <= 2'h0;
      count_2 <= 2'h0;
      count_3 <= 2'h0;
      count_4 <= 2'h0;
      count_5 <= 2'h0;
      count_6 <= 2'h0;
      count_7 <= 2'h0;
      count_8 <= 2'h0;
      count_9 <= 2'h0;
      count_10 <= 2'h0;
      count_11 <= 2'h0;
      count_12 <= 2'h0;
      count_13 <= 2'h0;
      count_14 <= 2'h0;
      count_15 <= 2'h0;
      count_16 <= 2'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first)
          r_counter <= r_beats1;
        else
          r_counter <= 2'(r_counter - 2'h1);
        doneAW <= ~a_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count <=
        1'(1'(count + (_GEN[auto_in_a_bits_source] == 5'h0 & _inc_T_16))
           - (d_sel_shiftAmount == 5'h0 & d_last & _dec_T_33));
      count_1 <=
        2'(2'(count_1 + {1'h0, inc_1})
           - {1'h0, d_sel_shiftAmount == 5'h1 & d_last & _dec_T_33});
      count_2 <=
        2'(2'(count_2 + {1'h0, inc_2})
           - {1'h0, d_sel_shiftAmount == 5'h2 & d_last & _dec_T_33});
      count_3 <=
        2'(2'(count_3 + {1'h0, inc_3})
           - {1'h0, d_sel_shiftAmount == 5'h3 & d_last & _dec_T_33});
      count_4 <=
        2'(2'(count_4 + {1'h0, inc_4})
           - {1'h0, d_sel_shiftAmount == 5'h4 & d_last & _dec_T_33});
      count_5 <=
        2'(2'(count_5 + {1'h0, inc_5})
           - {1'h0, d_sel_shiftAmount == 5'h5 & d_last & _dec_T_33});
      count_6 <=
        2'(2'(count_6 + {1'h0, inc_6})
           - {1'h0, d_sel_shiftAmount == 5'h6 & d_last & _dec_T_33});
      count_7 <=
        2'(2'(count_7 + {1'h0, inc_7})
           - {1'h0, d_sel_shiftAmount == 5'h7 & d_last & _dec_T_33});
      count_8 <=
        2'(2'(count_8 + {1'h0, inc_8})
           - {1'h0, d_sel_shiftAmount == 5'h8 & d_last & _dec_T_33});
      count_9 <=
        2'(2'(count_9 + {1'h0, inc_9})
           - {1'h0, d_sel_shiftAmount == 5'h9 & d_last & _dec_T_33});
      count_10 <=
        2'(2'(count_10 + {1'h0, inc_10})
           - {1'h0, d_sel_shiftAmount == 5'hA & d_last & _dec_T_33});
      count_11 <=
        2'(2'(count_11 + {1'h0, inc_11})
           - {1'h0, d_sel_shiftAmount == 5'hB & d_last & _dec_T_33});
      count_12 <=
        2'(2'(count_12 + {1'h0, inc_12})
           - {1'h0, d_sel_shiftAmount == 5'hC & d_last & _dec_T_33});
      count_13 <=
        2'(2'(count_13 + {1'h0, inc_13})
           - {1'h0, d_sel_shiftAmount == 5'hD & d_last & _dec_T_33});
      count_14 <=
        2'(2'(count_14 + {1'h0, inc_14})
           - {1'h0, d_sel_shiftAmount == 5'hE & d_last & _dec_T_33});
      count_15 <=
        2'(2'(count_15 + {1'h0, inc_15})
           - {1'h0, d_sel_shiftAmount == 5'hF & d_last & _dec_T_33});
      count_16 <=
        2'(2'(count_16 + {1'h0, inc_16})
           - {1'h0, d_sel_shiftAmount == 5'h10 & d_last & _dec_T_33});
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= 3'(b_delay + 3'h1);
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
    if (inc_1)
      write_1 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_2)
      write_2 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_3)
      write_3 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_4)
      write_4 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_5)
      write_5 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_6)
      write_6 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_7)
      write_7 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_8)
      write_8 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_9)
      write_9 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_10)
      write_10 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_11)
      write_11 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_12)
      write_12 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_13)
      write_13 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_14)
      write_14 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_15)
      write_15 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_16)
      write_16 <= ~(auto_in_a_bits_opcode[2]);
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        r_counter = _RANDOM[1'h0][1:0];
        doneAW = _RANDOM[1'h0][2];
        r_holds_d = _RANDOM[1'h0][3];
        b_delay = _RANDOM[1'h0][6:4];
        r_first = _RANDOM[1'h0][7];
        r_denied_r = _RANDOM[1'h0][8];
        count = _RANDOM[1'h0][9];
        count_1 = _RANDOM[1'h0][12:11];
        write_1 = _RANDOM[1'h0][13];
        count_2 = _RANDOM[1'h0][15:14];
        write_2 = _RANDOM[1'h0][16];
        count_3 = _RANDOM[1'h0][18:17];
        write_3 = _RANDOM[1'h0][19];
        count_4 = _RANDOM[1'h0][21:20];
        write_4 = _RANDOM[1'h0][22];
        count_5 = _RANDOM[1'h0][24:23];
        write_5 = _RANDOM[1'h0][25];
        count_6 = _RANDOM[1'h0][27:26];
        write_6 = _RANDOM[1'h0][28];
        count_7 = _RANDOM[1'h0][30:29];
        write_7 = _RANDOM[1'h0][31];
        count_8 = _RANDOM[1'h1][1:0];
        write_8 = _RANDOM[1'h1][2];
        count_9 = _RANDOM[1'h1][4:3];
        write_9 = _RANDOM[1'h1][5];
        count_10 = _RANDOM[1'h1][7:6];
        write_10 = _RANDOM[1'h1][8];
        count_11 = _RANDOM[1'h1][10:9];
        write_11 = _RANDOM[1'h1][11];
        count_12 = _RANDOM[1'h1][13:12];
        write_12 = _RANDOM[1'h1][14];
        count_13 = _RANDOM[1'h1][16:15];
        write_13 = _RANDOM[1'h1][17];
        count_14 = _RANDOM[1'h1][19:18];
        write_14 = _RANDOM[1'h1][20];
        count_15 = _RANDOM[1'h1][22:21];
        write_15 = _RANDOM[1'h1][23];
        count_16 = _RANDOM[1'h1][25:24];
        write_16 = _RANDOM[1'h1][26];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        r_counter = 2'h0;
        doneAW = 1'h0;
        r_holds_d = 1'h0;
        r_first = 1'h1;
        count = 1'h0;
        count_1 = 2'h0;
        count_2 = 2'h0;
        count_3 = 2'h0;
        count_4 = 2'h0;
        count_5 = 2'h0;
        count_6 = 2'h0;
        count_7 = 2'h0;
        count_8 = 2'h0;
        count_9 = 2'h0;
        count_10 = 2'h0;
        count_11 = 2'h0;
        count_12 = 2'h0;
        count_13 = 2'h0;
        count_14 = 2'h0;
        count_15 = 2'h0;
        count_16 = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_AXI4BundleW nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_enq_valid
      (~stall & auto_in_a_valid & ~(auto_in_a_bits_opcode[2]) & _out_w_valid_T_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (a_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue1_AXI4BundleARW queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (_GEN[auto_in_a_bits_source]),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_out_arw_bits_len_T[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 3'h2 ? 3'h3 : auto_in_a_bits_size),
    .io_enq_bits_cache
      ({auto_in_a_bits_user_amba_prot_writealloc,
        auto_in_a_bits_user_amba_prot_readalloc,
        auto_in_a_bits_user_amba_prot_modifiable,
        auto_in_a_bits_user_amba_prot_bufferable}),
    .io_enq_bits_prot
      ({auto_in_a_bits_user_amba_prot_fetch,
        ~auto_in_a_bits_user_amba_prot_secure,
        auto_in_a_bits_user_amba_prot_privileged}),
    .io_enq_bits_echo_tl_state_size   ({1'h0, auto_in_a_bits_size}),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = {2'h0, r_wins};
  assign auto_in_d_bits_size =
    r_wins
      ? auto_out_r_bits_echo_tl_state_size[2:0]
      : auto_out_b_bits_echo_tl_state_size[2:0];
  assign auto_in_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  assign auto_in_d_bits_denied = r_wins ? r_denied : (|auto_out_b_bits_resp);
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = r_wins & ((|auto_out_r_bits_resp) | r_denied);
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

