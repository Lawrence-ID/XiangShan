// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module DummyLLC(
  input          clock,
  input          reset,
  input          auto_axi4_out_aw_ready,
  output         auto_axi4_out_aw_valid,
  output [36:0]  auto_axi4_out_aw_bits_addr,
  output [7:0]   auto_axi4_out_aw_bits_len,
  output [2:0]   auto_axi4_out_aw_bits_size,
  output [3:0]   auto_axi4_out_aw_bits_cache,
  input          auto_axi4_out_w_ready,
  output         auto_axi4_out_w_valid,
  output [255:0] auto_axi4_out_w_bits_data,
  output [31:0]  auto_axi4_out_w_bits_strb,
  output         auto_axi4_out_w_bits_last,
  output         auto_axi4_out_b_ready,
  input          auto_axi4_out_b_valid,
  input          auto_axi4_out_ar_ready,
  output         auto_axi4_out_ar_valid,
  output [36:0]  auto_axi4_out_ar_bits_addr,
  output [7:0]   auto_axi4_out_ar_bits_len,
  output [2:0]   auto_axi4_out_ar_bits_size,
  output [3:0]   auto_axi4_out_ar_bits_cache,
  output         auto_axi4_out_r_ready,
  input          auto_axi4_out_r_valid,
  input  [255:0] auto_axi4_out_r_bits_data,
  input          auto_axi4_out_r_bits_last,
  input          io_rn_0_txsactive,
  output         io_rn_0_rxsactive,
  input          io_rn_0_tx_linkactivereq,
  output         io_rn_0_tx_linkactiveack,
  input          io_rn_0_tx_req_flitpend,
  input          io_rn_0_tx_req_flitv,
  input  [124:0] io_rn_0_tx_req_flit,
  output         io_rn_0_tx_req_lcrdv,
  input          io_rn_0_tx_rsp_flitpend,
  input          io_rn_0_tx_rsp_flitv,
  input  [50:0]  io_rn_0_tx_rsp_flit,
  output         io_rn_0_tx_rsp_lcrdv,
  input          io_rn_0_tx_dat_flitpend,
  input          io_rn_0_tx_dat_flitv,
  input  [348:0] io_rn_0_tx_dat_flit,
  output         io_rn_0_tx_dat_lcrdv,
  output         io_rn_0_rx_linkactivereq,
  input          io_rn_0_rx_linkactiveack,
  output         io_rn_0_rx_rsp_flitpend,
  output         io_rn_0_rx_rsp_flitv,
  output [50:0]  io_rn_0_rx_rsp_flit,
  input          io_rn_0_rx_rsp_lcrdv,
  output         io_rn_0_rx_dat_flitpend,
  output         io_rn_0_rx_dat_flitv,
  output [348:0] io_rn_0_rx_dat_flit,
  input          io_rn_0_rx_dat_lcrdv,
  output         io_rn_0_rx_snp_flitpend,
  output         io_rn_0_rx_snp_flitv,
  output [87:0]  io_rn_0_rx_snp_flit,
  input          io_rn_0_rx_snp_lcrdv
);

  reg          valid;
  wire         _reqArb_io_in_0_ready;
  wire         _reqArb_io_out_valid;
  wire [6:0]   _reqArb_io_out_bits_tgtID;
  wire [7:0]   _reqArb_io_out_bits_txnID;
  wire [5:0]   _reqArb_io_out_bits_opcode;
  wire [2:0]   _reqArb_io_out_bits_size;
  wire [47:0]  _reqArb_io_out_bits_addr;
  wire [1:0]   _reqArb_io_out_bits_order;
  wire         _reqArb_io_out_bits_expCompAck;
  wire         _linkMonitor_io_out_tx_req_valid;
  wire [6:0]   _linkMonitor_io_out_tx_req_bits_tgtID;
  wire [7:0]   _linkMonitor_io_out_tx_req_bits_txnID;
  wire [5:0]   _linkMonitor_io_out_tx_req_bits_opcode;
  wire [2:0]   _linkMonitor_io_out_tx_req_bits_size;
  wire [47:0]  _linkMonitor_io_out_tx_req_bits_addr;
  wire [1:0]   _linkMonitor_io_out_tx_req_bits_order;
  wire         _linkMonitor_io_out_tx_req_bits_expCompAck;
  wire         _linkMonitor_io_out_tx_rsp_valid;
  wire [3:0]   _linkMonitor_io_out_tx_rsp_bits_opcode;
  wire         _linkMonitor_io_out_tx_dat_valid;
  wire [2:0]   _linkMonitor_io_out_tx_dat_bits_opcode;
  wire [2:0]   _linkMonitor_io_out_tx_dat_bits_resp;
  wire [1:0]   _linkMonitor_io_out_tx_dat_bits_dataID;
  wire [31:0]  _linkMonitor_io_out_tx_dat_bits_be;
  wire [255:0] _linkMonitor_io_out_tx_dat_bits_data;
  wire         _linkMonitor_io_out_rx_rsp_ready;
  wire         _linkMonitor_io_out_rx_dat_ready;
  wire         _linkMonitor_io_out_rx_snp_ready;
  reg          s_ar;
  reg          w_r;
  reg          s_aw;
  reg          s_w;
  reg          w_b;
  reg          s_snp_0;
  reg          w_snpresp_0;
  reg          s_readreceipt;
  reg          s_comp;
  reg          s_compdata;
  reg          w_compack;
  reg          w_wrdata;
  reg  [255:0] releaseBuf_0;
  reg  [255:0] releaseBuf_1;
  reg  [255:0] refillBuf_0;
  reg  [255:0] refillBuf_1;
  reg          wBeatCnt;
  reg          rBeatCnt;
  reg          snpBeatCnt_0;
  reg          releaseBeatCnt;
  reg          refillBeatCnt;
  reg          snpGotData;
  reg          snpGotDirty;
  reg  [31:0]  be;
  reg  [6:0]   req_tgtID;
  reg  [7:0]   req_txnID;
  reg  [5:0]   req_opcode;
  reg  [2:0]   req_size;
  reg  [47:0]  req_addr;
  wire         alloc = ~valid & _reqArb_io_out_valid;
  wire         axi4nodeOut_w_valid = ~s_w & w_wrdata;
  wire         rn_0_rx_rsp_valid = ~s_comp & w_snpresp_0 | ~s_readreceipt;
  wire         rn_0_rx_dat_valid = ~s_compdata & w_snpresp_0 & w_r;
  wire         isReadNoSnp_1 = req_opcode == 6'h4;
  wire         _rn_0_rx_rsp_bits_resp_T_4 = req_opcode == 6'h1D;
  wire         _rn_0_rx_rsp_bits_resp_T_5 = req_opcode == 6'h1C;
  wire         isWriteNoSnp_1 = _rn_0_rx_rsp_bits_resp_T_4 | _rn_0_rx_rsp_bits_resp_T_5;
  wire         axi4nodeOut_w_bits_last = isWriteNoSnp_1 | wBeatCnt;
  wire         _rn_0_rx_dat_bits_resp_T = req_opcode == 6'h7;
  wire         _rn_0_rx_rsp_bits_resp_T_1 = req_opcode == 6'hC;
  wire         _GEN = ~w_r & auto_axi4_out_r_valid;
  wire         _GEN_0 = ~w_compack & _linkMonitor_io_out_tx_rsp_valid;
  wire         _GEN_1 = _GEN_0 & _linkMonitor_io_out_tx_rsp_bits_opcode == 4'h1;
  wire         _GEN_2 = ~w_wrdata & _linkMonitor_io_out_tx_dat_valid;
  wire         _GEN_3 = _GEN_2 & _linkMonitor_io_out_tx_dat_bits_opcode == 3'h1;
  wire         _GEN_4 = _GEN_2 & _linkMonitor_io_out_tx_dat_bits_opcode == 3'h2;
  wire         _GEN_5 = _GEN_2 & _linkMonitor_io_out_tx_dat_bits_opcode == 3'h3;
  wire         chosenOH_0 = _reqArb_io_in_0_ready & _linkMonitor_io_out_tx_req_valid;
  wire         isSnoopableRead =
    _reqArb_io_out_bits_opcode == 6'h7 | _reqArb_io_out_bits_opcode == 6'h26;
  wire         isDataless = _reqArb_io_out_bits_opcode == 6'hC;
  wire         isReadNoSnp = _reqArb_io_out_bits_opcode == 6'h4;
  wire         isWrite =
    _reqArb_io_out_bits_opcode == 6'h1B | _reqArb_io_out_bits_opcode == 6'h1D
    | _reqArb_io_out_bits_opcode == 6'h1C;
  wire         _GEN_6 = isSnoopableRead | isDataless;
  wire         _GEN_7 = alloc & (isSnoopableRead | isReadNoSnp);
  wire         _GEN_8 = alloc & isWrite;
  wire         _GEN_9 = alloc & _GEN_6;
  wire         _GEN_10 = auto_axi4_out_w_ready & axi4nodeOut_w_valid;
  wire         _GEN_11 = _linkMonitor_io_out_rx_rsp_ready & rn_0_rx_rsp_valid;
  wire         _GEN_12 = _linkMonitor_io_out_rx_dat_ready & rn_0_rx_dat_valid;
  wire         _GEN_13 =
    _GEN_1 | ~(_GEN_3 & snpBeatCnt_0 & _linkMonitor_io_out_tx_dat_bits_resp == 3'h5);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s_ar <= 1'h1;
      w_r <= 1'h1;
      s_aw <= 1'h1;
      s_w <= 1'h1;
      w_b <= 1'h1;
      s_snp_0 <= 1'h1;
      w_snpresp_0 <= 1'h1;
      s_readreceipt <= 1'h1;
      s_comp <= 1'h1;
      s_compdata <= 1'h1;
      w_compack <= 1'h1;
      w_wrdata <= 1'h1;
      wBeatCnt <= 1'h0;
      rBeatCnt <= 1'h0;
      snpBeatCnt_0 <= 1'h0;
      releaseBeatCnt <= 1'h0;
      refillBeatCnt <= 1'h0;
      snpGotData <= 1'h0;
      snpGotDirty <= 1'h0;
      valid <= 1'h0;
    end
    else begin
      s_ar <= auto_axi4_out_ar_ready & ~s_ar | ~_GEN_7 & s_ar;
      w_r <= _GEN & auto_axi4_out_r_bits_last | ~_GEN_7 & w_r;
      s_aw <= _GEN_13 & (auto_axi4_out_aw_ready & ~s_aw | ~_GEN_8 & s_aw);
      s_w <= _GEN_13 & (_GEN_10 & axi4nodeOut_w_bits_last | ~_GEN_8 & s_w);
      w_b <= _GEN_13 & (~w_b & auto_axi4_out_b_valid | ~_GEN_8 & w_b);
      s_snp_0 <=
        _linkMonitor_io_out_rx_snp_ready & ~s_snp_0 | (_GEN_9 ? chosenOH_0 : s_snp_0);
      w_snpresp_0 <= _GEN_1 | _GEN_3 & snpBeatCnt_0 | (_GEN_9 ? chosenOH_0 : w_snpresp_0);
      s_readreceipt <=
        _GEN_11 | ~(alloc & isReadNoSnp & (|_reqArb_io_out_bits_order)) & s_readreceipt;
      s_comp <=
        _GEN_11 | ~(alloc & (isDataless | isWrite | _reqArb_io_out_bits_opcode == 6'hD))
        & s_comp;
      s_compdata <= _GEN_12 & (isReadNoSnp_1 | refillBeatCnt) | ~_GEN_7 & s_compdata;
      w_compack <=
        _GEN_0 & _linkMonitor_io_out_tx_rsp_bits_opcode == 4'h2
        | ~(alloc & (_GEN_6 | isReadNoSnp & _reqArb_io_out_bits_expCompAck)) & w_compack;
      w_wrdata <= _GEN_5 | _GEN_4 & releaseBeatCnt | ~_GEN_8 & w_wrdata;
      wBeatCnt <= _GEN_10 ? 1'(wBeatCnt - 1'h1) : ~alloc & wBeatCnt;
      rBeatCnt <= _GEN ? 1'(rBeatCnt - 1'h1) : ~alloc & rBeatCnt;
      snpBeatCnt_0 <= _GEN_1 | ~_GEN_3 ? ~alloc & snpBeatCnt_0 : 1'(snpBeatCnt_0 - 1'h1);
      releaseBeatCnt <= _GEN_4 ? 1'(releaseBeatCnt - 1'h1) : ~alloc & releaseBeatCnt;
      refillBeatCnt <= _GEN_12 ? 1'(refillBeatCnt - 1'h1) : ~alloc & refillBeatCnt;
      snpGotData <= ~_GEN_1 & _GEN_3 | ~alloc & snpGotData;
      snpGotDirty <=
        ~_GEN_1 & _GEN_3 & _linkMonitor_io_out_tx_dat_bits_resp[2] | ~alloc & snpGotDirty;
      valid <=
        alloc
        | ~(valid & s_ar & s_aw & s_w & s_snp_0 & s_comp & s_compdata & s_readreceipt
            & w_r & w_b & w_snpresp_0 & w_compack & w_wrdata) & valid;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN_5 | _GEN_4 & ~(_linkMonitor_io_out_tx_dat_bits_dataID[1])
        | ~(_GEN_1 | ~(_GEN_3 & ~(_linkMonitor_io_out_tx_dat_bits_dataID[1]))))
      releaseBuf_0 <= _linkMonitor_io_out_tx_dat_bits_data;
    if (_GEN_4 & _linkMonitor_io_out_tx_dat_bits_dataID[1]
        | ~(_GEN_1 | ~(_GEN_3 & _linkMonitor_io_out_tx_dat_bits_dataID[1])))
      releaseBuf_1 <= _linkMonitor_io_out_tx_dat_bits_data;
    if (_GEN & ~rBeatCnt)
      refillBuf_0 <= auto_axi4_out_r_bits_data;
    if (_GEN & rBeatCnt)
      refillBuf_1 <= auto_axi4_out_r_bits_data;
    if (_GEN_5)
      be <= _linkMonitor_io_out_tx_dat_bits_be;
    if (alloc) begin
      req_tgtID <= _reqArb_io_out_bits_tgtID;
      req_txnID <= _reqArb_io_out_bits_txnID;
      req_opcode <= _reqArb_io_out_bits_opcode;
      req_size <= _reqArb_io_out_bits_size;
      req_addr <= _reqArb_io_out_bits_addr;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:36];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h25; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s_ar = _RANDOM[6'h0][0];
        w_r = _RANDOM[6'h0][1];
        s_aw = _RANDOM[6'h0][2];
        s_w = _RANDOM[6'h0][3];
        w_b = _RANDOM[6'h0][4];
        s_snp_0 = _RANDOM[6'h0][5];
        w_snpresp_0 = _RANDOM[6'h0][6];
        s_readreceipt = _RANDOM[6'h0][7];
        s_comp = _RANDOM[6'h0][8];
        s_compdata = _RANDOM[6'h0][9];
        w_compack = _RANDOM[6'h0][10];
        w_wrdata = _RANDOM[6'h0][11];
        releaseBuf_0 =
          {_RANDOM[6'h0][31:12],
           _RANDOM[6'h1],
           _RANDOM[6'h2],
           _RANDOM[6'h3],
           _RANDOM[6'h4],
           _RANDOM[6'h5],
           _RANDOM[6'h6],
           _RANDOM[6'h7],
           _RANDOM[6'h8][11:0]};
        releaseBuf_1 =
          {_RANDOM[6'h8][31:12],
           _RANDOM[6'h9],
           _RANDOM[6'hA],
           _RANDOM[6'hB],
           _RANDOM[6'hC],
           _RANDOM[6'hD],
           _RANDOM[6'hE],
           _RANDOM[6'hF],
           _RANDOM[6'h10][11:0]};
        refillBuf_0 =
          {_RANDOM[6'h10][31:12],
           _RANDOM[6'h11],
           _RANDOM[6'h12],
           _RANDOM[6'h13],
           _RANDOM[6'h14],
           _RANDOM[6'h15],
           _RANDOM[6'h16],
           _RANDOM[6'h17],
           _RANDOM[6'h18][11:0]};
        refillBuf_1 =
          {_RANDOM[6'h18][31:12],
           _RANDOM[6'h19],
           _RANDOM[6'h1A],
           _RANDOM[6'h1B],
           _RANDOM[6'h1C],
           _RANDOM[6'h1D],
           _RANDOM[6'h1E],
           _RANDOM[6'h1F],
           _RANDOM[6'h20][11:0]};
        wBeatCnt = _RANDOM[6'h20][12];
        rBeatCnt = _RANDOM[6'h20][13];
        snpBeatCnt_0 = _RANDOM[6'h20][14];
        releaseBeatCnt = _RANDOM[6'h20][15];
        refillBeatCnt = _RANDOM[6'h20][16];
        snpGotData = _RANDOM[6'h20][17];
        snpGotDirty = _RANDOM[6'h20][18];
        be = {_RANDOM[6'h20][31:19], _RANDOM[6'h21][18:0]};
        valid = _RANDOM[6'h21][19];
        req_tgtID = _RANDOM[6'h21][30:24];
        req_txnID = _RANDOM[6'h22][13:6];
        req_opcode = {_RANDOM[6'h22][31:30], _RANDOM[6'h23][3:0]};
        req_size = _RANDOM[6'h23][6:4];
        req_addr = {_RANDOM[6'h23][31:7], _RANDOM[6'h24][22:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s_ar = 1'h1;
        w_r = 1'h1;
        s_aw = 1'h1;
        s_w = 1'h1;
        w_b = 1'h1;
        s_snp_0 = 1'h1;
        w_snpresp_0 = 1'h1;
        s_readreceipt = 1'h1;
        s_comp = 1'h1;
        s_compdata = 1'h1;
        w_compack = 1'h1;
        w_wrdata = 1'h1;
        wBeatCnt = 1'h0;
        rBeatCnt = 1'h0;
        snpBeatCnt_0 = 1'h0;
        releaseBeatCnt = 1'h0;
        refillBeatCnt = 1'h0;
        snpGotData = 1'h0;
        snpGotDirty = 1'h0;
        valid = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ReceiverLinkMonitor linkMonitor (
    .clock                         (clock),
    .reset                         (reset),
    .io_in_txsactive               (io_rn_0_txsactive),
    .io_in_rxsactive               (io_rn_0_rxsactive),
    .io_in_tx_linkactivereq        (io_rn_0_tx_linkactivereq),
    .io_in_tx_linkactiveack        (io_rn_0_tx_linkactiveack),
    .io_in_tx_req_flitpend         (io_rn_0_tx_req_flitpend),
    .io_in_tx_req_flitv            (io_rn_0_tx_req_flitv),
    .io_in_tx_req_flit             (io_rn_0_tx_req_flit),
    .io_in_tx_req_lcrdv            (io_rn_0_tx_req_lcrdv),
    .io_in_tx_rsp_flitpend         (io_rn_0_tx_rsp_flitpend),
    .io_in_tx_rsp_flitv            (io_rn_0_tx_rsp_flitv),
    .io_in_tx_rsp_flit             (io_rn_0_tx_rsp_flit),
    .io_in_tx_rsp_lcrdv            (io_rn_0_tx_rsp_lcrdv),
    .io_in_tx_dat_flitpend         (io_rn_0_tx_dat_flitpend),
    .io_in_tx_dat_flitv            (io_rn_0_tx_dat_flitv),
    .io_in_tx_dat_flit             (io_rn_0_tx_dat_flit),
    .io_in_tx_dat_lcrdv            (io_rn_0_tx_dat_lcrdv),
    .io_in_rx_linkactivereq        (io_rn_0_rx_linkactivereq),
    .io_in_rx_linkactiveack        (io_rn_0_rx_linkactiveack),
    .io_in_rx_rsp_flitpend         (io_rn_0_rx_rsp_flitpend),
    .io_in_rx_rsp_flitv            (io_rn_0_rx_rsp_flitv),
    .io_in_rx_rsp_flit             (io_rn_0_rx_rsp_flit),
    .io_in_rx_rsp_lcrdv            (io_rn_0_rx_rsp_lcrdv),
    .io_in_rx_dat_flitpend         (io_rn_0_rx_dat_flitpend),
    .io_in_rx_dat_flitv            (io_rn_0_rx_dat_flitv),
    .io_in_rx_dat_flit             (io_rn_0_rx_dat_flit),
    .io_in_rx_dat_lcrdv            (io_rn_0_rx_dat_lcrdv),
    .io_in_rx_snp_flitpend         (io_rn_0_rx_snp_flitpend),
    .io_in_rx_snp_flitv            (io_rn_0_rx_snp_flitv),
    .io_in_rx_snp_flit             (io_rn_0_rx_snp_flit),
    .io_in_rx_snp_lcrdv            (io_rn_0_rx_snp_lcrdv),
    .io_out_tx_req_ready           (_reqArb_io_in_0_ready),
    .io_out_tx_req_valid           (_linkMonitor_io_out_tx_req_valid),
    .io_out_tx_req_bits_tgtID      (_linkMonitor_io_out_tx_req_bits_tgtID),
    .io_out_tx_req_bits_txnID      (_linkMonitor_io_out_tx_req_bits_txnID),
    .io_out_tx_req_bits_opcode     (_linkMonitor_io_out_tx_req_bits_opcode),
    .io_out_tx_req_bits_size       (_linkMonitor_io_out_tx_req_bits_size),
    .io_out_tx_req_bits_addr       (_linkMonitor_io_out_tx_req_bits_addr),
    .io_out_tx_req_bits_order      (_linkMonitor_io_out_tx_req_bits_order),
    .io_out_tx_req_bits_expCompAck (_linkMonitor_io_out_tx_req_bits_expCompAck),
    .io_out_tx_rsp_ready           (~w_compack),
    .io_out_tx_rsp_valid           (_linkMonitor_io_out_tx_rsp_valid),
    .io_out_tx_rsp_bits_opcode     (_linkMonitor_io_out_tx_rsp_bits_opcode),
    .io_out_tx_dat_ready           (~w_wrdata),
    .io_out_tx_dat_valid           (_linkMonitor_io_out_tx_dat_valid),
    .io_out_tx_dat_bits_opcode     (_linkMonitor_io_out_tx_dat_bits_opcode),
    .io_out_tx_dat_bits_resp       (_linkMonitor_io_out_tx_dat_bits_resp),
    .io_out_tx_dat_bits_dataID     (_linkMonitor_io_out_tx_dat_bits_dataID),
    .io_out_tx_dat_bits_be         (_linkMonitor_io_out_tx_dat_bits_be),
    .io_out_tx_dat_bits_data       (_linkMonitor_io_out_tx_dat_bits_data),
    .io_out_rx_rsp_ready           (_linkMonitor_io_out_rx_rsp_ready),
    .io_out_rx_rsp_valid           (rn_0_rx_rsp_valid),
    .io_out_rx_rsp_bits_srcID      (req_tgtID),
    .io_out_rx_rsp_bits_txnID      (req_txnID),
    .io_out_rx_rsp_bits_opcode
      (s_readreceipt
         ? {1'h0, _rn_0_rx_rsp_bits_resp_T_1 | req_opcode == 6'hD, 2'h0}
           | (req_opcode == 6'h1B | _rn_0_rx_rsp_bits_resp_T_4
              | _rn_0_rx_rsp_bits_resp_T_5
                ? 4'h5
                : 4'h0)
         : 4'h8),
    .io_out_rx_rsp_bits_resp
      (s_readreceipt ? {1'h0, _rn_0_rx_rsp_bits_resp_T_1, 1'h0} : 3'h0),
    .io_out_rx_dat_ready           (_linkMonitor_io_out_rx_dat_ready),
    .io_out_rx_dat_valid           (rn_0_rx_dat_valid),
    .io_out_rx_dat_bits_srcID      (req_tgtID),
    .io_out_rx_dat_bits_txnID      (req_txnID),
    .io_out_rx_dat_bits_homeNID    (req_tgtID),
    .io_out_rx_dat_bits_resp
      (_rn_0_rx_dat_bits_resp_T ? {snpGotDirty, 2'h2} : {2'h0, ~isReadNoSnp_1}),
    .io_out_rx_dat_bits_dataID     ({refillBeatCnt, 1'h0}),
    .io_out_rx_dat_bits_data
      (refillBeatCnt
         ? (snpGotData ? releaseBuf_1 : refillBuf_1)
         : snpGotData ? releaseBuf_0 : refillBuf_0),
    .io_out_rx_snp_ready           (_linkMonitor_io_out_rx_snp_ready),
    .io_out_rx_snp_valid           (~s_snp_0),
    .io_out_rx_snp_bits_srcID      (req_tgtID),
    .io_out_rx_snp_bits_opcode
      ((_rn_0_rx_dat_bits_resp_T ? 5'h7 : 5'h0) | {2'h0, req_opcode == 6'h26, 2'h0}
       | (_rn_0_rx_rsp_bits_resp_T_1 ? 5'hA : 5'h0)),
    .io_out_rx_snp_bits_addr       (req_addr[47:3])
  );
  RRArbiter_13 reqArb (
    .io_in_0_ready           (_reqArb_io_in_0_ready),
    .io_in_0_valid           (_linkMonitor_io_out_tx_req_valid),
    .io_in_0_bits_tgtID      (_linkMonitor_io_out_tx_req_bits_tgtID),
    .io_in_0_bits_txnID      (_linkMonitor_io_out_tx_req_bits_txnID),
    .io_in_0_bits_opcode     (_linkMonitor_io_out_tx_req_bits_opcode),
    .io_in_0_bits_size       (_linkMonitor_io_out_tx_req_bits_size),
    .io_in_0_bits_addr       (_linkMonitor_io_out_tx_req_bits_addr),
    .io_in_0_bits_order      (_linkMonitor_io_out_tx_req_bits_order),
    .io_in_0_bits_expCompAck (_linkMonitor_io_out_tx_req_bits_expCompAck),
    .io_out_ready            (~valid),
    .io_out_valid            (_reqArb_io_out_valid),
    .io_out_bits_tgtID       (_reqArb_io_out_bits_tgtID),
    .io_out_bits_txnID       (_reqArb_io_out_bits_txnID),
    .io_out_bits_opcode      (_reqArb_io_out_bits_opcode),
    .io_out_bits_size        (_reqArb_io_out_bits_size),
    .io_out_bits_addr        (_reqArb_io_out_bits_addr),
    .io_out_bits_order       (_reqArb_io_out_bits_order),
    .io_out_bits_expCompAck  (_reqArb_io_out_bits_expCompAck)
  );
  assign auto_axi4_out_aw_valid = ~s_aw;
  assign auto_axi4_out_aw_bits_addr = req_addr[36:0];
  assign auto_axi4_out_aw_bits_len = {7'h0, ~isWriteNoSnp_1};
  assign auto_axi4_out_aw_bits_size = isWriteNoSnp_1 ? req_size : 3'h5;
  assign auto_axi4_out_aw_bits_cache = isWriteNoSnp_1 ? 4'h0 : 4'hF;
  assign auto_axi4_out_w_valid = axi4nodeOut_w_valid;
  assign auto_axi4_out_w_bits_data = wBeatCnt ? releaseBuf_1 : releaseBuf_0;
  assign auto_axi4_out_w_bits_strb = isWriteNoSnp_1 ? be : 32'hFFFFFFFF;
  assign auto_axi4_out_w_bits_last = axi4nodeOut_w_bits_last;
  assign auto_axi4_out_b_ready = ~w_b;
  assign auto_axi4_out_ar_valid = ~s_ar;
  assign auto_axi4_out_ar_bits_addr = req_addr[36:0];
  assign auto_axi4_out_ar_bits_len = {7'h0, ~isReadNoSnp_1};
  assign auto_axi4_out_ar_bits_size = isReadNoSnp_1 ? req_size : 3'h5;
  assign auto_axi4_out_ar_bits_cache = isReadNoSnp_1 ? 4'h0 : 4'hF;
  assign auto_axi4_out_r_ready = ~w_r;
endmodule

