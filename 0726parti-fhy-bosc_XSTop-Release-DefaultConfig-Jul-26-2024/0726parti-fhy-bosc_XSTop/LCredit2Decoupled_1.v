// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module LCredit2Decoupled_1(
  input         clock,
  input         reset,
  input         io_in_flitpend,
  input         io_in_flitv,
  input  [50:0] io_in_flit,
  output        io_in_lcrdv,
  input         io_out_ready,
  output        io_out_valid,
  output [3:0]  io_out_bits_qos,
  output [6:0]  io_out_bits_tgtID,
  output [6:0]  io_out_bits_srcID,
  output [7:0]  io_out_bits_txnID,
  output [3:0]  io_out_bits_opcode,
  output [1:0]  io_out_bits_respErr,
  output [2:0]  io_out_bits_resp,
  output [2:0]  io_out_bits_fwdState,
  output [7:0]  io_out_bits_dbID,
  output [3:0]  io_out_bits_pCrdType,
  output        io_out_bits_traceTag,
  input  [1:0]  io_state_state,
  output        io_reclaimLCredit
);

  wire       _queue_io_deq_valid;
  wire [3:0] _queue_io_deq_bits_opcode;
  wire [2:0] _queue_io_count;
  reg  [2:0] lcreditInflight;
  reg  [2:0] lcreditPool;
  wire       lcreditOut = lcreditPool > _queue_io_count & io_state_state == 2'h2;
  reg        accept_REG;
  wire       accept = (|lcreditInflight) & io_in_flitv & accept_REG;
  wire       _GEN = _queue_io_deq_valid & _queue_io_deq_bits_opcode == 4'h0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      lcreditInflight <= 3'h0;
      lcreditPool <= 3'h4;
    end
    else if (lcreditOut) begin
      if (~accept) begin
        lcreditInflight <= 3'(lcreditInflight + 3'h1);
        lcreditPool <= 3'(lcreditPool - 3'h1);
      end
    end
    else if (accept) begin
      lcreditInflight <= 3'(lcreditInflight - 3'h1);
      lcreditPool <= 3'(lcreditPool + 3'h1);
    end
  end // always @(posedge, posedge)
  always @(posedge clock)
    accept_REG <= io_in_flitpend;
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        lcreditInflight = _RANDOM[/*Zero width*/ 1'b0][2:0];
        lcreditPool = _RANDOM[/*Zero width*/ 1'b0][5:3];
        accept_REG = _RANDOM[/*Zero width*/ 1'b0][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        lcreditInflight = 3'h0;
        lcreditPool = 3'h4;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue4_CHIRSP queue (
    .clock                (clock),
    .reset                (reset),
    .io_enq_valid         (accept),
    .io_enq_bits_qos      (io_in_flit[3:0]),
    .io_enq_bits_tgtID    (io_in_flit[10:4]),
    .io_enq_bits_srcID    (io_in_flit[17:11]),
    .io_enq_bits_txnID    (io_in_flit[25:18]),
    .io_enq_bits_opcode   (io_in_flit[29:26]),
    .io_enq_bits_respErr  (io_in_flit[31:30]),
    .io_enq_bits_resp     (io_in_flit[34:32]),
    .io_enq_bits_fwdState (io_in_flit[37:35]),
    .io_enq_bits_dbID     (io_in_flit[45:38]),
    .io_enq_bits_pCrdType (io_in_flit[49:46]),
    .io_enq_bits_traceTag (io_in_flit[50]),
    .io_deq_ready         (_GEN | io_out_ready),
    .io_deq_valid         (_queue_io_deq_valid),
    .io_deq_bits_qos      (io_out_bits_qos),
    .io_deq_bits_tgtID    (io_out_bits_tgtID),
    .io_deq_bits_srcID    (io_out_bits_srcID),
    .io_deq_bits_txnID    (io_out_bits_txnID),
    .io_deq_bits_opcode   (_queue_io_deq_bits_opcode),
    .io_deq_bits_respErr  (io_out_bits_respErr),
    .io_deq_bits_resp     (io_out_bits_resp),
    .io_deq_bits_fwdState (io_out_bits_fwdState),
    .io_deq_bits_dbID     (io_out_bits_dbID),
    .io_deq_bits_pCrdType (io_out_bits_pCrdType),
    .io_deq_bits_traceTag (io_out_bits_traceTag),
    .io_count             (_queue_io_count)
  );
  assign io_in_lcrdv = lcreditOut;
  assign io_out_valid = ~_GEN & _queue_io_deq_valid;
  assign io_out_bits_opcode = _queue_io_deq_bits_opcode;
  assign io_reclaimLCredit = lcreditInflight == 3'h0;
endmodule

