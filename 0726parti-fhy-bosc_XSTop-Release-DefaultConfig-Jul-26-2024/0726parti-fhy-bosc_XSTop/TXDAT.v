// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module TXDAT(
  input          clock,
  input          reset,
  output         io_in_ready,
  input          io_in_valid,
  input  [2:0]   io_in_bits_task_channel,
  input  [2:0]   io_in_bits_task_txChannel,
  input  [8:0]   io_in_bits_task_set,
  input  [18:0]  io_in_bits_task_tag,
  input  [5:0]   io_in_bits_task_off,
  input          io_in_bits_task_alias,
  input  [32:0]  io_in_bits_task_vaddr,
  input          io_in_bits_task_isKeyword,
  input  [2:0]   io_in_bits_task_opcode,
  input  [2:0]   io_in_bits_task_param,
  input  [2:0]   io_in_bits_task_size,
  input  [6:0]   io_in_bits_task_sourceId,
  input  [1:0]   io_in_bits_task_bufIdx,
  input          io_in_bits_task_needProbeAckData,
  input          io_in_bits_task_mshrTask,
  input  [7:0]   io_in_bits_task_mshrId,
  input          io_in_bits_task_aliasTask,
  input          io_in_bits_task_useProbeData,
  input          io_in_bits_task_mshrRetry,
  input          io_in_bits_task_fromL2pft,
  input          io_in_bits_task_needHint,
  input          io_in_bits_task_dirty,
  input  [2:0]   io_in_bits_task_way,
  input          io_in_bits_task_meta_dirty,
  input  [1:0]   io_in_bits_task_meta_state,
  input          io_in_bits_task_meta_clients,
  input          io_in_bits_task_meta_alias,
  input          io_in_bits_task_meta_prefetch,
  input  [2:0]   io_in_bits_task_meta_prefetchSrc,
  input          io_in_bits_task_meta_accessed,
  input          io_in_bits_task_metaWen,
  input          io_in_bits_task_tagWen,
  input          io_in_bits_task_dsWen,
  input  [7:0]   io_in_bits_task_wayMask,
  input          io_in_bits_task_replTask,
  input  [3:0]   io_in_bits_task_reqSource,
  input          io_in_bits_task_mergeA,
  input  [5:0]   io_in_bits_task_aMergeTask_off,
  input          io_in_bits_task_aMergeTask_alias,
  input  [32:0]  io_in_bits_task_aMergeTask_vaddr,
  input          io_in_bits_task_aMergeTask_isKeyword,
  input  [2:0]   io_in_bits_task_aMergeTask_opcode,
  input  [2:0]   io_in_bits_task_aMergeTask_param,
  input  [6:0]   io_in_bits_task_aMergeTask_sourceId,
  input          io_in_bits_task_aMergeTask_meta_dirty,
  input  [1:0]   io_in_bits_task_aMergeTask_meta_state,
  input          io_in_bits_task_aMergeTask_meta_clients,
  input          io_in_bits_task_aMergeTask_meta_alias,
  input          io_in_bits_task_aMergeTask_meta_prefetch,
  input  [2:0]   io_in_bits_task_aMergeTask_meta_prefetchSrc,
  input          io_in_bits_task_aMergeTask_meta_accessed,
  input          io_in_bits_task_snpHitRelease,
  input          io_in_bits_task_snpHitReleaseWithData,
  input  [7:0]   io_in_bits_task_snpHitReleaseIdx,
  input  [6:0]   io_in_bits_task_tgtID,
  input  [6:0]   io_in_bits_task_srcID,
  input  [7:0]   io_in_bits_task_txnID,
  input  [6:0]   io_in_bits_task_homeNID,
  input  [7:0]   io_in_bits_task_dbID,
  input  [6:0]   io_in_bits_task_fwdNID,
  input  [7:0]   io_in_bits_task_fwdTxnID,
  input  [5:0]   io_in_bits_task_chiOpcode,
  input  [2:0]   io_in_bits_task_resp,
  input  [2:0]   io_in_bits_task_fwdState,
  input  [3:0]   io_in_bits_task_pCrdType,
  input          io_in_bits_task_retToSrc,
  input          io_in_bits_task_expCompAck,
  input          io_in_bits_task_allowRetry,
  input          io_in_bits_task_memAttr_allocate,
  input          io_in_bits_task_memAttr_cacheable,
  input          io_in_bits_task_memAttr_device,
  input          io_in_bits_task_memAttr_ewa,
  input  [511:0] io_in_bits_data_data,
  input          io_out_ready,
  output         io_out_valid,
  output [6:0]   io_out_bits_tgtID,
  output [7:0]   io_out_bits_txnID,
  output [6:0]   io_out_bits_homeNID,
  output [2:0]   io_out_bits_opcode,
  output [2:0]   io_out_bits_resp,
  output [2:0]   io_out_bits_fwdState,
  output [7:0]   io_out_bits_dbID,
  output [1:0]   io_out_bits_dataID,
  output [255:0] io_out_bits_data,
  input          io_pipeStatusVec_1_valid,
  input  [2:0]   io_pipeStatusVec_1_bits_channel,
  input  [2:0]   io_pipeStatusVec_1_bits_txChannel,
  input          io_pipeStatusVec_1_bits_mshrTask,
  input          io_pipeStatusVec_2_valid,
  input  [2:0]   io_pipeStatusVec_2_bits_channel,
  input  [2:0]   io_pipeStatusVec_2_bits_txChannel,
  input          io_pipeStatusVec_2_bits_mshrTask,
  input          io_pipeStatusVec_3_valid,
  input  [2:0]   io_pipeStatusVec_3_bits_channel,
  input  [2:0]   io_pipeStatusVec_3_bits_txChannel,
  input          io_pipeStatusVec_3_bits_mshrTask,
  input          io_pipeStatusVec_4_valid,
  input  [2:0]   io_pipeStatusVec_4_bits_channel,
  input  [2:0]   io_pipeStatusVec_4_bits_txChannel,
  input          io_pipeStatusVec_4_bits_mshrTask,
  output         io_toReqArb_blockMSHRReqEntrance,
  output         io_toReqArb_blockSinkBReqEntrance
);

  wire [1:0]   beatsOH;
  wire         _queue_io_deq_valid;
  wire [6:0]   _queue_io_deq_bits_task_tgtID;
  wire [7:0]   _queue_io_deq_bits_task_txnID;
  wire [6:0]   _queue_io_deq_bits_task_homeNID;
  wire [7:0]   _queue_io_deq_bits_task_dbID;
  wire [5:0]   _queue_io_deq_bits_task_chiOpcode;
  wire [2:0]   _queue_io_deq_bits_task_resp;
  wire [2:0]   _queue_io_deq_bits_task_fwdState;
  wire [511:0] _queue_io_deq_bits_data_data;
  wire [4:0]   _queue_io_count;
  wire [4:0]   _inflightCnt_T_30 =
    5'({3'h0,
        2'(2'({1'h0,
               io_pipeStatusVec_4_valid & io_pipeStatusVec_4_bits_txChannel[2]
                 & (io_pipeStatusVec_4_bits_channel[1]
                    | io_pipeStatusVec_4_bits_mshrTask)}
              + {1'h0,
                 io_pipeStatusVec_3_valid & io_pipeStatusVec_3_bits_txChannel[2]
                   & (io_pipeStatusVec_3_bits_channel[1]
                      | io_pipeStatusVec_3_bits_mshrTask)})
           + 2'({1'h0,
                 io_pipeStatusVec_2_valid & io_pipeStatusVec_2_bits_txChannel[2]
                   & (io_pipeStatusVec_2_bits_channel[1]
                      | io_pipeStatusVec_2_bits_mshrTask)}
                + {1'h0,
                   io_pipeStatusVec_1_valid
                     & (io_pipeStatusVec_1_bits_mshrTask
                          ? io_pipeStatusVec_1_bits_txChannel[2]
                          : io_pipeStatusVec_1_bits_channel[1])}))} + _queue_io_count);
  reg          beatValids_0;
  reg          beatValids_1;
  assign beatsOH = {beatValids_1, beatValids_0};
  reg  [6:0]   taskR_task_tgtID;
  reg  [7:0]   taskR_task_txnID;
  reg  [6:0]   taskR_task_homeNID;
  reg  [7:0]   taskR_task_dbID;
  reg  [5:0]   taskR_task_chiOpcode;
  reg  [2:0]   taskR_task_resp;
  reg  [2:0]   taskR_task_fwdState;
  reg  [511:0] taskR_data_data;
  wire         _GEN = ~(|beatsOH) & _queue_io_deq_valid;
  wire [1:0]   _next_beatsOH_T = ~(beatValids_0 ? 2'h1 : {beatValids_1, 1'h0});
  wire         _GEN_0 = io_out_ready & (|beatsOH);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatValids_0 <= 1'h0;
      beatValids_1 <= 1'h0;
      taskR_task_tgtID <= 7'h0;
      taskR_task_txnID <= 8'h0;
      taskR_task_homeNID <= 7'h0;
      taskR_task_dbID <= 8'h0;
      taskR_task_chiOpcode <= 6'h0;
      taskR_task_resp <= 3'h0;
      taskR_task_fwdState <= 3'h0;
      taskR_data_data <= 512'h0;
    end
    else begin
      beatValids_0 <= _GEN_0 ? beatValids_0 & _next_beatsOH_T[0] : _GEN | beatValids_0;
      beatValids_1 <= _GEN_0 ? beatValids_1 & _next_beatsOH_T[1] : _GEN | beatValids_1;
      if (_GEN) begin
        taskR_task_tgtID <= _queue_io_deq_bits_task_tgtID;
        taskR_task_txnID <= _queue_io_deq_bits_task_txnID;
        taskR_task_homeNID <= _queue_io_deq_bits_task_homeNID;
        taskR_task_dbID <= _queue_io_deq_bits_task_dbID;
        taskR_task_chiOpcode <= _queue_io_deq_bits_task_chiOpcode;
        taskR_task_resp <= _queue_io_deq_bits_task_resp;
        taskR_task_fwdState <= _queue_io_deq_bits_task_fwdState;
        taskR_data_data <= _queue_io_deq_bits_data_data;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:25];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1A; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        beatValids_0 = _RANDOM[5'h0][0];
        beatValids_1 = _RANDOM[5'h0][1];
        taskR_task_tgtID = _RANDOM[5'h6][29:23];
        taskR_task_txnID = _RANDOM[5'h7][12:5];
        taskR_task_homeNID = _RANDOM[5'h7][19:13];
        taskR_task_dbID = _RANDOM[5'h7][27:20];
        taskR_task_chiOpcode = _RANDOM[5'h8][16:11];
        taskR_task_resp = _RANDOM[5'h8][19:17];
        taskR_task_fwdState = _RANDOM[5'h8][22:20];
        taskR_data_data =
          {_RANDOM[5'h9][31:2],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10],
           _RANDOM[5'h11],
           _RANDOM[5'h12],
           _RANDOM[5'h13],
           _RANDOM[5'h14],
           _RANDOM[5'h15],
           _RANDOM[5'h16],
           _RANDOM[5'h17],
           _RANDOM[5'h18],
           _RANDOM[5'h19][1:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatValids_0 = 1'h0;
        beatValids_1 = 1'h0;
        taskR_task_tgtID = 7'h0;
        taskR_task_txnID = 8'h0;
        taskR_task_homeNID = 7'h0;
        taskR_task_dbID = 8'h0;
        taskR_task_chiOpcode = 6'h0;
        taskR_task_resp = 3'h0;
        taskR_task_fwdState = 3'h0;
        taskR_data_data = 512'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue16_TaskWithData queue (
    .clock                                        (clock),
    .reset                                        (reset),
    .io_enq_ready                                 (io_in_ready),
    .io_enq_valid                                 (io_in_valid),
    .io_enq_bits_task_channel                     (io_in_bits_task_channel),
    .io_enq_bits_task_txChannel                   (io_in_bits_task_txChannel),
    .io_enq_bits_task_set                         (io_in_bits_task_set),
    .io_enq_bits_task_tag                         (io_in_bits_task_tag),
    .io_enq_bits_task_off                         (io_in_bits_task_off),
    .io_enq_bits_task_alias                       (io_in_bits_task_alias),
    .io_enq_bits_task_vaddr                       (io_in_bits_task_vaddr),
    .io_enq_bits_task_isKeyword                   (io_in_bits_task_isKeyword),
    .io_enq_bits_task_opcode                      (io_in_bits_task_opcode),
    .io_enq_bits_task_param                       (io_in_bits_task_param),
    .io_enq_bits_task_size                        (io_in_bits_task_size),
    .io_enq_bits_task_sourceId                    (io_in_bits_task_sourceId),
    .io_enq_bits_task_bufIdx                      (io_in_bits_task_bufIdx),
    .io_enq_bits_task_needProbeAckData            (io_in_bits_task_needProbeAckData),
    .io_enq_bits_task_mshrTask                    (io_in_bits_task_mshrTask),
    .io_enq_bits_task_mshrId                      (io_in_bits_task_mshrId),
    .io_enq_bits_task_aliasTask                   (io_in_bits_task_aliasTask),
    .io_enq_bits_task_useProbeData                (io_in_bits_task_useProbeData),
    .io_enq_bits_task_mshrRetry                   (io_in_bits_task_mshrRetry),
    .io_enq_bits_task_fromL2pft                   (io_in_bits_task_fromL2pft),
    .io_enq_bits_task_needHint                    (io_in_bits_task_needHint),
    .io_enq_bits_task_dirty                       (io_in_bits_task_dirty),
    .io_enq_bits_task_way                         (io_in_bits_task_way),
    .io_enq_bits_task_meta_dirty                  (io_in_bits_task_meta_dirty),
    .io_enq_bits_task_meta_state                  (io_in_bits_task_meta_state),
    .io_enq_bits_task_meta_clients                (io_in_bits_task_meta_clients),
    .io_enq_bits_task_meta_alias                  (io_in_bits_task_meta_alias),
    .io_enq_bits_task_meta_prefetch               (io_in_bits_task_meta_prefetch),
    .io_enq_bits_task_meta_prefetchSrc            (io_in_bits_task_meta_prefetchSrc),
    .io_enq_bits_task_meta_accessed               (io_in_bits_task_meta_accessed),
    .io_enq_bits_task_metaWen                     (io_in_bits_task_metaWen),
    .io_enq_bits_task_tagWen                      (io_in_bits_task_tagWen),
    .io_enq_bits_task_dsWen                       (io_in_bits_task_dsWen),
    .io_enq_bits_task_wayMask                     (io_in_bits_task_wayMask),
    .io_enq_bits_task_replTask                    (io_in_bits_task_replTask),
    .io_enq_bits_task_reqSource                   (io_in_bits_task_reqSource),
    .io_enq_bits_task_mergeA                      (io_in_bits_task_mergeA),
    .io_enq_bits_task_aMergeTask_off              (io_in_bits_task_aMergeTask_off),
    .io_enq_bits_task_aMergeTask_alias            (io_in_bits_task_aMergeTask_alias),
    .io_enq_bits_task_aMergeTask_vaddr            (io_in_bits_task_aMergeTask_vaddr),
    .io_enq_bits_task_aMergeTask_isKeyword        (io_in_bits_task_aMergeTask_isKeyword),
    .io_enq_bits_task_aMergeTask_opcode           (io_in_bits_task_aMergeTask_opcode),
    .io_enq_bits_task_aMergeTask_param            (io_in_bits_task_aMergeTask_param),
    .io_enq_bits_task_aMergeTask_sourceId         (io_in_bits_task_aMergeTask_sourceId),
    .io_enq_bits_task_aMergeTask_meta_dirty       (io_in_bits_task_aMergeTask_meta_dirty),
    .io_enq_bits_task_aMergeTask_meta_state       (io_in_bits_task_aMergeTask_meta_state),
    .io_enq_bits_task_aMergeTask_meta_clients
      (io_in_bits_task_aMergeTask_meta_clients),
    .io_enq_bits_task_aMergeTask_meta_alias       (io_in_bits_task_aMergeTask_meta_alias),
    .io_enq_bits_task_aMergeTask_meta_prefetch
      (io_in_bits_task_aMergeTask_meta_prefetch),
    .io_enq_bits_task_aMergeTask_meta_prefetchSrc
      (io_in_bits_task_aMergeTask_meta_prefetchSrc),
    .io_enq_bits_task_aMergeTask_meta_accessed
      (io_in_bits_task_aMergeTask_meta_accessed),
    .io_enq_bits_task_snpHitRelease               (io_in_bits_task_snpHitRelease),
    .io_enq_bits_task_snpHitReleaseWithData       (io_in_bits_task_snpHitReleaseWithData),
    .io_enq_bits_task_snpHitReleaseIdx            (io_in_bits_task_snpHitReleaseIdx),
    .io_enq_bits_task_tgtID                       (io_in_bits_task_tgtID),
    .io_enq_bits_task_srcID                       (io_in_bits_task_srcID),
    .io_enq_bits_task_txnID                       (io_in_bits_task_txnID),
    .io_enq_bits_task_homeNID                     (io_in_bits_task_homeNID),
    .io_enq_bits_task_dbID                        (io_in_bits_task_dbID),
    .io_enq_bits_task_fwdNID                      (io_in_bits_task_fwdNID),
    .io_enq_bits_task_fwdTxnID                    (io_in_bits_task_fwdTxnID),
    .io_enq_bits_task_chiOpcode                   (io_in_bits_task_chiOpcode),
    .io_enq_bits_task_resp                        (io_in_bits_task_resp),
    .io_enq_bits_task_fwdState                    (io_in_bits_task_fwdState),
    .io_enq_bits_task_pCrdType                    (io_in_bits_task_pCrdType),
    .io_enq_bits_task_retToSrc                    (io_in_bits_task_retToSrc),
    .io_enq_bits_task_expCompAck                  (io_in_bits_task_expCompAck),
    .io_enq_bits_task_allowRetry                  (io_in_bits_task_allowRetry),
    .io_enq_bits_task_memAttr_allocate            (io_in_bits_task_memAttr_allocate),
    .io_enq_bits_task_memAttr_cacheable           (io_in_bits_task_memAttr_cacheable),
    .io_enq_bits_task_memAttr_device              (io_in_bits_task_memAttr_device),
    .io_enq_bits_task_memAttr_ewa                 (io_in_bits_task_memAttr_ewa),
    .io_enq_bits_data_data                        (io_in_bits_data_data),
    .io_deq_ready                                 (~(|beatsOH)),
    .io_deq_valid                                 (_queue_io_deq_valid),
    .io_deq_bits_task_tgtID                       (_queue_io_deq_bits_task_tgtID),
    .io_deq_bits_task_txnID                       (_queue_io_deq_bits_task_txnID),
    .io_deq_bits_task_homeNID                     (_queue_io_deq_bits_task_homeNID),
    .io_deq_bits_task_dbID                        (_queue_io_deq_bits_task_dbID),
    .io_deq_bits_task_chiOpcode                   (_queue_io_deq_bits_task_chiOpcode),
    .io_deq_bits_task_resp                        (_queue_io_deq_bits_task_resp),
    .io_deq_bits_task_fwdState                    (_queue_io_deq_bits_task_fwdState),
    .io_deq_bits_data_data                        (_queue_io_deq_bits_data_data),
    .io_count                                     (_queue_io_count)
  );
  assign io_out_valid = |beatsOH;
  assign io_out_bits_tgtID = taskR_task_tgtID;
  assign io_out_bits_txnID = taskR_task_txnID;
  assign io_out_bits_homeNID = taskR_task_homeNID;
  assign io_out_bits_opcode = taskR_task_chiOpcode[2:0];
  assign io_out_bits_resp = taskR_task_resp;
  assign io_out_bits_fwdState = taskR_task_fwdState;
  assign io_out_bits_dbID = taskR_task_dbID;
  assign io_out_bits_dataID = {~beatValids_0, 1'h0};
  assign io_out_bits_data =
    beatValids_0 ? taskR_data_data[255:0] : taskR_data_data[511:256];
  assign io_toReqArb_blockMSHRReqEntrance = _inflightCnt_T_30 > 5'hE;
  assign io_toReqArb_blockSinkBReqEntrance = _inflightCnt_T_30[4];
endmodule

