// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module TLWidthWidget(
  input          clock,
  input          reset,
  output         auto_in_a_ready,
  input          auto_in_a_valid,
  input  [2:0]   auto_in_a_bits_opcode,
  input  [2:0]   auto_in_a_bits_size,
  input  [4:0]   auto_in_a_bits_source,
  input  [36:0]  auto_in_a_bits_address,
  input          auto_in_a_bits_user_amba_prot_bufferable,
  input          auto_in_a_bits_user_amba_prot_modifiable,
  input          auto_in_a_bits_user_amba_prot_readalloc,
  input          auto_in_a_bits_user_amba_prot_writealloc,
  input          auto_in_a_bits_user_amba_prot_secure,
  input  [31:0]  auto_in_a_bits_mask,
  input  [255:0] auto_in_a_bits_data,
  input          auto_in_d_ready,
  output         auto_in_d_valid,
  output [2:0]   auto_in_d_bits_opcode,
  output [2:0]   auto_in_d_bits_size,
  output [4:0]   auto_in_d_bits_source,
  output         auto_in_d_bits_denied,
  output [255:0] auto_in_d_bits_data,
  output         auto_in_d_bits_corrupt,
  input          auto_out_a_ready,
  output         auto_out_a_valid,
  output [2:0]   auto_out_a_bits_opcode,
  output [2:0]   auto_out_a_bits_size,
  output [4:0]   auto_out_a_bits_source,
  output [36:0]  auto_out_a_bits_address,
  output         auto_out_a_bits_user_amba_prot_bufferable,
  output         auto_out_a_bits_user_amba_prot_modifiable,
  output         auto_out_a_bits_user_amba_prot_readalloc,
  output         auto_out_a_bits_user_amba_prot_writealloc,
  output         auto_out_a_bits_user_amba_prot_secure,
  output [7:0]   auto_out_a_bits_mask,
  output [63:0]  auto_out_a_bits_data,
  output         auto_out_d_ready,
  input          auto_out_d_valid,
  input  [2:0]   auto_out_d_bits_opcode,
  input  [2:0]   auto_out_d_bits_size,
  input  [4:0]   auto_out_d_bits_source,
  input          auto_out_d_bits_denied,
  input  [63:0]  auto_out_d_bits_data,
  input          auto_out_d_bits_corrupt
);

  wire             nodeOut_d_ready;
  wire             _repeated_repeater_io_deq_valid;
  wire [2:0]       _repeated_repeater_io_deq_bits_opcode;
  wire [2:0]       _repeated_repeater_io_deq_bits_size;
  wire [36:0]      _repeated_repeater_io_deq_bits_address;
  wire [31:0]      _repeated_repeater_io_deq_bits_mask;
  wire [255:0]     _repeated_repeater_io_deq_bits_data;
  wire [11:0]      _repeat_limit_T = 12'h1F << _repeated_repeater_io_deq_bits_size;
  reg  [1:0]       repeat_count;
  wire             repeat_last =
    repeat_count == ~(_repeat_limit_T[4:3]) | _repeated_repeater_io_deq_bits_opcode[2];
  wire [1:0]       repeat_index =
    _repeated_repeater_io_deq_bits_address[4:3] | repeat_count;
  wire [3:0][63:0] _GEN =
    {{_repeated_repeater_io_deq_bits_data[255:192]},
     {_repeated_repeater_io_deq_bits_data[191:128]},
     {_repeated_repeater_io_deq_bits_data[127:64]},
     {auto_in_a_bits_data[63:0]}};
  wire [3:0][7:0]  _GEN_0 =
    {{_repeated_repeater_io_deq_bits_mask[31:24]},
     {_repeated_repeater_io_deq_bits_mask[23:16]},
     {_repeated_repeater_io_deq_bits_mask[15:8]},
     {_repeated_repeater_io_deq_bits_mask[7:0]}};
  wire [11:0]      _limit_T = 12'h1F << auto_out_d_bits_size;
  reg  [1:0]       count;
  wire             last = count == ~(_limit_T[4:3]) | ~(auto_out_d_bits_opcode[0]);
  reg              corrupt_reg;
  wire             corrupt_out = auto_out_d_bits_corrupt | corrupt_reg;
  wire             _nodeIn_d_bits_data_T = nodeOut_d_ready & auto_out_d_valid;
  assign nodeOut_d_ready = auto_in_d_ready | ~last;
  reg              nodeIn_d_bits_data_rdata_written_once;
  wire             nodeIn_d_bits_data_masked_enable_0 =
    (count & ~(_limit_T[4:3])) == 2'h0 | ~nodeIn_d_bits_data_rdata_written_once;
  wire             nodeIn_d_bits_data_masked_enable_1 =
    ({count[1], ~(count[0])} & ~(_limit_T[4:3])) == 2'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire             nodeIn_d_bits_data_masked_enable_2 =
    ((count ^ 2'h2) & ~(_limit_T[4:3])) == 2'h0 | ~nodeIn_d_bits_data_rdata_written_once;
  reg  [63:0]      nodeIn_d_bits_data_rdata_0;
  reg  [63:0]      nodeIn_d_bits_data_rdata_1;
  reg  [63:0]      nodeIn_d_bits_data_rdata_2;
  wire             _nodeIn_d_bits_data_T_2 = _nodeIn_d_bits_data_T & ~last;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      repeat_count <= 2'h0;
      count <= 2'h0;
      corrupt_reg <= 1'h0;
      nodeIn_d_bits_data_rdata_written_once <= 1'h0;
    end
    else begin
      if (auto_out_a_ready & _repeated_repeater_io_deq_valid)
        repeat_count <= repeat_last ? 2'h0 : 2'(repeat_count + 2'h1);
      if (_nodeIn_d_bits_data_T) begin
        count <= last ? 2'h0 : 2'(count + 2'h1);
        corrupt_reg <= ~last & corrupt_out;
      end
      nodeIn_d_bits_data_rdata_written_once <=
        _nodeIn_d_bits_data_T_2 | nodeIn_d_bits_data_rdata_written_once;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_0)
      nodeIn_d_bits_data_rdata_0 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_1)
      nodeIn_d_bits_data_rdata_1 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_2)
      nodeIn_d_bits_data_rdata_2 <= auto_out_d_bits_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        repeat_count = _RANDOM[3'h0][1:0];
        count = _RANDOM[3'h0][3:2];
        corrupt_reg = _RANDOM[3'h0][4];
        nodeIn_d_bits_data_rdata_written_once = _RANDOM[3'h0][5];
        nodeIn_d_bits_data_rdata_0 =
          {_RANDOM[3'h0][31:6], _RANDOM[3'h1], _RANDOM[3'h2][5:0]};
        nodeIn_d_bits_data_rdata_1 =
          {_RANDOM[3'h2][31:6], _RANDOM[3'h3], _RANDOM[3'h4][5:0]};
        nodeIn_d_bits_data_rdata_2 =
          {_RANDOM[3'h4][31:6], _RANDOM[3'h5], _RANDOM[3'h6][5:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        repeat_count = 2'h0;
        count = 2'h0;
        corrupt_reg = 1'h0;
        nodeIn_d_bits_data_rdata_written_once = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Repeater repeated_repeater (
    .clock                                 (clock),
    .reset                                 (reset),
    .io_repeat                             (~repeat_last),
    .io_enq_ready                          (auto_in_a_ready),
    .io_enq_valid                          (auto_in_a_valid),
    .io_enq_bits_opcode                    (auto_in_a_bits_opcode),
    .io_enq_bits_size                      (auto_in_a_bits_size),
    .io_enq_bits_source                    (auto_in_a_bits_source),
    .io_enq_bits_address                   (auto_in_a_bits_address),
    .io_enq_bits_user_amba_prot_bufferable (auto_in_a_bits_user_amba_prot_bufferable),
    .io_enq_bits_user_amba_prot_modifiable (auto_in_a_bits_user_amba_prot_modifiable),
    .io_enq_bits_user_amba_prot_readalloc  (auto_in_a_bits_user_amba_prot_readalloc),
    .io_enq_bits_user_amba_prot_writealloc (auto_in_a_bits_user_amba_prot_writealloc),
    .io_enq_bits_user_amba_prot_secure     (auto_in_a_bits_user_amba_prot_secure),
    .io_enq_bits_mask                      (auto_in_a_bits_mask),
    .io_enq_bits_data                      (auto_in_a_bits_data),
    .io_deq_ready                          (auto_out_a_ready),
    .io_deq_valid                          (_repeated_repeater_io_deq_valid),
    .io_deq_bits_opcode                    (_repeated_repeater_io_deq_bits_opcode),
    .io_deq_bits_size                      (_repeated_repeater_io_deq_bits_size),
    .io_deq_bits_source                    (auto_out_a_bits_source),
    .io_deq_bits_address                   (_repeated_repeater_io_deq_bits_address),
    .io_deq_bits_user_amba_prot_bufferable (auto_out_a_bits_user_amba_prot_bufferable),
    .io_deq_bits_user_amba_prot_modifiable (auto_out_a_bits_user_amba_prot_modifiable),
    .io_deq_bits_user_amba_prot_readalloc  (auto_out_a_bits_user_amba_prot_readalloc),
    .io_deq_bits_user_amba_prot_writealloc (auto_out_a_bits_user_amba_prot_writealloc),
    .io_deq_bits_user_amba_prot_secure     (auto_out_a_bits_user_amba_prot_secure),
    .io_deq_bits_mask                      (_repeated_repeater_io_deq_bits_mask),
    .io_deq_bits_data                      (_repeated_repeater_io_deq_bits_data)
  );
  assign auto_in_d_valid = auto_out_d_valid & last;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data =
    {auto_out_d_bits_data,
     nodeIn_d_bits_data_masked_enable_2
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_2,
     nodeIn_d_bits_data_masked_enable_1
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_1,
     nodeIn_d_bits_data_masked_enable_0
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_0};
  assign auto_in_d_bits_corrupt = corrupt_out;
  assign auto_out_a_valid = _repeated_repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = _repeated_repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = _repeated_repeater_io_deq_bits_size;
  assign auto_out_a_bits_address = _repeated_repeater_io_deq_bits_address;
  assign auto_out_a_bits_mask = _GEN_0[repeat_index];
  assign auto_out_a_bits_data = _GEN[repeat_index];
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

