// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module TLFIFOFixer(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [36:0] auto_in_a_bits_address,
  input         auto_in_a_bits_user_amba_prot_bufferable,
  input         auto_in_a_bits_user_amba_prot_modifiable,
  input         auto_in_a_bits_user_amba_prot_readalloc,
  input         auto_in_a_bits_user_amba_prot_writealloc,
  input         auto_in_a_bits_user_amba_prot_secure,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  input         auto_out_a_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [2:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [36:0] auto_out_a_bits_address,
  output        auto_out_a_bits_user_amba_prot_bufferable,
  output        auto_out_a_bits_user_amba_prot_modifiable,
  output        auto_out_a_bits_user_amba_prot_readalloc,
  output        auto_out_a_bits_user_amba_prot_writealloc,
  output        auto_out_a_bits_user_amba_prot_secure,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
  input         auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [2:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt
);

  wire        nodeIn_a_ready;
  wire [2:0]  _a_id_T_63 =
    {1'h0,
     {1'h0, auto_in_a_bits_address[36]}
       | {2{{auto_in_a_bits_address[36], auto_in_a_bits_address[30:29]} == 3'h0
              | {auto_in_a_bits_address[36],
                 auto_in_a_bits_address[30],
                 auto_in_a_bits_address[29:28] ^ 2'h2} == 4'h0
              | {auto_in_a_bits_address[36],
                 auto_in_a_bits_address[30],
                 auto_in_a_bits_address[29:27] ^ 3'h6} == 5'h0
              | {auto_in_a_bits_address[36], ~(auto_in_a_bits_address[30])} == 2'h0}}}
    | ({auto_in_a_bits_address[36],
        auto_in_a_bits_address[30],
        auto_in_a_bits_address[29:16] ^ 14'h3800} == 16'h0
         ? 3'h5
         : 3'h0)
    | ({auto_in_a_bits_address[36],
        auto_in_a_bits_address[30],
        ~(auto_in_a_bits_address[29:26])} == 6'h0
         ? 3'h6
         : 3'h0)
    | {3{{auto_in_a_bits_address[36],
          auto_in_a_bits_address[30],
          auto_in_a_bits_address[29:12] ^ 18'h3A000} == 20'h0}};
  wire [2:0]  a_id =
    {_a_id_T_63[2]
       | {auto_in_a_bits_address[36],
          auto_in_a_bits_address[30],
          auto_in_a_bits_address[29:12] ^ 18'h38021} == 20'h0,
     _a_id_T_63[1:0]
       | {{auto_in_a_bits_address[36],
           auto_in_a_bits_address[30],
           auto_in_a_bits_address[29:12] ^ 18'h38020} == 20'h0,
          1'h0}};
  wire        a_noDomain = a_id == 3'h0;
  wire        _stalls_id_T_60 = nodeIn_a_ready & auto_in_a_valid;
  reg  [2:0]  a_first_counter;
  wire        a_first = a_first_counter == 3'h0;
  reg  [2:0]  d_first_counter;
  reg         flight_0;
  reg         flight_1;
  reg         flight_2;
  reg         flight_3;
  reg         flight_4;
  reg         flight_5;
  reg         flight_6;
  reg         flight_7;
  reg         flight_8;
  reg         flight_9;
  reg         flight_10;
  reg         flight_11;
  reg         flight_12;
  reg         flight_13;
  reg         flight_14;
  reg         flight_15;
  reg         flight_16;
  reg         flight_17;
  reg         flight_18;
  reg         flight_19;
  reg         flight_20;
  reg         flight_21;
  reg         flight_22;
  reg         flight_23;
  reg         flight_24;
  reg         flight_25;
  reg         flight_26;
  reg         flight_27;
  reg         flight_28;
  reg         flight_29;
  reg         flight_30;
  reg         flight_31;
  wire        stalls_a_sel = auto_in_a_bits_source[4:1] == 4'h0;
  reg  [2:0]  stalls_id;
  wire        stalls_a_sel_1 = auto_in_a_bits_source[4:1] == 4'h1;
  reg  [2:0]  stalls_id_1;
  wire        stalls_a_sel_2 = auto_in_a_bits_source[4:1] == 4'h2;
  reg  [2:0]  stalls_id_2;
  wire        stalls_a_sel_3 = auto_in_a_bits_source[4:1] == 4'h3;
  reg  [2:0]  stalls_id_3;
  wire        stalls_a_sel_4 = auto_in_a_bits_source[4:1] == 4'h4;
  reg  [2:0]  stalls_id_4;
  wire        stalls_a_sel_5 = auto_in_a_bits_source[4:1] == 4'h5;
  reg  [2:0]  stalls_id_5;
  wire        stalls_a_sel_6 = auto_in_a_bits_source[4:1] == 4'h6;
  reg  [2:0]  stalls_id_6;
  wire        stalls_a_sel_7 = auto_in_a_bits_source[4:1] == 4'h7;
  reg  [2:0]  stalls_id_7;
  wire        stalls_a_sel_8 = auto_in_a_bits_source[4:1] == 4'h8;
  reg  [2:0]  stalls_id_8;
  wire        stalls_a_sel_9 = auto_in_a_bits_source[4:1] == 4'h9;
  reg  [2:0]  stalls_id_9;
  wire        stalls_a_sel_10 = auto_in_a_bits_source[4:1] == 4'hA;
  reg  [2:0]  stalls_id_10;
  wire        stalls_a_sel_11 = auto_in_a_bits_source[4:1] == 4'hB;
  reg  [2:0]  stalls_id_11;
  wire        stalls_a_sel_12 = auto_in_a_bits_source[4:1] == 4'hC;
  reg  [2:0]  stalls_id_12;
  wire        stalls_a_sel_13 = auto_in_a_bits_source[4:1] == 4'hD;
  reg  [2:0]  stalls_id_13;
  wire        stalls_a_sel_14 = auto_in_a_bits_source[4:1] == 4'hE;
  reg  [2:0]  stalls_id_14;
  reg  [2:0]  stalls_id_15;
  wire        stall =
    stalls_a_sel & a_first & (flight_0 | flight_1) & (a_noDomain | stalls_id != a_id)
    | stalls_a_sel_1 & a_first & (flight_2 | flight_3)
    & (a_noDomain | stalls_id_1 != a_id) | stalls_a_sel_2 & a_first
    & (flight_4 | flight_5) & (a_noDomain | stalls_id_2 != a_id) | stalls_a_sel_3
    & a_first & (flight_6 | flight_7) & (a_noDomain | stalls_id_3 != a_id)
    | stalls_a_sel_4 & a_first & (flight_8 | flight_9)
    & (a_noDomain | stalls_id_4 != a_id) | stalls_a_sel_5 & a_first
    & (flight_10 | flight_11) & (a_noDomain | stalls_id_5 != a_id) | stalls_a_sel_6
    & a_first & (flight_12 | flight_13) & (a_noDomain | stalls_id_6 != a_id)
    | stalls_a_sel_7 & a_first & (flight_14 | flight_15)
    & (a_noDomain | stalls_id_7 != a_id) | stalls_a_sel_8 & a_first
    & (flight_16 | flight_17) & (a_noDomain | stalls_id_8 != a_id) | stalls_a_sel_9
    & a_first & (flight_18 | flight_19) & (a_noDomain | stalls_id_9 != a_id)
    | stalls_a_sel_10 & a_first & (flight_20 | flight_21)
    & (a_noDomain | stalls_id_10 != a_id) | stalls_a_sel_11 & a_first
    & (flight_22 | flight_23) & (a_noDomain | stalls_id_11 != a_id) | stalls_a_sel_12
    & a_first & (flight_24 | flight_25) & (a_noDomain | stalls_id_12 != a_id)
    | stalls_a_sel_13 & a_first & (flight_26 | flight_27)
    & (a_noDomain | stalls_id_13 != a_id) | stalls_a_sel_14 & a_first
    & (flight_28 | flight_29) & (a_noDomain | stalls_id_14 != a_id)
    | (&(auto_in_a_bits_source[4:1])) & a_first & (flight_30 | flight_31)
    & (a_noDomain | stalls_id_15 != a_id);
  assign nodeIn_a_ready = auto_out_a_ready & ~stall;
  wire [12:0] _a_first_beats1_decode_T = 13'h3F << auto_in_a_bits_size;
  wire [12:0] _d_first_beats1_decode_T = 13'h3F << auto_out_d_bits_size;
  wire        d_first_first = d_first_counter == 3'h0;
  wire        _GEN = a_first & _stalls_id_T_60;
  wire        _GEN_0 =
    d_first_first & auto_out_d_bits_opcode != 3'h6 & auto_in_d_ready & auto_out_d_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
      flight_16 <= 1'h0;
      flight_17 <= 1'h0;
      flight_18 <= 1'h0;
      flight_19 <= 1'h0;
      flight_20 <= 1'h0;
      flight_21 <= 1'h0;
      flight_22 <= 1'h0;
      flight_23 <= 1'h0;
      flight_24 <= 1'h0;
      flight_25 <= 1'h0;
      flight_26 <= 1'h0;
      flight_27 <= 1'h0;
      flight_28 <= 1'h0;
      flight_29 <= 1'h0;
      flight_30 <= 1'h0;
      flight_31 <= 1'h0;
    end
    else begin
      if (_stalls_id_T_60)
        a_first_counter <=
          a_first
            ? (auto_in_a_bits_opcode[2] ? 3'h0 : ~(_a_first_beats1_decode_T[5:3]))
            : 3'(a_first_counter - 3'h1);
      if (auto_in_d_ready & auto_out_d_valid)
        d_first_counter <=
          d_first_first
            ? (auto_out_d_bits_opcode[0] ? ~(_d_first_beats1_decode_T[5:3]) : 3'h0)
            : 3'(d_first_counter - 3'h1);
      flight_0 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h0)
        & (_GEN & auto_in_a_bits_source == 5'h0 | flight_0);
      flight_1 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1)
        & (_GEN & auto_in_a_bits_source == 5'h1 | flight_1);
      flight_2 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h2)
        & (_GEN & auto_in_a_bits_source == 5'h2 | flight_2);
      flight_3 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h3)
        & (_GEN & auto_in_a_bits_source == 5'h3 | flight_3);
      flight_4 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h4)
        & (_GEN & auto_in_a_bits_source == 5'h4 | flight_4);
      flight_5 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h5)
        & (_GEN & auto_in_a_bits_source == 5'h5 | flight_5);
      flight_6 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h6)
        & (_GEN & auto_in_a_bits_source == 5'h6 | flight_6);
      flight_7 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h7)
        & (_GEN & auto_in_a_bits_source == 5'h7 | flight_7);
      flight_8 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h8)
        & (_GEN & auto_in_a_bits_source == 5'h8 | flight_8);
      flight_9 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h9)
        & (_GEN & auto_in_a_bits_source == 5'h9 | flight_9);
      flight_10 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hA)
        & (_GEN & auto_in_a_bits_source == 5'hA | flight_10);
      flight_11 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hB)
        & (_GEN & auto_in_a_bits_source == 5'hB | flight_11);
      flight_12 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hC)
        & (_GEN & auto_in_a_bits_source == 5'hC | flight_12);
      flight_13 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hD)
        & (_GEN & auto_in_a_bits_source == 5'hD | flight_13);
      flight_14 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hE)
        & (_GEN & auto_in_a_bits_source == 5'hE | flight_14);
      flight_15 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'hF)
        & (_GEN & auto_in_a_bits_source == 5'hF | flight_15);
      flight_16 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h10)
        & (_GEN & auto_in_a_bits_source == 5'h10 | flight_16);
      flight_17 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h11)
        & (_GEN & auto_in_a_bits_source == 5'h11 | flight_17);
      flight_18 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h12)
        & (_GEN & auto_in_a_bits_source == 5'h12 | flight_18);
      flight_19 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h13)
        & (_GEN & auto_in_a_bits_source == 5'h13 | flight_19);
      flight_20 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h14)
        & (_GEN & auto_in_a_bits_source == 5'h14 | flight_20);
      flight_21 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h15)
        & (_GEN & auto_in_a_bits_source == 5'h15 | flight_21);
      flight_22 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h16)
        & (_GEN & auto_in_a_bits_source == 5'h16 | flight_22);
      flight_23 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h17)
        & (_GEN & auto_in_a_bits_source == 5'h17 | flight_23);
      flight_24 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h18)
        & (_GEN & auto_in_a_bits_source == 5'h18 | flight_24);
      flight_25 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h19)
        & (_GEN & auto_in_a_bits_source == 5'h19 | flight_25);
      flight_26 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1A)
        & (_GEN & auto_in_a_bits_source == 5'h1A | flight_26);
      flight_27 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1B)
        & (_GEN & auto_in_a_bits_source == 5'h1B | flight_27);
      flight_28 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1C)
        & (_GEN & auto_in_a_bits_source == 5'h1C | flight_28);
      flight_29 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1D)
        & (_GEN & auto_in_a_bits_source == 5'h1D | flight_29);
      flight_30 <=
        ~(_GEN_0 & auto_out_d_bits_source == 5'h1E)
        & (_GEN & auto_in_a_bits_source == 5'h1E | flight_30);
      flight_31 <=
        ~(_GEN_0 & (&auto_out_d_bits_source))
        & (_GEN & (&auto_in_a_bits_source) | flight_31);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_stalls_id_T_60 & stalls_a_sel)
      stalls_id <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_1)
      stalls_id_1 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_2)
      stalls_id_2 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_3)
      stalls_id_3 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_4)
      stalls_id_4 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_5)
      stalls_id_5 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_6)
      stalls_id_6 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_7)
      stalls_id_7 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_8)
      stalls_id_8 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_9)
      stalls_id_9 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_10)
      stalls_id_10 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_11)
      stalls_id_11 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_12)
      stalls_id_12 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_13)
      stalls_id_13 <= a_id;
    if (_stalls_id_T_60 & stalls_a_sel_14)
      stalls_id_14 <= a_id;
    if (_stalls_id_T_60 & (&(auto_in_a_bits_source[4:1])))
      stalls_id_15 <= a_id;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        a_first_counter = _RANDOM[2'h0][2:0];
        d_first_counter = _RANDOM[2'h0][5:3];
        flight_0 = _RANDOM[2'h0][6];
        flight_1 = _RANDOM[2'h0][7];
        flight_2 = _RANDOM[2'h0][8];
        flight_3 = _RANDOM[2'h0][9];
        flight_4 = _RANDOM[2'h0][10];
        flight_5 = _RANDOM[2'h0][11];
        flight_6 = _RANDOM[2'h0][12];
        flight_7 = _RANDOM[2'h0][13];
        flight_8 = _RANDOM[2'h0][14];
        flight_9 = _RANDOM[2'h0][15];
        flight_10 = _RANDOM[2'h0][16];
        flight_11 = _RANDOM[2'h0][17];
        flight_12 = _RANDOM[2'h0][18];
        flight_13 = _RANDOM[2'h0][19];
        flight_14 = _RANDOM[2'h0][20];
        flight_15 = _RANDOM[2'h0][21];
        flight_16 = _RANDOM[2'h0][22];
        flight_17 = _RANDOM[2'h0][23];
        flight_18 = _RANDOM[2'h0][24];
        flight_19 = _RANDOM[2'h0][25];
        flight_20 = _RANDOM[2'h0][26];
        flight_21 = _RANDOM[2'h0][27];
        flight_22 = _RANDOM[2'h0][28];
        flight_23 = _RANDOM[2'h0][29];
        flight_24 = _RANDOM[2'h0][30];
        flight_25 = _RANDOM[2'h0][31];
        flight_26 = _RANDOM[2'h1][0];
        flight_27 = _RANDOM[2'h1][1];
        flight_28 = _RANDOM[2'h1][2];
        flight_29 = _RANDOM[2'h1][3];
        flight_30 = _RANDOM[2'h1][4];
        flight_31 = _RANDOM[2'h1][5];
        stalls_id = _RANDOM[2'h1][8:6];
        stalls_id_1 = _RANDOM[2'h1][11:9];
        stalls_id_2 = _RANDOM[2'h1][14:12];
        stalls_id_3 = _RANDOM[2'h1][17:15];
        stalls_id_4 = _RANDOM[2'h1][20:18];
        stalls_id_5 = _RANDOM[2'h1][23:21];
        stalls_id_6 = _RANDOM[2'h1][26:24];
        stalls_id_7 = _RANDOM[2'h1][29:27];
        stalls_id_8 = {_RANDOM[2'h1][31:30], _RANDOM[2'h2][0]};
        stalls_id_9 = _RANDOM[2'h2][3:1];
        stalls_id_10 = _RANDOM[2'h2][6:4];
        stalls_id_11 = _RANDOM[2'h2][9:7];
        stalls_id_12 = _RANDOM[2'h2][12:10];
        stalls_id_13 = _RANDOM[2'h2][15:13];
        stalls_id_14 = _RANDOM[2'h2][18:16];
        stalls_id_15 = _RANDOM[2'h2][21:19];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        a_first_counter = 3'h0;
        d_first_counter = 3'h0;
        flight_0 = 1'h0;
        flight_1 = 1'h0;
        flight_2 = 1'h0;
        flight_3 = 1'h0;
        flight_4 = 1'h0;
        flight_5 = 1'h0;
        flight_6 = 1'h0;
        flight_7 = 1'h0;
        flight_8 = 1'h0;
        flight_9 = 1'h0;
        flight_10 = 1'h0;
        flight_11 = 1'h0;
        flight_12 = 1'h0;
        flight_13 = 1'h0;
        flight_14 = 1'h0;
        flight_15 = 1'h0;
        flight_16 = 1'h0;
        flight_17 = 1'h0;
        flight_18 = 1'h0;
        flight_19 = 1'h0;
        flight_20 = 1'h0;
        flight_21 = 1'h0;
        flight_22 = 1'h0;
        flight_23 = 1'h0;
        flight_24 = 1'h0;
        flight_25 = 1'h0;
        flight_26 = 1'h0;
        flight_27 = 1'h0;
        flight_28 = 1'h0;
        flight_29 = 1'h0;
        flight_30 = 1'h0;
        flight_31 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid & ~stall;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_user_amba_prot_bufferable =
    auto_in_a_bits_user_amba_prot_bufferable;
  assign auto_out_a_bits_user_amba_prot_modifiable =
    auto_in_a_bits_user_amba_prot_modifiable;
  assign auto_out_a_bits_user_amba_prot_readalloc =
    auto_in_a_bits_user_amba_prot_readalloc;
  assign auto_out_a_bits_user_amba_prot_writealloc =
    auto_in_a_bits_user_amba_prot_writealloc;
  assign auto_out_a_bits_user_amba_prot_secure = auto_in_a_bits_user_amba_prot_secure;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

