// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module AXI4Xbar(
  input          clock,
  input          reset,
  output         auto_in_aw_ready,
  input          auto_in_aw_valid,
  input  [36:0]  auto_in_aw_bits_addr,
  input  [7:0]   auto_in_aw_bits_len,
  input  [2:0]   auto_in_aw_bits_size,
  input  [3:0]   auto_in_aw_bits_cache,
  output         auto_in_w_ready,
  input          auto_in_w_valid,
  input  [255:0] auto_in_w_bits_data,
  input  [31:0]  auto_in_w_bits_strb,
  input          auto_in_w_bits_last,
  input          auto_in_b_ready,
  output         auto_in_b_valid,
  output         auto_in_ar_ready,
  input          auto_in_ar_valid,
  input  [36:0]  auto_in_ar_bits_addr,
  input  [7:0]   auto_in_ar_bits_len,
  input  [2:0]   auto_in_ar_bits_size,
  input  [3:0]   auto_in_ar_bits_cache,
  input          auto_in_r_ready,
  output         auto_in_r_valid,
  output [255:0] auto_in_r_bits_data,
  output         auto_in_r_bits_last,
  input          auto_out_1_aw_ready,
  output         auto_out_1_aw_valid,
  output [36:0]  auto_out_1_aw_bits_addr,
  output [7:0]   auto_out_1_aw_bits_len,
  output [2:0]   auto_out_1_aw_bits_size,
  output [3:0]   auto_out_1_aw_bits_cache,
  input          auto_out_1_w_ready,
  output         auto_out_1_w_valid,
  output [255:0] auto_out_1_w_bits_data,
  output [31:0]  auto_out_1_w_bits_strb,
  output         auto_out_1_w_bits_last,
  output         auto_out_1_b_ready,
  input          auto_out_1_b_valid,
  input          auto_out_1_ar_ready,
  output         auto_out_1_ar_valid,
  output [36:0]  auto_out_1_ar_bits_addr,
  output [7:0]   auto_out_1_ar_bits_len,
  output [2:0]   auto_out_1_ar_bits_size,
  output [3:0]   auto_out_1_ar_bits_cache,
  output         auto_out_1_r_ready,
  input          auto_out_1_r_valid,
  input  [255:0] auto_out_1_r_bits_data,
  input          auto_out_1_r_bits_last,
  input          auto_out_0_aw_ready,
  output         auto_out_0_aw_valid,
  output [35:0]  auto_out_0_aw_bits_addr,
  output [7:0]   auto_out_0_aw_bits_len,
  output [2:0]   auto_out_0_aw_bits_size,
  output [3:0]   auto_out_0_aw_bits_cache,
  input          auto_out_0_w_ready,
  output         auto_out_0_w_valid,
  output [255:0] auto_out_0_w_bits_data,
  output [31:0]  auto_out_0_w_bits_strb,
  output         auto_out_0_w_bits_last,
  output         auto_out_0_b_ready,
  input          auto_out_0_b_valid,
  input          auto_out_0_ar_ready,
  output         auto_out_0_ar_valid,
  output [35:0]  auto_out_0_ar_bits_addr,
  output [7:0]   auto_out_0_ar_bits_len,
  output [2:0]   auto_out_0_ar_bits_size,
  output [3:0]   auto_out_0_ar_bits_cache,
  output         auto_out_0_r_ready,
  input          auto_out_0_r_valid,
  input  [255:0] auto_out_0_r_bits_data,
  input          auto_out_0_r_bits_last
);

  wire       _portsWOI_in_0_w_ready_T_2;
  wire       _portsAWOI_in_0_aw_ready_T_2;
  wire       _awIn_0_io_enq_ready;
  wire       _awIn_0_io_deq_valid;
  wire [1:0] _awIn_0_io_deq_bits;
  wire       requestARIO_0_0 =
    {auto_in_ar_bits_addr[36:32], ~(auto_in_ar_bits_addr[31])} == 6'h0
    | {auto_in_ar_bits_addr[36:33], ~(auto_in_ar_bits_addr[32])} == 5'h0
    | {auto_in_ar_bits_addr[36:34], ~(auto_in_ar_bits_addr[33])} == 4'h0
    | {auto_in_ar_bits_addr[36:35], ~(auto_in_ar_bits_addr[34])} == 3'h0
    | {auto_in_ar_bits_addr[36], ~(auto_in_ar_bits_addr[35])} == 2'h0;
  wire       requestARIO_0_1 =
    auto_in_ar_bits_addr[36:31] == 6'h0 | auto_in_ar_bits_addr[36];
  wire       requestAWIO_0_0 =
    {auto_in_aw_bits_addr[36:32], ~(auto_in_aw_bits_addr[31])} == 6'h0
    | {auto_in_aw_bits_addr[36:33], ~(auto_in_aw_bits_addr[32])} == 5'h0
    | {auto_in_aw_bits_addr[36:34], ~(auto_in_aw_bits_addr[33])} == 4'h0
    | {auto_in_aw_bits_addr[36:35], ~(auto_in_aw_bits_addr[34])} == 3'h0
    | {auto_in_aw_bits_addr[36], ~(auto_in_aw_bits_addr[35])} == 2'h0;
  wire       requestAWIO_0_1 =
    auto_in_aw_bits_addr[36:31] == 6'h0 | auto_in_aw_bits_addr[36];
  reg        latched;
  wire       _nodeIn_aw_ready_T = latched | _awIn_0_io_enq_ready;
  wire       in_0_aw_valid = auto_in_aw_valid & _nodeIn_aw_ready_T;
  wire       awIn_0_io_enq_valid = auto_in_aw_valid & ~latched;
  wire       in_0_w_valid = auto_in_w_valid & _awIn_0_io_deq_valid;
  assign _portsAWOI_in_0_aw_ready_T_2 =
    requestAWIO_0_0 & auto_out_0_aw_ready | requestAWIO_0_1 & auto_out_1_aw_ready;
  assign _portsWOI_in_0_w_ready_T_2 =
    _awIn_0_io_deq_bits[0] & auto_out_0_w_ready | _awIn_0_io_deq_bits[1]
    & auto_out_1_w_ready;
  reg        idle_2;
  wire       anyValid = auto_out_0_r_valid | auto_out_1_r_valid;
  wire [1:0] readys_valid = {auto_out_1_r_valid, auto_out_0_r_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & ({_readys_filter_T_1[0], auto_out_1_r_valid} | _readys_filter_T_1));
  wire       prefixOR_1 = readys_readys[0] & auto_out_0_r_valid;
  wire       winner_2_1 = readys_readys[1] & auto_out_1_r_valid;
  reg        state_2_0;
  reg        state_2_1;
  wire       muxState_2_0 = idle_2 ? prefixOR_1 : state_2_0;
  wire       muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  wire       in_0_r_valid =
    idle_2 ? anyValid : state_2_0 & auto_out_0_r_valid | state_2_1 & auto_out_1_r_valid;
  reg        idle_3;
  wire       anyValid_1 = auto_out_0_b_valid | auto_out_1_b_valid;
  wire [1:0] readys_valid_1 = {auto_out_1_b_valid, auto_out_0_b_valid};
  reg  [1:0] readys_mask_1;
  wire [1:0] _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0] readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], auto_out_1_b_valid} | _readys_filter_T_3));
  reg        state_3_0;
  reg        state_3_1;
  wire       in_0_b_valid =
    idle_3 ? anyValid_1 : state_3_0 & auto_out_0_b_valid | state_3_1 & auto_out_1_b_valid;
  wire [1:0] _readys_mask_T = readys_readys & readys_valid;
  wire [1:0] _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      latched <= 1'h0;
      idle_2 <= 1'h1;
      readys_mask <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      idle_3 <= 1'h1;
      readys_mask_1 <= 2'h3;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
    end
    else begin
      latched <=
        ~(_portsAWOI_in_0_aw_ready_T_2 & in_0_aw_valid)
        & (_awIn_0_io_enq_ready & awIn_0_io_enq_valid | latched);
      idle_2 <= auto_in_r_ready & in_0_r_valid | ~anyValid & idle_2;
      if (idle_2 & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle_2) begin
        state_2_0 <= prefixOR_1;
        state_2_1 <= winner_2_1;
      end
      idle_3 <= auto_in_b_ready & in_0_b_valid | ~anyValid_1 & idle_3;
      if (idle_3 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_3) begin
        state_3_0 <= readys_readys_1[0] & auto_out_0_b_valid;
        state_3_1 <= readys_readys_1[1] & auto_out_1_b_valid;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        latched = _RANDOM[2'h2][0];
        idle_2 = _RANDOM[2'h2][9];
        readys_mask = _RANDOM[2'h2][11:10];
        state_2_0 = _RANDOM[2'h2][12];
        state_2_1 = _RANDOM[2'h2][13];
        idle_3 = _RANDOM[2'h2][14];
        readys_mask_1 = _RANDOM[2'h2][16:15];
        state_3_0 = _RANDOM[2'h2][17];
        state_3_1 = _RANDOM[2'h2][18];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        latched = 1'h0;
        idle_2 = 1'h1;
        readys_mask = 2'h3;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        idle_3 = 1'h1;
        readys_mask_1 = 2'h3;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue2_UInt2 awIn_0 (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_awIn_0_io_enq_ready),
    .io_enq_valid (awIn_0_io_enq_valid),
    .io_enq_bits  ({requestAWIO_0_1, requestAWIO_0_0}),
    .io_deq_ready (auto_in_w_valid & auto_in_w_bits_last & _portsWOI_in_0_w_ready_T_2),
    .io_deq_valid (_awIn_0_io_deq_valid),
    .io_deq_bits  (_awIn_0_io_deq_bits)
  );
  assign auto_in_aw_ready = _portsAWOI_in_0_aw_ready_T_2 & _nodeIn_aw_ready_T;
  assign auto_in_w_ready = _portsWOI_in_0_w_ready_T_2 & _awIn_0_io_deq_valid;
  assign auto_in_b_valid = in_0_b_valid;
  assign auto_in_ar_ready =
    requestARIO_0_0 & auto_out_0_ar_ready | requestARIO_0_1 & auto_out_1_ar_ready;
  assign auto_in_r_valid = in_0_r_valid;
  assign auto_in_r_bits_data =
    (muxState_2_0 ? auto_out_0_r_bits_data : 256'h0)
    | (muxState_2_1 ? auto_out_1_r_bits_data : 256'h0);
  assign auto_in_r_bits_last =
    muxState_2_0 & auto_out_0_r_bits_last | muxState_2_1 & auto_out_1_r_bits_last;
  assign auto_out_1_aw_valid = in_0_aw_valid & requestAWIO_0_1;
  assign auto_out_1_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_1_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_1_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_1_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_1_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[1];
  assign auto_out_1_w_bits_data = auto_in_w_bits_data;
  assign auto_out_1_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_1_w_bits_last = auto_in_w_bits_last;
  assign auto_out_1_b_ready = auto_in_b_ready & (idle_3 ? readys_readys_1[1] : state_3_1);
  assign auto_out_1_ar_valid = auto_in_ar_valid & requestARIO_0_1;
  assign auto_out_1_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_1_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_1_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_1_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_1_r_ready = auto_in_r_ready & (idle_2 ? readys_readys[1] : state_2_1);
  assign auto_out_0_aw_valid = in_0_aw_valid & requestAWIO_0_0;
  assign auto_out_0_aw_bits_addr = auto_in_aw_bits_addr[35:0];
  assign auto_out_0_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_0_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_0_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_0_w_valid = in_0_w_valid & _awIn_0_io_deq_bits[0];
  assign auto_out_0_w_bits_data = auto_in_w_bits_data;
  assign auto_out_0_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_0_w_bits_last = auto_in_w_bits_last;
  assign auto_out_0_b_ready = auto_in_b_ready & (idle_3 ? readys_readys_1[0] : state_3_0);
  assign auto_out_0_ar_valid = auto_in_ar_valid & requestARIO_0_0;
  assign auto_out_0_ar_bits_addr = auto_in_ar_bits_addr[35:0];
  assign auto_out_0_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_0_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_0_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_0_r_ready = auto_in_r_ready & (idle_2 ? readys_readys[0] : state_2_0);
endmodule

