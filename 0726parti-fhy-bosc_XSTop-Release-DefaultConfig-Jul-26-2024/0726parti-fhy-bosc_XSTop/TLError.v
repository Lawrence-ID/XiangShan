// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module TLError(
  input         clock,
  input         reset,
  output        auto_in_a_ready,
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [2:0]  auto_in_a_bits_param,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [36:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
  input         auto_in_d_ready,
  output        auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_corrupt
);

  wire [2:0]      da_bits_opcode;
  wire            _a_q_io_deq_valid;
  wire [2:0]      _a_q_io_deq_bits_opcode;
  wire [2:0]      _a_q_io_deq_bits_size;
  wire [7:0][2:0] _GEN = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};
  wire [12:0]     _GEN_0 = {10'h0, _a_q_io_deq_bits_size};
  wire [12:0]     _a_last_beats1_decode_T = 13'h3F << _GEN_0;
  wire [2:0]      a_last_beats1 =
    _a_q_io_deq_bits_opcode[2] ? 3'h0 : ~(_a_last_beats1_decode_T[5:3]);
  reg  [2:0]      a_last_counter;
  wire            a_last = a_last_counter == 3'h1 | a_last_beats1 == 3'h0;
  wire [12:0]     _r_beats1_decode_T = 13'h3F << _GEN_0;
  wire [2:0]      r_beats1 = da_bits_opcode[0] ? ~(_r_beats1_decode_T[5:3]) : 3'h0;
  reg  [2:0]      r_counter;
  wire            a_q_io_deq_ready =
    auto_in_d_ready & (r_counter == 3'h1 | r_beats1 == 3'h0) | ~a_last;
  wire            da_valid = _a_q_io_deq_valid & a_last;
  assign da_bits_opcode = _GEN[_a_q_io_deq_bits_opcode];
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      a_last_counter <= 3'h0;
      r_counter <= 3'h0;
    end
    else begin
      if (a_q_io_deq_ready & _a_q_io_deq_valid)
        a_last_counter <=
          a_last_counter == 3'h0 ? a_last_beats1 : 3'(a_last_counter - 3'h1);
      if (auto_in_d_ready & da_valid)
        r_counter <= r_counter == 3'h0 ? r_beats1 : 3'(r_counter - 3'h1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        a_last_counter = _RANDOM[/*Zero width*/ 1'b0][3:1];
        r_counter = _RANDOM[/*Zero width*/ 1'b0][6:4];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        a_last_counter = 3'h0;
        r_counter = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue1_TLBundleA a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_ready        (auto_in_a_ready),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_enq_bits_corrupt (auto_in_a_bits_corrupt),
    .io_deq_ready        (a_q_io_deq_ready),
    .io_deq_valid        (_a_q_io_deq_valid),
    .io_deq_bits_opcode  (_a_q_io_deq_bits_opcode),
    .io_deq_bits_size    (_a_q_io_deq_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source)
  );
  assign auto_in_d_valid = da_valid;
  assign auto_in_d_bits_opcode = da_bits_opcode;
  assign auto_in_d_bits_size = _a_q_io_deq_bits_size;
  assign auto_in_d_bits_corrupt = da_bits_opcode[0];
endmodule

