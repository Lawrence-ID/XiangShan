// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module MMIOBridgeEntry(
  input          clock,
  input          reset,
  output         io_req_ready,
  input          io_req_valid,
  input  [2:0]   io_req_bits_opcode,
  input  [1:0]   io_req_bits_size,
  input  [2:0]   io_req_bits_source,
  input  [30:0]  io_req_bits_address,
  input  [7:0]   io_req_bits_mask,
  input  [63:0]  io_req_bits_data,
  input          io_resp_ready,
  output         io_resp_valid,
  output [2:0]   io_resp_bits_opcode,
  output [1:0]   io_resp_bits_size,
  output [2:0]   io_resp_bits_source,
  output         io_resp_bits_denied,
  output [63:0]  io_resp_bits_data,
  output         io_resp_bits_corrupt,
  input          io_chi_tx_req_ready,
  output         io_chi_tx_req_valid,
  output [7:0]   io_chi_tx_req_bits_txnID,
  output [5:0]   io_chi_tx_req_bits_opcode,
  output [2:0]   io_chi_tx_req_bits_size,
  output [47:0]  io_chi_tx_req_bits_addr,
  output         io_chi_tx_req_bits_allowRetry,
  output [3:0]   io_chi_tx_req_bits_pCrdType,
  input          io_chi_tx_dat_ready,
  output         io_chi_tx_dat_valid,
  output [6:0]   io_chi_tx_dat_bits_tgtID,
  output [7:0]   io_chi_tx_dat_bits_txnID,
  output [1:0]   io_chi_tx_dat_bits_ccID,
  output [1:0]   io_chi_tx_dat_bits_dataID,
  output [31:0]  io_chi_tx_dat_bits_be,
  output [255:0] io_chi_tx_dat_bits_data,
  output         io_chi_rx_rsp_ready,
  input          io_chi_rx_rsp_valid,
  input  [6:0]   io_chi_rx_rsp_bits_srcID,
  input  [3:0]   io_chi_rx_rsp_bits_opcode,
  input  [1:0]   io_chi_rx_rsp_bits_respErr,
  input  [7:0]   io_chi_rx_rsp_bits_dbID,
  input  [3:0]   io_chi_rx_rsp_bits_pCrdType,
  output         io_chi_rx_dat_ready,
  input          io_chi_rx_dat_valid,
  input  [1:0]   io_chi_rx_dat_bits_respErr,
  input  [255:0] io_chi_rx_dat_bits_data,
  input          io_id,
  output         io_pCrdQuery_valid,
  output [3:0]   io_pCrdQuery_bits_pCrdType,
  input          io_pCrdGrant,
  output         io_waitOnReadReceipt
);

  wire         io_chi_rx_dat_ready_0;
  wire         io_chi_rx_rsp_ready_0;
  wire         io_req_ready_0;
  reg          s_txreq;
  reg          s_ncbwrdata;
  reg          s_resp;
  reg          w_comp;
  reg          w_dbidresp;
  reg          w_compdata;
  reg          w_pcrdgrant;
  reg          w_readreceipt;
  wire         _io_resp_valid_T_1 = w_comp & w_dbidresp;
  wire         _req_T = io_req_ready_0 & io_req_valid;
  reg  [2:0]   req_opcode;
  reg  [1:0]   req_size;
  reg  [2:0]   req_source;
  reg  [30:0]  req_address;
  reg  [7:0]   req_mask;
  reg  [63:0]  req_data;
  reg  [255:0] rdata;
  reg  [6:0]   srcID;
  reg  [7:0]   dbID;
  reg          allowRetry;
  reg  [3:0]   pCrdType;
  reg          denied;
  reg          corrupt;
  wire         isRead = req_opcode == 3'h4;
  wire         _GEN = io_chi_rx_dat_ready_0 & io_chi_rx_dat_valid;
  wire         _GEN_0 = io_chi_rx_rsp_ready_0 & io_chi_rx_rsp_valid;
  wire         _GEN_1 = io_chi_rx_rsp_bits_opcode == 4'h5;
  wire         _GEN_2 = _GEN_0 & (_GEN_1 | io_chi_rx_rsp_bits_opcode == 4'h4);
  wire         _GEN_3 = _GEN_0 & (_GEN_1 | io_chi_rx_rsp_bits_opcode == 4'h6);
  wire         _GEN_4 = _GEN_0 & io_chi_rx_rsp_bits_opcode == 4'h3;
  assign io_req_ready_0 =
    s_txreq & s_ncbwrdata & s_resp & _io_resp_valid_T_1 & w_compdata & w_pcrdgrant
    & w_readreceipt;
  wire         io_chi_tx_req_valid_0 = ~s_txreq & w_pcrdgrant;
  wire         io_resp_valid_0 =
    ~s_resp & (isRead ? w_compdata : _io_resp_valid_T_1 & s_ncbwrdata);
  wire         _io_chi_tx_dat_bits_be_T_8 = req_address[4:3] == 2'h0;
  wire         _io_chi_tx_dat_bits_be_T_9 = req_address[4:3] == 2'h1;
  wire         _io_chi_tx_dat_bits_be_T_10 = req_address[4:3] == 2'h2;
  wire         io_chi_tx_dat_valid_0 = ~s_ncbwrdata & w_dbidresp;
  wire [31:0]  _io_chi_tx_dat_bits_be_T_14 =
    (_io_chi_tx_dat_bits_be_T_8 ? {24'h0, req_mask} : 32'h0)
    | (_io_chi_tx_dat_bits_be_T_9 ? {16'h0, req_mask, 8'h0} : 32'h0)
    | (_io_chi_tx_dat_bits_be_T_10 ? {8'h0, req_mask, 16'h0} : 32'h0)
    | ((&(req_address[4:3])) ? {req_mask, 24'h0} : 32'h0);
  assign io_chi_rx_rsp_ready_0 = (~w_comp | ~w_dbidresp | ~w_readreceipt) & s_txreq;
  assign io_chi_rx_dat_ready_0 = ~w_compdata & s_txreq;
  wire         _GEN_5 = io_req_bits_opcode == 3'h4;
  wire         _GEN_6 = _req_T & _GEN_5;
  wire         _GEN_7 =
    ~_req_T | _GEN_5 | ~(io_req_bits_opcode == 3'h0 | io_req_bits_opcode == 3'h1);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s_txreq <= 1'h1;
      s_ncbwrdata <= 1'h1;
      s_resp <= 1'h1;
      w_comp <= 1'h1;
      w_dbidresp <= 1'h1;
      w_compdata <= 1'h1;
      w_pcrdgrant <= 1'h1;
      w_readreceipt <= 1'h1;
      allowRetry <= 1'h1;
    end
    else begin
      s_txreq <=
        ~_GEN_4 & (io_chi_tx_req_ready & io_chi_tx_req_valid_0 | ~_req_T & s_txreq);
      s_ncbwrdata <= io_chi_tx_dat_ready & io_chi_tx_dat_valid_0 | _GEN_7 & s_ncbwrdata;
      s_resp <= io_resp_ready & io_resp_valid_0 | ~_req_T & s_resp;
      w_comp <= _GEN_2 | _GEN_7 & w_comp;
      w_dbidresp <= _GEN_3 | _GEN_7 & w_dbidresp;
      w_compdata <= _GEN | ~_GEN_6 & w_compdata;
      w_pcrdgrant <= io_pCrdGrant | ~_GEN_4 & w_pcrdgrant;
      w_readreceipt <=
        _GEN_0 & io_chi_rx_rsp_bits_opcode == 4'h8 | ~_GEN_6 & w_readreceipt;
      allowRetry <= ~_GEN_4 & (_req_T | allowRetry);
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_req_T) begin
      req_opcode <= io_req_bits_opcode;
      req_size <= io_req_bits_size;
      req_source <= io_req_bits_source;
      req_address <= io_req_bits_address;
      req_mask <= io_req_bits_mask;
      req_data <= io_req_bits_data;
    end
    if (_GEN)
      rdata <= io_chi_rx_dat_bits_data;
    if (_GEN_3) begin
      srcID <= io_chi_rx_rsp_bits_srcID;
      dbID <= io_chi_rx_rsp_bits_dbID;
    end
    if (_GEN_4)
      pCrdType <= io_chi_rx_rsp_bits_pCrdType;
    denied <=
      _GEN_2
        ? denied | (&io_chi_rx_rsp_bits_respErr)
        : _GEN ? denied | (&io_chi_rx_dat_bits_respErr) : ~_req_T & denied;
    corrupt <= _GEN ? corrupt | io_chi_rx_dat_bits_respErr == 2'h2 : ~_req_T & corrupt;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:12];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hD; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s_txreq = _RANDOM[4'h0][0];
        s_ncbwrdata = _RANDOM[4'h0][1];
        s_resp = _RANDOM[4'h0][2];
        w_comp = _RANDOM[4'h0][3];
        w_dbidresp = _RANDOM[4'h0][4];
        w_compdata = _RANDOM[4'h0][5];
        w_pcrdgrant = _RANDOM[4'h0][6];
        w_readreceipt = _RANDOM[4'h0][7];
        req_opcode = _RANDOM[4'h0][10:8];
        req_size = _RANDOM[4'h0][15:14];
        req_source = _RANDOM[4'h0][18:16];
        req_address = {_RANDOM[4'h0][31:19], _RANDOM[4'h1][17:0]};
        req_mask = _RANDOM[4'h1][25:18];
        req_data = {_RANDOM[4'h1][31:26], _RANDOM[4'h2], _RANDOM[4'h3][25:0]};
        rdata =
          {_RANDOM[4'h3][31:27],
           _RANDOM[4'h4],
           _RANDOM[4'h5],
           _RANDOM[4'h6],
           _RANDOM[4'h7],
           _RANDOM[4'h8],
           _RANDOM[4'h9],
           _RANDOM[4'hA],
           _RANDOM[4'hB][26:0]};
        srcID = {_RANDOM[4'hB][31:27], _RANDOM[4'hC][1:0]};
        dbID = _RANDOM[4'hC][9:2];
        allowRetry = _RANDOM[4'hC][10];
        pCrdType = _RANDOM[4'hC][14:11];
        denied = _RANDOM[4'hC][15];
        corrupt = _RANDOM[4'hC][16];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s_txreq = 1'h1;
        s_ncbwrdata = 1'h1;
        s_resp = 1'h1;
        w_comp = 1'h1;
        w_dbidresp = 1'h1;
        w_compdata = 1'h1;
        w_pcrdgrant = 1'h1;
        w_readreceipt = 1'h1;
        allowRetry = 1'h1;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = io_req_ready_0;
  assign io_resp_valid = io_resp_valid_0;
  assign io_resp_bits_opcode = {2'h0, isRead};
  assign io_resp_bits_size = req_size;
  assign io_resp_bits_source = req_source;
  assign io_resp_bits_denied = denied;
  assign io_resp_bits_data =
    (_io_chi_tx_dat_bits_be_T_8 ? rdata[63:0] : 64'h0)
    | (_io_chi_tx_dat_bits_be_T_9 ? rdata[127:64] : 64'h0)
    | (_io_chi_tx_dat_bits_be_T_10 ? rdata[191:128] : 64'h0)
    | ((&(req_address[4:3])) ? rdata[255:192] : 64'h0);
  assign io_resp_bits_corrupt = isRead & corrupt;
  assign io_chi_tx_req_valid = io_chi_tx_req_valid_0;
  assign io_chi_tx_req_bits_txnID = {7'h0, io_id};
  assign io_chi_tx_req_bits_opcode =
    {3'h0, isRead, 2'h0} | (req_opcode == 3'h0 ? 6'h1D : 6'h0)
    | (req_opcode == 3'h1 ? 6'h1C : 6'h0);
  assign io_chi_tx_req_bits_size = {1'h0, req_size};
  assign io_chi_tx_req_bits_addr = {17'h0, req_address};
  assign io_chi_tx_req_bits_allowRetry = allowRetry;
  assign io_chi_tx_req_bits_pCrdType = allowRetry ? 4'h0 : pCrdType;
  assign io_chi_tx_dat_valid = io_chi_tx_dat_valid_0;
  assign io_chi_tx_dat_bits_tgtID = srcID;
  assign io_chi_tx_dat_bits_txnID = dbID;
  assign io_chi_tx_dat_bits_ccID = req_address[5:4];
  assign io_chi_tx_dat_bits_dataID = {req_address[5], 1'h0};
  assign io_chi_tx_dat_bits_be = _io_chi_tx_dat_bits_be_T_14;
  assign io_chi_tx_dat_bits_data =
    {2{{2{req_data}}}}
    & {{8{_io_chi_tx_dat_bits_be_T_14[31]}},
       {8{_io_chi_tx_dat_bits_be_T_14[30]}},
       {8{_io_chi_tx_dat_bits_be_T_14[29]}},
       {8{_io_chi_tx_dat_bits_be_T_14[28]}},
       {8{_io_chi_tx_dat_bits_be_T_14[27]}},
       {8{_io_chi_tx_dat_bits_be_T_14[26]}},
       {8{_io_chi_tx_dat_bits_be_T_14[25]}},
       {8{_io_chi_tx_dat_bits_be_T_14[24]}},
       {8{_io_chi_tx_dat_bits_be_T_14[23]}},
       {8{_io_chi_tx_dat_bits_be_T_14[22]}},
       {8{_io_chi_tx_dat_bits_be_T_14[21]}},
       {8{_io_chi_tx_dat_bits_be_T_14[20]}},
       {8{_io_chi_tx_dat_bits_be_T_14[19]}},
       {8{_io_chi_tx_dat_bits_be_T_14[18]}},
       {8{_io_chi_tx_dat_bits_be_T_14[17]}},
       {8{_io_chi_tx_dat_bits_be_T_14[16]}},
       {8{_io_chi_tx_dat_bits_be_T_14[15]}},
       {8{_io_chi_tx_dat_bits_be_T_14[14]}},
       {8{_io_chi_tx_dat_bits_be_T_14[13]}},
       {8{_io_chi_tx_dat_bits_be_T_14[12]}},
       {8{_io_chi_tx_dat_bits_be_T_14[11]}},
       {8{_io_chi_tx_dat_bits_be_T_14[10]}},
       {8{_io_chi_tx_dat_bits_be_T_14[9]}},
       {8{_io_chi_tx_dat_bits_be_T_14[8]}},
       {8{_io_chi_tx_dat_bits_be_T_14[7]}},
       {8{_io_chi_tx_dat_bits_be_T_14[6]}},
       {8{_io_chi_tx_dat_bits_be_T_14[5]}},
       {8{_io_chi_tx_dat_bits_be_T_14[4]}},
       {8{_io_chi_tx_dat_bits_be_T_14[3]}},
       {8{_io_chi_tx_dat_bits_be_T_14[2]}},
       {8{_io_chi_tx_dat_bits_be_T_14[1]}},
       {8{_io_chi_tx_dat_bits_be_T_14[0]}}};
  assign io_chi_rx_rsp_ready = io_chi_rx_rsp_ready_0;
  assign io_chi_rx_dat_ready = io_chi_rx_dat_ready_0;
  assign io_pCrdQuery_valid = ~w_pcrdgrant;
  assign io_pCrdQuery_bits_pCrdType = pCrdType;
  assign io_waitOnReadReceipt = ~w_readreceipt & (s_txreq | ~allowRetry);
endmodule

