// Generated by CIRCT firtool-1.74.0
// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS
// Standard header to adapt well known macros for register randomization.
// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM
// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM
// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY
// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module WBArbiter_62(
  input        clock,
  input        reset,
  output       io_in_0_ready,
  input        io_in_0_valid,
  input  [6:0] io_in_0_bits_addr,
  output       io_in_1_ready,
  input        io_in_1_valid,
  input  [6:0] io_in_1_bits_addr,
  output       io_in_2_ready,
  input        io_in_2_valid,
  input  [6:0] io_in_2_bits_addr,
  output       io_out_valid,
  output [6:0] io_out_bits_addr
);

  wire       io_in_2_ready_0;
  wire       io_in_1_ready_0;
  wire       io_in_0_ready_0;
  reg  [2:0] cancelCounter_0;
  reg  [2:0] cancelCounter_1;
  reg  [2:0] cancelCounter_2;
  reg        isFull_0;
  reg        isFull_1;
  reg        isFull_2;
  reg        hasFull;
  wire       _GEN = io_in_0_valid & ~io_in_0_ready_0;
  wire       _GEN_0 = io_in_0_valid & io_in_0_ready_0;
  wire       isFullNext_0 = _GEN ? (&(cancelCounter_0[2:1])) : ~_GEN_0 & isFull_0;
  wire       _GEN_1 = io_in_1_valid & ~io_in_1_ready_0;
  wire       _GEN_2 = io_in_1_valid & io_in_1_ready_0;
  wire       isFullNext_1 = _GEN_1 ? (&(cancelCounter_1[2:1])) : ~_GEN_2 & isFull_1;
  wire       _GEN_3 = io_in_2_valid & ~io_in_2_ready_0;
  wire       _GEN_4 = io_in_2_valid & io_in_2_ready_0;
  wire       isFullNext_2 = _GEN_3 ? (&(cancelCounter_2[2:1])) : ~_GEN_4 & isFull_2;
  wire       _GEN_5 =
    ~hasFull
    | ~(io_in_0_valid & isFull_0 | io_in_1_valid & isFull_1 | io_in_2_valid & isFull_2);
  wire       finalValid_0 = io_in_0_valid & (_GEN_5 | isFull_0);
  wire       finalValid_1 = io_in_1_valid & (_GEN_5 | isFull_1);
  wire       finalValid_2 = io_in_2_valid & (_GEN_5 | isFull_2);
  wire       _io_out_valid_T = finalValid_0 | finalValid_1;
  assign io_in_0_ready_0 = finalValid_0 | ~io_in_0_valid;
  assign io_in_1_ready_0 = ~finalValid_0 & finalValid_1 | ~io_in_1_valid;
  assign io_in_2_ready_0 = ~_io_out_valid_T & finalValid_2 | ~io_in_2_valid;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      cancelCounter_0 <= 3'h0;
      cancelCounter_1 <= 3'h0;
      cancelCounter_2 <= 3'h0;
      isFull_0 <= 1'h0;
      isFull_1 <= 1'h0;
      isFull_2 <= 1'h0;
      hasFull <= 1'h0;
    end
    else begin
      if (_GEN)
        cancelCounter_0 <= (&cancelCounter_0) ? 3'h7 : 3'(cancelCounter_0 + 3'h1);
      else if (_GEN_0)
        cancelCounter_0 <= 3'h0;
      if (_GEN_1)
        cancelCounter_1 <= (&cancelCounter_1) ? 3'h7 : 3'(cancelCounter_1 + 3'h1);
      else if (_GEN_2)
        cancelCounter_1 <= 3'h0;
      if (_GEN_3)
        cancelCounter_2 <= (&cancelCounter_2) ? 3'h7 : 3'(cancelCounter_2 + 3'h1);
      else if (_GEN_4)
        cancelCounter_2 <= 3'h0;
      isFull_0 <= isFullNext_0;
      isFull_1 <= isFullNext_1;
      isFull_2 <= isFullNext_2;
      hasFull <= |{isFullNext_2, isFullNext_1, isFullNext_0};
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        cancelCounter_0 = _RANDOM[/*Zero width*/ 1'b0][2:0];
        cancelCounter_1 = _RANDOM[/*Zero width*/ 1'b0][5:3];
        cancelCounter_2 = _RANDOM[/*Zero width*/ 1'b0][8:6];
        isFull_0 = _RANDOM[/*Zero width*/ 1'b0][9];
        isFull_1 = _RANDOM[/*Zero width*/ 1'b0][10];
        isFull_2 = _RANDOM[/*Zero width*/ 1'b0][11];
        hasFull = _RANDOM[/*Zero width*/ 1'b0][12];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        cancelCounter_0 = 3'h0;
        cancelCounter_1 = 3'h0;
        cancelCounter_2 = 3'h0;
        isFull_0 = 1'h0;
        isFull_1 = 1'h0;
        isFull_2 = 1'h0;
        hasFull = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_0_ready = io_in_0_ready_0;
  assign io_in_1_ready = io_in_1_ready_0;
  assign io_in_2_ready = io_in_2_ready_0;
  assign io_out_valid = _io_out_valid_T | finalValid_2;
  assign io_out_bits_addr =
    finalValid_0
      ? io_in_0_bits_addr
      : finalValid_1 ? io_in_1_bits_addr : io_in_2_bits_addr;
endmodule

